'use strict';

var Assert = require('assert');
var caller = require('caller');
var Utils = require('../../lib/utils');
var logger = require('logging-inc').logger('service-client-ebay/service-use');
var Hmv = require('header-multi-value-ebay');
var moduleConfig = require('module-config-inc');
var config = require('service-instruments-ebay/config');
var Objutil = require('objutil');
var Trooba = require('trooba');

module.exports = function(input, out) {
    var asyncOut = out.beginAsync();
    var clientId = input.id;

    var callerModule = caller(2);
    var moduleRef = Utils.lookupModule(input.caller || callerModule) || module;

    var res = out.stream;
    var req = res && res.req;
    if (!req) {
        req = out.global && out.global.req;
        }

    Assert.ok(req, 'request is missing in marko context');
    // pre-execute the client on server side before sending data to the browser
    // this is done without executing actual http call by removing it from the
    // line of instruments
    // the config is then stored into window object for client to consume at
    // browser side
    Trooba
    .use(function preConfigure(pipe) {
        logger.info('pre-configring pipeline for config extraction to browser side');
        pipe.context.instruments = [
            'tracking',
            'outbound-context',
            'oauth'
        ];
    })
    .use(config)
    .use(function onComplete(pipe) {
        pipe.on('request', function onRequest(request) {
            var options = request;
            var allowHeaders = options['allow-headers'];
            logger.info('Allowed headers', allowHeaders);
            if (allowHeaders && options.headers) {
                options.headers = allowHeaders.reduce(function reduce(memo, key) {
                    if (allowHeaders.indexOf(key) >= 0 && options.headers[key] !== undefined) {
                        memo[key] = options.headers[key];
                    }
                    return memo;
                }, {});
            }

            // sanitize end user context
            var euc = options.headers['X-EBAY-C-ENDUSERCTX'];
            if (euc && (euc.indexOf('origUserId=') !== -1 || euc.indexOf('clientId=') !== -1)) {
                var eucHeader = Hmv.parse(euc);
                if(eucHeader.value.origUserId) {
                    delete eucHeader.value.origUserId;
                }
                if(eucHeader.value.clientId) {
                    delete eucHeader.value.clientId;
                }
                options.headers['X-EBAY-C-ENDUSERCTX'] = eucHeader.toString();
            }

            var noncePH = req && req.csp && req.csp.nonce ?
                'nonce="'+req.csp.nonce+'"' : '';
            var writeScript = '<script type="text/javascript" '+noncePH+'>(function (serviceConfigs) {' +
                'serviceConfigs["' + clientId + '"] = ' + JSON.stringify(options) + ';' +
            '}(window.$serviceConfigs || (window.$serviceConfigs = {})));</script>';

            asyncOut.write(writeScript);

            asyncOut.end();
        });
    })
    .build()
    .create({
        app: {
            request: req,
            response: req.res
        },
        caller: moduleRef,
        clientId: clientId
    })
    .request({
        tolerant: true,
        browser: true
    }, function noop(err) {
                logger.error(err);
                asyncOut.error(err);
        });

};
