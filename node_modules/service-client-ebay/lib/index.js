'use strict';

var Assert = require('assert');

var Trooba = require('trooba');

var RequestLocal = require('request-local');
var config = require('service-instruments-ebay/config');
var httpTransport = require('service-instruments-ebay/transports/http-transport');
var caller = require('caller');

var Utils = require('./utils');

var logger = require('logging-inc').logger('service-client-ebay/index');

var pipeTemplate = new Trooba()
    .use(function injectContext(pipe) {
        var context = pipe.context;
        if (context.injectCtx) {
            context.app = context.app || {};
            context.app.request = tryRequest();
            context.app.response = context.app.request && context.app.request.res;
        }
    })
    .use(config)
    .use(httpTransport);

var pipes = {};

/**
 * Setup context for a request, if not provided a default will be used.
 * @param ctx is a context similar to http request or mock request
*/
module.exports = {
    context: function context(ctx) {
        if (!ctx) {
            throw new Error('Context must be provided');
        }

        if (!ctx.isContext) {
            // assuming ctx is request object
            ctx = {
                app: {
                    request: ctx,
                    response: ctx.res
                }
            };
        }

        return {
            getClient: function getClient(id) {
                ctx.caller = process.env.TEST_ROOT ||
                    ctx.moduleRef ||
                    Utils.lookupModule(ctx.caller || caller(1));
                ctx.clientId = id;

                var pipe = pipes[id] = pipes[id] || pipeTemplate.build(ctx);

                return pipe.create(ctx, 'client:default');
            }
        };
    },

    getClient: function getClient(id) {
        console.error('getClient method is deprecated, ' +
            'please switch to require(\'service-client-ebay\').context(req).getClient(\'' +
            id + '\')');

        return this.context({
            injectCtx: true,
            caller: caller(1),
            isContext: true
        }).getClient(id);
    }
};

module.exports.setupContext = function setupContext(options, callback) {
    Utils.setupContext(options, function (err, context) {
        Assert.ok(!err, 'Currently, no error is expected during setup');

        context.getClient = function getClient(id) {
            return module.exports.context({
                caller: options.moduleRef || context.caller,
                app: {
                    request: {
                        ebay: context
                    }
                },
                isContext: true
            }).getClient(id);
        };
        callback(err, context);
    });
};

function tryRequest() {
    try {
        return RequestLocal.data.request;
    } catch (e) {
        logger.warn('service-client-ebay: request-local is not available');
    }
}
