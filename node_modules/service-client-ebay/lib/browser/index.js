/*jslint browser: true*/
'use strict';

var Trooba = require('trooba');
var httpfy = require('service-instruments-ebay/transports/http-api');
var xhr = require('trooba-xhr-transport');
var sifr = require('service-instruments-ebay/transports/sifr-transport');
var Legacy = require('service-instruments-ebay/lib/legacy');

var XhrUtils = xhr.Utils;
XhrUtils.mixinMvHeaders = require('./utils').mixinMvHeaders;

function transport(pipe, config) {
    pipe.on('request', function onRequest(request) {
        request = XhrUtils.mixin(config,
            request, {});

        Legacy.updateRequest(request);

        var tr = xhr;

        if (request.sifr || !(request.xhr || isCors())) {
            tr = sifr;
        }

        tr.invoke(request, function onResponse(err, response) {
            if (err) {
                return pipe.throw(err);
            }
            if (response) {
                XhrUtils.deserializeResponseHeaders(response);
            }
            pipe.respond(response);
        });
    });

    httpfy(pipe);
}
module.exports = transport;

var pipe = Trooba
    .use(config) // <<< attach configuration handler that would load the rest
    .use(transport)
    .build();

/**
 * Setup context for a request, if not provided a default will be used.
 * @param ctx is a context similar to http request or mock request
*/
module.exports = {
    context: function context(ctx) {
        ctx = ctx || {};

        return {
            getClient: function getClient(id) {
                ctx.clientId = id;

                return pipe.create(ctx, 'client:default');
            }
        };
    },

    getClient: function getClient(id) {
        console.error('getClient method is deprecated, ' +
            'please switch to require(\'service-client-ebay\').context(req).getClient(\'' +
            id + '\')');

        return this.context().getClient(id);
    }
};

function config(pipe) {
    var clientId = pipe.context.clientId;

    pipe.on('request', function onRequest(request, next) {
        var options = request;

        var configs = window.$serviceConfigs;
        var config = configs[clientId];
        if (!config) {
            return pipe.throw(new Error('Cannot find client configuration, id: ' +
                clientId +
                ', please make sure you enabled it using service-use tag'));
        }

        // merge multivalue headers
        options.headers = XhrUtils.mixinMvHeaders(options.headers,
            config.headers, options.mvheaders);

        request = XhrUtils.mixin(config, request, {});
        next();
    });
}

function isCors() {
    return 'withCredentials' in new window.XMLHttpRequest();
}
