'use strict';

var EventEmitter = require('events').EventEmitter;
var Fs = require('fs');
var NodePath = require('path');
var Thing = require('core-util-is');
var Async = require('async');

var logger = require('logging-inc').logger('service-client-ebay/utils');

var moduleRoots = {};

function _lookupModule(dir) {
    const file = NodePath.join(dir, 'package.json');

    if (Fs.existsSync(file)) {
        return dir;
    }

    const parent = NodePath.dirname(dir);
    if (parent !== dir) {
        return _lookupModule(parent);
    }
}

module.exports.lookupModule = function lookupModule(dir) {
    const target = moduleRoots[dir] = moduleRoots[dir] || _lookupModule(dir) || 'NotFound';
    return target === 'NotFound' ? undefined : target;
};

module.exports.reset = function reset() {
    moduleRoots = {};
};

/**
 * This method should be used for service calls originating outside of request context.
 * It simulates the request context
 */
module.exports.setupContext = function setupContext(options, callback) {

    var requestLocal = require('request-local/middleware');
    var oauth = require('oauth-ebay');
    var commonsEbay = require('commons-ebay/middleware');

    var req = new EventEmitter();
    req.headers = {};
    req.ebay = {};
    req.url = 'http://www.ebay.com';

    // mock recognized user
    var res = new EventEmitter();

    var pipe = [
        requestLocal.create().bind(requestLocal, req, res),
        commonsEbay().bind(commonsEbay, req, res),
        function itercept(next) {
            // mock user
            req.ebay.getLevel1UserId = function getLevel1UserId() {
                return options.user && !options.user.recognized && options.user.id;
            };

            req.ebay.getBestUserId = function getBestUserId() {
                return options.user && !options.user.recognized && options.user.id;
            };

            // moch user account id
            req.ebay.getAccountId = function getAccountId() {
                return options.user && !options.user.recognized && options.user.account;
            };

            // mock user
            req.ebay.getJSPersistentUserId = function getJSPersistentUserId() {
                return options.user && options.user.id;
            };

            // moch user account id
            req.ebay.getPersistentAccountId = function getPersistentAccountId() {
                return options.user && options.user.account;
            };

            if (options.oauth) {
                req.ebay.appContext = req.ebay.appContext || {};
                req.ebay.appContext.appName = options.oauth['app-name'];
            }

            next();
        }
    ];

    if (options.oauth) {
        pipe.push(oauth().bind(oauth, req, res));
    }

    Async.series(pipe, function (err) {
        callback(err, req.ebay);
    });

};
