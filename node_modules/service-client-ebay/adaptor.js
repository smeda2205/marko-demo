'use strict';

var DataHolder = require('raptor-async/DataHolder');

var Adaptor = module.exports.Adaptor = function Adaptor() {
	this.models = {};
};

var proto = Adaptor.prototype;

proto.holder = function holder(id) {
	return this.models[id] ||
		(this.models[id] = new DataHolder());
};

proto.complete = function complete(err) {
	Object.keys(this.models).map(function(id) {
		var holder = this.models[id];
		if (!holder.isSettled()) {
			if (err) {
				holder.reject(err); // no model received
			}
			else {
				holder.resolve(); // no model received
			}
		}
	}, this);
};

proto.getHandler = function getHandler() {
	var self = this;
	return this.handler = this.handler || function handler(err, response) {
		var chunk = response && response.body;
		if (err || chunk === undefined) {
			return self.complete(err);
		}

		var holder = self.holder(chunk.name);
		holder.resolve(chunk);
	};
};

proto.get = function get(id) {
	var self = this;
	return function(callback) {
		var holder = self.holder(id);
		holder.done(function(err, chunk) {
			if (err || chunk === undefined) {
				// for error or end of stream
				return callback(err, chunk);
			}
			// data chunk
			callback(null, chunk);
		});
	};
};

proto.on = function on(id, callback) {
	this.get(id)(callback);
};
