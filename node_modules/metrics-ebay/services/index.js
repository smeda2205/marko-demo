'use strict';

var Metrics = require('..');
var AppContext = require('app-context-ebay');

Metrics.publishers.cal.init('rest');

var monitors = {};

module.exports.monitors = monitors;

module.exports.getOrCreateMonitor = function getOrCreateMonitor(options) {
    var key = [options.clientId, options.service, options.operation].join('.');
    return monitors[key] = monitors[key] || (function () {
        var monitor = Metrics.create({
            spec: 'rest',  // specifies metrics spec for rest protocol, currently we use it for soa and rest
            interval: 60000,  // interval to publish metrics data, if omitted, will not publish
            identity: {
                clientId: options.clientId, // rest requires clientId
                pool: AppContext.poolName,       // pool name
                service: options.service, // service name
                operation: options.operation      // operation name
            }
        });

        monitor.start = module.exports.start.bind(null, monitor);

        return monitor;
    })();
};

module.exports.start = function start(monitor) {
    var st = Date.now();
    monitor.update('calls');

    return function end(err, response) {
        var total = Date.now() - st;
        monitor.update('totalTime', total);

        if (err && (err.code === 'ETIMEDOUT' ||
            err.code === 'ESOCKETTIMEDOUT' ||
            err.code === 'ECONNRESET')) {

            monitor.update('timeouts');
        }

        if (err) {
            return monitor.update('errors');
        }

        if (response) {
            if (response.statusCode >= 500) {
                return monitor.update('status5XX');
            }
            if (response.statusCode >= 400) {
                return monitor.update('status4XX');
            }
            if (response.statusCode >= 300) {
                return monitor.update('statusXXX');
            }

            return monitor.update('status200');
        }

        monitor.update('status5XX');
    };
};
