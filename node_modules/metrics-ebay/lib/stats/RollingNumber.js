'use strict';

const ActualTime = require('./ActualTime');
const Bucket = require('./CounterBucket');

class RollingNumber {

    constructor(timeInMillisecond, numberOfBuckets) {
        this.windowLength = timeInMillisecond || 60000;
        this.numberOfBuckets = numberOfBuckets || 6;
        this.buckets = [];
        this.cumulativeSum = 0;
    }

    get bucketSizeInMilliseconds() {
        return this.windowLength / this.numberOfBuckets;
    }

    increment() {
        this.getCurrentBucket().increment();
    }

    getCurrentBucket() {
        let currentTime = ActualTime.getTime();

        if (this.buckets.length === 0) {
            let newBucket = new Bucket(currentTime);
            this.buckets.push(newBucket);
            return newBucket;
        }

        let currentBucket = this.buckets[this.buckets.length-1];
        if (currentTime > (currentBucket.windowStart + this.windowLength)) {
            this.reset();
            return this.getCurrentBucket();
        }
        if (currentTime < (currentBucket.windowStart + this.bucketSizeInMilliseconds)) {
            return currentBucket;
        } else {
            this.rollWindow(currentTime);
            return this.getCurrentBucket();
        }
    }

    rollWindow(currentTime) {
        let currentBucket = this.buckets[this.buckets.length-1];
        if (currentBucket) {
            this.cumulativeSum += currentBucket.get();
        }

        let newBucket = new Bucket(currentTime);
        if (this.buckets.length === this.numberOfBuckets) {
            this.buckets.shift();
        }
        this.buckets.push(newBucket);
    }

    getRollingSum() {
        // trigger window roll if needed
        this.getCurrentBucket();
        let sum = 0;
        for (var bucket of this.buckets) {
            sum += bucket.get();
        }
        return sum;
    }

    getCumulativeSum() {
        return this.getCurrentBucket().get() + this.cumulativeSum;
    }

    reset() {
        let currentBucket = this.buckets[this.buckets.length-1];
        if (currentBucket) {
            this.cumulativeSum += currentBucket.get();
        }
        this.buckets = [];
    }
}

module.exports = RollingNumber;
