'use strict';

var events = require('events');
var assert = require('assert');
var objutil = require('objutil');
var modConfig = require('module-config-inc');
var CAL = require('cal');
module.exports = new events.EventEmitter();
var LOG_LEVELS = module.exports.LOG_LEVELS = ['debug', 'info', 'warn', 'transaction', 'error', 'fatal'];
var TOPIC = 'event-args-logging';

var loglevels;

var configure = module.exports.configure = function configure(merge) {
    var config = modConfig(module);
    var configObject = config.get('logging-inc') || {};
    var configuration = merge && objutil.mixin(merge, configObject) || configObject;
    loglevels = refreshLogLevels(configuration);
    //module.exports.emit('change', configuration);
};

// Make sure logger is publishing to process
function init() {
    var targetEmitter;
    CAL.logger._publishToList.forEach(function (target) {
        if (target.emitter === process &&
            target.topic === TOPIC) {
            targetEmitter = target;
        }
    });
    if (!targetEmitter) {
        CAL.logger._publishToList.push({
            emitter: process,
            topic: TOPIC
        });
    }
}

module.exports.setupLogLevels = function setupLogLevels(name) {
    var levelSettings = {};
    LOG_LEVELS.forEach(function (level) {
        var rules = loglevels[level];
        if (rules) {
            var match = rules.skips.some(function (re) {
                return !!re.test(name);
            });
            if (match) {
                return false;
            }
            levelSettings[level] = rules.names.some(function (re) {
                return !!re.test(name);
            });
        }
    });
    return levelSettings;
};

function parseLogLevel(levelValue) {
    var skips = [];
    var names = [];
    (levelValue || '')
        .split(/[\s,]+/)
        .forEach(function (name) {
            name = name.replace('*', '.*?');
            if (name[0] === '-') {
                skips.push(new RegExp('^' + name.substr(1) + '$'));
            } else {
                names.push(new RegExp('^' + name + '$'));
            }
        });

    return {
        skips: skips,
        names: names
    };
}

function refreshLogLevels(config) {
    var loglevel = {};
    config = config && Object.keys(config.loglevel || {}).length && config.loglevel || {
        warn: '*'
    };
    LOG_LEVELS.forEach(function (level) {
        var value = config[level] || '';
        if (process.env.LOG_LEVEL) {
            value += ' ' + process.env[level];
        }
        if (!value) {
            return;
        }
        loglevel[level] = parseLogLevel(value);
    });
    return loglevel;
}

configure();