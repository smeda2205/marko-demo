'use strict';

var logging = require('../');
var cal = require('cal');
var events = require('events');
var assert = require('assert');
var path = require('path');
var fs = require('fs');
var publishing = require('cal-publishing-inc');

cal.setDefaultWriteStream('console');

describe('logging', function () {

    var eventArgs = [];
    var consoleError;
    var oldEnv = process.env.NODE_ENV;

    function cleanup(logDir) {
        if (fs.existsSync(logDir)) {
            fs.readdirSync(logDir).forEach(function (file) {
                fs.unlinkSync(path.resolve(logDir, file));
            });
            fs.rmdirSync(logDir);
        }
    }

    before(function (next) {
        process.on('cal-event-args', function (event) {
            eventArgs.push(event);
        });
        consoleError = console.error;

        next();
    });

    beforeEach(function (next) {
        logging.configure({});
        require('cal/middleware')()(new events.EventEmitter(),
            new events.EventEmitter(), next);
    });

    afterEach(function (next) {
        eventArgs = [];
        process.env.NODE_ENV = oldEnv;
        console.error = consoleError;
        logging.configure({
            loglevel: {
                warn: "*"
            }
        });
        next();
    });

    after(function (next) {
        cal.stop(next);
        cleanup(path.resolve('./logs'));
    });

    it('logger setup, default', function (done) {
        var logger = logging.logger();
        logger.warn('test warn message'); // make sure the levels are setup
        assert.ok(!logger._loglevels.debug);
        assert.ok(!logger._loglevels.info);
        assert.ok(logger._loglevels.warn);
        assert.ok(logger._loglevels.error);
        assert.ok(logger._loglevels.fatal);
        assert.ok(!logger.isLogLevelEnabled('debug'));
        assert.ok(!logger.isLogLevelEnabled('info'));
        assert.ok(logger.isLogLevelEnabled('warn'));
        assert.ok(logger.isLogLevelEnabled('error'));
        assert.ok(logger.isLogLevelEnabled('fatal'));

        // not check how change events works
        setTimeout(function () {
            logger.debug('test');
            assert.ok(!logger._loglevels.debug);
            assert.ok(logger._loglevels.transaction);
            assert.ok(logger._loglevels.error);
            done();
        }, 1000);
        logging.configure({
            loglevel: {
                debug: '*'
            }
        });
    });

    it('logger setup, info level', function () {
        logging.configure({
            loglevel: {
                info: '*'
            }
        });
        var logger = logging.logger();
        assert.ok(!logger._loglevels.debug);
        assert.ok('info', logger._loglevels.info);
        assert.ok('warn', logger._loglevels.warn);
        assert.ok('error', logger._loglevels.error);
        assert.ok('fatal', logger._loglevels.fatal);
        assert.ok(logger.isLogLevelEnabled('info'));
        assert.ok(logger.isLogLevelEnabled('warn'));
        assert.ok(logger.isLogLevelEnabled('error'));
        assert.ok(logger.isLogLevelEnabled('fatal'));
    });

    it('logger setup, various levels', function () {
        logging.configure({
            loglevel: {
                info: '*',
                debug: 'debug-logger',
                warn: 'warn-logger'
            }
        });
        var logger = logging.logger();
        assert.ok(!logger._loglevels.debug);
        assert.ok(logger._loglevels.info);
        assert.ok(logger._loglevels.warn);
        assert.ok(logger._loglevels.error);
        assert.ok(logger._loglevels.fatal);

        logger = logging.logger('debug-logger');
        assert.ok(logger._loglevels.debug);
        assert.ok(logger._loglevels.info);
        assert.ok(logger._loglevels.warn);
        assert.ok(logger._loglevels.error);
        assert.ok(logger._loglevels.fatal);

        logger = logging.logger('warn-logger');
        assert.ok(!logger._loglevels.debug);
        // global overrides specific
        assert.ok(logger._loglevels.info);
        assert.ok(logger._loglevels.warn);
        assert.ok(logger._loglevels.error);
        assert.ok(logger._loglevels.fatal);

        logging.configure({
            loglevel: {
                debug: 'debug-logger',
                error: 'error-logger,error-logger2'
            }
        });

        validateErrorLogger(logging.logger('error-logger'));
        validateErrorLogger(logging.logger('error-logger2'));

        logging.configure({
            loglevel: {
                debug: 'debug-logger',
                error: 'error-*'
            }
        });
        validateErrorLogger(logging.logger('error-logger'));
        validateErrorLogger(logging.logger('error-logger2'));

        logging.configure({
            loglevel: {
                debug: 'debug-logger',
                error: 'error-logger'
            }
        });
        validateErrorLogger(logging.logger('error-logger'));
        validateDisabledLogger(logging.logger('error-logger2'));

        logging.configure({
            loglevel: {
                fatal: 'fatal-logger'
            }
        });
        validateFatalLogger(logging.logger('fatal-logger'));

    });

    it('default logger should not log info', function (next) {
        var logger = logging.logger({
            inherit: false
        });
        logger.info('warning message');
        setTimeout(function () {
            assert.equal(0, eventArgs.length);
            next();
        }, 100);
    });

    it('default logger should log warn with error', function (next) {
        var logger = logging.logger({
            inherit: true
        });
        logger.warn('warning message', 'arg1', 'arg2', new Error('Test Error'));
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root', eventArgs[0].logger);
            assert.ok(eventArgs[0].data);
            assert.ok(eventArgs[0].data['warning message arg1 arg2']);
            assert.equal(1, eventArgs[0].status);
            assert.equal('root_Error', eventArgs[0].name);
            assert.equal('Warn', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);
            next();
        }, 100);
    });

    it('default logger should log warn without error with status 0', function (next) {
        var logger = logging.logger({
            inherit: true
        });
        logger.warn('warning message %s %s %j', 'arg1', 'arg2', {
            name: 'value'
        });

        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            // console.log('ARGS: ', eventArgs);
            assert.equal('root', eventArgs[0].name);
            assert.ok(eventArgs[0].data);
            assert.equal('warning message arg1 arg2 {"name":"value"}', eventArgs[0].data.msg || eventArgs[0].data);
            assert.equal(0, eventArgs[0].status);
            assert.equal('Warn', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);
            next();
        }, 100);
    });

    it('default logger should log warn with a lot of data', function (next) {
        var logger = logging.logger({
            inherit: true
        });
        logger.warn('warn: "%s" "%s" %s', 'data1', 'data2', 'data3');
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root', eventArgs[0].name);
            assert.equal(0, eventArgs[0].status);
            assert.ok(eventArgs[0].data);
            assert.equal('warn: "data1" "data2" data3', eventArgs[0].data.msg || eventArgs[0].data);
            assert.equal('Warn', eventArgs[0].type);
            assert.equal(0, eventArgs[0].parentEventId);
            assert.equal('E', eventArgs[0].messageClass);

            logger.warn('warn-test', 'data1');
            setTimeout(function () {
                assert.equal(2, eventArgs.length);
                assert.equal('root', eventArgs[1].name);
                assert.equal(0, eventArgs[1].status);
                assert.equal('warn-test data1', eventArgs[1].data.msg || eventArgs[1].data);
                assert.equal(0, eventArgs[1].parentEventId);
                assert.equal('Warn', eventArgs[1].type);
                assert.equal('E', eventArgs[1].messageClass);
                next();
            }, 100);
        }, 100);

    });

    it('default logger should log error', function (next) {
        var logger = logging.logger();
        logger.error('error-test');
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root', eventArgs[0].name);
            assert.equal(0, eventArgs[0].status);
            assert.equal('error-test', eventArgs[0].data.msg || eventArgs[0].data);
            assert.equal('Error', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);
            next();
        }, 100);
    });

    it('default logger should log error with Error object', function (next) {
        var logger = logging.logger();
        var error = new Error('test error');
        logger.error('error-test', error);
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root_Error', eventArgs[0].name);
            assert.equal(1, eventArgs[0].status);
            assert.ok(eventArgs[0].data['error-test']);
            assert.equal('Error', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);
            next();
        }, 100);
    });

    it('default logger should log error with Error object with more data', function (next) {
        logging.configure({
            loglevel: {
                error: '*'
            }
        });
        var logger = logging.logger();
        var error = new Error('test error');
        error.code = 222;
        assert.ok(logger.info('info', 'message').on); // event though it is disabled API should still be avaiable
        logger.error('error-test', 'TEST FAILED', error, 'data1', 'data2');
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root_222', eventArgs[0].name);
            assert.equal(222, eventArgs[0].status);
            assert.ok(eventArgs[0].data['error-test TEST FAILED data1 data2']);
            assert.equal('Error', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);
            next();
        }, 100);
    });

    it('default logger should log warn with Error object', function (next) {
        logging.configure({
            loglevel: {
                warn: '*'
            }
        });
        var logger = logging.logger();
        var error = new Error('test error');
        logger.warn('warn-test', error);
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root_Error', eventArgs[0].name);
            assert.equal(1, eventArgs[0].status);
            assert.ok(eventArgs[0].data['warn-test']);
            assert.equal('Warn', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);
            next();
        }, 100);
    });

    it('default logger should log with custom type', function (next) {
        var logger = logging.logger();
        var error = new Error('test error');
        var loggerT = logger.type('MyType');
        logger.warn('warn-test-default', error);
        setTimeout(function () {
            assert.equal(1, eventArgs.length);
            assert.equal('root_Error', eventArgs[0].name);
            assert.equal(1, eventArgs[0].status);
            assert.ok(eventArgs[0].data['warn-test-default']);
            assert.equal('Warn', eventArgs[0].type);
            assert.equal('E', eventArgs[0].messageClass);

            loggerT.warn('warn-test-custom', error);
            setTimeout(function () {
                assert.equal(2, eventArgs.length);
                assert.equal('root_Error', eventArgs[1].name);
                assert.equal(1, eventArgs[1].status);
                assert.ok(eventArgs[1].data['warn-test-custom']);
                assert.equal('MyType', eventArgs[1].type);
                assert.equal('E', eventArgs[1].messageClass);

                loggerT.error('error-test-custom', error);
                setTimeout(function () {
                    assert.equal(3, eventArgs.length);
                    assert.equal('root_Error', eventArgs[2].name);
                    assert.equal(1, eventArgs[2].status);
                    assert.ok(eventArgs[2].data['error-test-custom']);
                    assert.equal('MyType', eventArgs[2].type);
                    assert.equal('E', eventArgs[2].messageClass);
                    next();
                }, 100);
            }, 100);
        }, 100);
    });

    it('default logger should log transaction', function (next) {
        var logger = logging.logger();
        logger.begin('URL', 'getItems', function (tx) {

            setTimeout(function () {
                tx._ref.on('complete', function () {
                    setTimeout(function () {
                        // console.log(eventArgs);
                        assert.equal(1, eventArgs.length);
                        assert.equal('root', eventArgs[0].logger);
                        assert.equal(0, eventArgs[0].status);
                        assert.equal('getItems', eventArgs[0].name);
                        assert.equal('URL', eventArgs[0].type);
                        assert.equal('A', eventArgs[0].messageClass);
                        assert.ok(eventArgs[0].duration >= 200);
                        next();
                    }, 100);
                });
                tx.end();
            }, 200);
        });

    });

    it('should not include event into a transaction scope that happened after the transaction is closed', function (next) {
        var logger = logging.logger();
        logger.begin('URL', 'Some.TX', function (tx) {
            tx._ref.on('complete', function () {
                setTimeout(function() {
                    assert.equal(4, eventArgs.length);
                    assert.equal('URL', eventArgs[0].type);
                    assert.equal('t', eventArgs[0].messageClass);
                    assert.equal('Some.TX', eventArgs[1].type);
                    assert.equal('E', eventArgs[1].messageClass);
                    assert.deepEqual(['foo'], eventArgs[1].data.msg);
                    assert.equal('URL', eventArgs[2].type);
                    assert.equal('T', eventArgs[2].messageClass);
                    assert.equal('Some.TX', eventArgs[3].type);
                    assert.equal('E', eventArgs[3].messageClass);
                    assert.deepEqual(['bar'], eventArgs[3].data.msg);
                    next();
                }, 100);
            });
            logger.warn('foo');
            tx.end();
            logger.warn('bar');
        });


    });

    it('default logger should log transaction with nested events', function (next) {
        var logger = logging.logger();
        logger.begin('URL', 'getItems', function (tx) {

            logger.warn('warn-test', 'warning message');

            setTimeout(function () {
                tx._ref.on('complete', function () {
                    setTimeout(function () {
                        // check tx start
                        assert.equal('root', eventArgs[0].logger);
                        assert.equal(0, eventArgs[0].status);
                        assert.equal('getItems', eventArgs[0].name);
                        assert.equal('URL', eventArgs[0].type);
                        assert.equal('t', eventArgs[0].messageClass);

                        // check event
                        assert.equal(3, eventArgs.length);
                        assert.equal('root', eventArgs[1].logger);
                        assert.equal(0, eventArgs[1].status);
                        assert.equal('warn-test warning message', eventArgs[1].data.msg || eventArgs[1].data);
                        assert.equal('getItems', eventArgs[1].type);
                        assert.equal(1, eventArgs[1].parentEventId);
                        assert.equal(2, eventArgs[1].eventId);
                        assert.equal('E', eventArgs[1].messageClass);

                        // check tx end
                        assert.equal('root', eventArgs[2].logger);
                        assert.equal(0, eventArgs[2].status);
                        assert.equal('getItems', eventArgs[2].name);
                        assert.equal('URL', eventArgs[2].type);
                        assert.equal('T', eventArgs[2].messageClass);
                        assert.ok(eventArgs[2].duration >= 200);
                        next();
                    }, 200);
                });
                tx.end();
            }, 200);
        });

    });

    it('default logger should log transaction with nested events and transaction', function (next) {
        logging.configure({
            loglevel: {
                info: '*'
            }
        });

        generateTx(function () {
            assert.equal(9, eventArgs.length);
            // check tx start
            assert.equal('dlogger', eventArgs[0].logger);
            assert.equal(0, eventArgs[0].status);
            assert.equal('getItems', eventArgs[0].name);
            assert.equal('URL', eventArgs[0].type);
            assert.equal('t', eventArgs[0].messageClass);

            // check event
            assert.equal('dlogger', eventArgs[1].name);
            assert.equal(0, eventArgs[1].status);
            assert.equal('warn-test warning message', eventArgs[1].data.msg || eventArgs[1].data);
            assert.equal('getItems', eventArgs[1].type);
            assert.equal(1, eventArgs[1].parentEventId);
            assert.equal(2, eventArgs[1].eventId);
            assert.equal('E', eventArgs[1].messageClass);

            // should generate complex event name
            assert.equal('getItems_Error', eventArgs[2].name);
            assert.equal('TxName_ETIMEOUT', eventArgs[5].name);

            // nested tx
            assert.equal('dlogger', eventArgs[3].logger);
            assert.equal(0, eventArgs[3].status);
            assert.equal('TxName', eventArgs[3].name);
            assert.equal('TxType', eventArgs[3].type);
            assert.equal('t', eventArgs[3].messageClass);
            // nested tx warning
            assert.equal('TxName_404', eventArgs[4].name);
            assert.equal(404, eventArgs[4].status);
            assert.ok(eventArgs[4].data['tx-warn-test tx warning message']);
            assert.equal('Warn', eventArgs[4].type);
            assert.equal(4, eventArgs[4].parentEventId);
            assert.equal(5, eventArgs[4].eventId);
            assert.equal('E', eventArgs[4].messageClass);

            assert.equal('SomeData', eventArgs[7].data.TestAddData);

            // check tx end
            assert.equal('dlogger', eventArgs[8].logger);
            assert.equal(0, eventArgs[8].status);
            assert.equal('getItems', eventArgs[8].name);
            assert.equal('URL', eventArgs[8].type);
            assert.equal('T', eventArgs[8].messageClass);
            assert.ok(eventArgs[8].duration >= 200);

            next();
        });
    });

    it('Should profile sync object method with info level', function (next) {
        logging.configure({
            loglevel: {
                info: 'profiler'
            }
        });

        var obj = {
            loop: function loop() {
                var a = 0;
                for (var i = 0; i < 1000000000; i++) {
                    a += i; // some dummy op
                }
            }
        };

        var logger = logging.logger('profiler');
        logger.profile(obj, 'loop');

        obj.loop();
        // capture CAL event
        setTimeout(function () {
            // validate
            try {
                assert.equal(1, eventArgs.length);
                assert.equal('profile', eventArgs[0].type);
                assert.equal('loop', eventArgs[0].name);
                assert.ok(eventArgs[0].duration > 0);
                next();
            } catch (err) {
                next(err);
            }
        }, 200);
    });

    it('Should profile async object method with info level', function (next) {
        logging.configure({
            loglevel: {
                info: 'profiler'
            }
        });

        var obj = {
            loop: function loop(cb) {
                setImmediate(function () {
                    var a = 0;
                    for (var i = 0; i < 1000000000; i++) {
                        a += i; // some dummy op
                    }
                    cb();
                });
            }
        };

        var logger = logging.logger('profiler');
        logger.profile(obj, 'loop');

        obj.loop(function () {
            // capture CAL event
            setTimeout(function () {
                // validate
                try {
                    assert.equal(1, eventArgs.length);
                    assert.equal('profile', eventArgs[0].type);
                    assert.equal('loop', eventArgs[0].name);
                    assert.ok(eventArgs[0].duration > 0);
                    next();
                } catch (err) {
                    next(err);
                }
            }, 200);
        });

    });

});

function generateTx(next) {
    var logger = logging.logger('dlogger');
    logger.begin('URL', 'getItems', function (tx) {

        logger.warn('warn-test', 'warning message');

        setTimeout(function () {
            logger.error(new Error('Test error'));
        }, 40);

        setTimeout(function () {
            logger.begin('TxType', 'TxName', function (tx) {
                var err = new Error('Warn error with status');
                err.statusCode = 404;
                logger.warn('tx-warn-test', 'tx warning message', err);
                err = new Error('Tx test error');
                err.code = 'ETIMEOUT';
                logger.error('tx-error-test', err);

                tx.addData('TestAddData', 'SomeData');

                setTimeout(function () {
                    tx.fail(new Error('TX test erro fail'));
                }, 40);
            });
        }, 100);

        setTimeout(function () {
            tx._ref.on('complete', function () {
                setTimeout(next, 100);
            });
            tx.end();
        }, 200);
    });
    return logger;
}

function validate(logger, levels) {
    logger.debug('test');
    assert.equal(levels.debug, logger._loglevels.debug);
    assert.equal(levels.info, logger._loglevels.info);
    assert.equal(levels.warn, logger._loglevels.warn);
    assert.equal(levels.error, logger._loglevels.error);
    assert.equal(levels.fatal, logger._loglevels.fatal);
    assert.equal(levels.transaction, logger._loglevels.transaction);
}

function validateErrorLogger(logger) {
    logger.debug('test');
    assert.ok(!logger._loglevels.debug);
    assert.ok(!logger._loglevels.info);
    assert.ok(!logger._loglevels.warn);
    assert.ok(!logger._loglevels.transaction);
    assert.ok(logger._loglevels.error);
    assert.ok(logger._loglevels.fatal);
}

function validateFatalLogger(logger) {
    logger.debug('test');
    assert.ok(!logger._loglevels.debug);
    assert.ok(!logger._loglevels.info);
    assert.ok(!logger._loglevels.warn);
    assert.ok(!logger._loglevels.error);
    assert.ok(logger.fatal);
}

function validateDisabledLogger(logger) {
    logger.debug('test');
    assert.ok(!logger._loglevels.debug);
    assert.ok(!logger._loglevels.info);
    assert.ok(!logger._loglevels.warn);
    assert.ok(!logger._loglevels.error);
    assert.ok(!logger._loglevels.fatal);
}
