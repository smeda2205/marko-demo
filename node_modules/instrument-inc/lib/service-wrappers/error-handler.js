'use strict';

var debug = require('debug')('instrument-inc:error-handler');

var asyncwrap = require('../asyncwrap').wrapFunc;

module.exports = function errorHandler(transport, manager) {

    return asyncwrap(transport, function before(options, next) {

        if (!this.inited) {
            this.clientId = options.clientId;
            this['markdown-threshold'] = options['markdown-threshold'] || 10000;
            this.inited = true;
            this.errorCount = 0;
            this['error-handler'] = options['error-handler'] || {};
        }

        debug('service options', options);

        // handle markdown case
        var isMarkedDown = manager.isMarkdown(this.clientId);
        if (isMarkedDown) {
            var err = new Error('Service ' + this.clientId + ' is already marked down');
            err.code = 'AlreadyMarkedDown';
            return next(err);
        }

        next(null, options);

    }, function after(err, response, next) {

        var args = Array.prototype.slice.call(arguments);
        next = args.pop();
        err = args.shift();
        response = args.shift();
        if (!err && !isSuccessCode(this, response.statusCode) && response.statusCode >= 400) {
            if (Buffer.isBuffer(response.body)) {
                // convert error to string
                response.body = response.body.toString('utf-8');
            }
            err = new Error('HTTP ' + response.statusCode + ', response: ' +
                (typeof response.body === 'object' ? JSON.stringify(response.body) : response.body));
            err.statusCode = response.statusCode;
        }

        // adjust error
        if (err && err.code === 'ECONNRESET') {
            err.code = 'ETIMEDOUT';
        }

        if (err) {
            this.errorCount++;
            err.errorCount = this.errorCount;
            manager.handleErr(this.clientId, err,
                'Failed to invoke experience service, client: ' + this.clientId);
        }
        else {
            response.errorCount = this.errorCount;
            manager.registerSuccess(this.clientId);
        }

        next(err, response);

    });
};

function isSuccessCode(statusList, statusCode) {
    if(statusCode){
        var successCodes = (statusList['error-handler'] && statusList['error-handler']['success-codes']) || [];
        return successCodes.indexOf(statusCode) > -1 || successCodes.indexOf(statusCode.toString()) > -1;
    } else {
        return false;
    }
}
