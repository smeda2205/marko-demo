'use strict';

var assert = require('assert');
var querystring = require('querystring');

var urlUtils = require('url');
var util = require('util');
var cal = require('cal');
var logger = require('logging-inc').logger('instrument-inc/service-wrappers/cal');
var asyncwrap = require('../asyncwrap').wrapFunc;

module.exports = function _cal(transport) {

    return asyncwrap(transport, function before(options, next) {

        this.clientId = options.clientId;
        assert.ok(this.clientId, 'client id is missing');
        var self = this;

        logger.begin('Service', this.clientId + (options.operation ? '.'+options.operation : ''), function (tx) {
            // preserve tx till the end in context
            self.tx = tx;

            var url = util.format('%s%s%s%s',
                urlUtils.format(options),
                options.basepath || '',
                options.path || '',
                options.qs ?
                    '?'+(typeof options.qs === 'string' ? options.qs : querystring.stringify(options.qs)) :
                    '');
            cal.createEvent(self.clientId, 'RequestURL').addData(url).complete();

            next(null, options);
        });

    }, function after(err, response, next) {

        var args = Array.prototype.slice.call(arguments);
        next = args.pop();
        err = args.shift();
        response = args.shift();

        response && response.headers && cal.createEvent(this.clientId, 'ResponseHeaders')
            .addData(util.format('%j', response.headers)).complete();
        response && response.statusCode && cal.createEvent(this.clientId, 'HttpStatus')
            .addData(response.statusCode).complete();

        if (err) {
            this.tx.fail(err && err.message || 'Unknown error',
                    err, 1, {Errors: err.errorCount || 0});
        }
        else {
            this.tx.addData({Errors: response.errorCount || 0});
            this.tx.end();
        }
        next(err, response);
    });

};
