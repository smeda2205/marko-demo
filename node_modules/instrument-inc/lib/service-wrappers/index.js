'use strict';

var logger = require('logging-inc').logger('instrument-inc/service-wrappers');
var defaultWrappers = ['error-handler', 'retry', 'config-bean', 'cal'];
var MetricsServices = require('metrics-ebay/services');

var monitors = {};

var registered = defaultWrappers.reduce(function (memo, name) {
    memo[name] = require('./'+name);
    return memo;
}, {});

module.exports = function wrap(transport, manager, wrappers) {
    var _ctx = {};
    wrappers = wrappers || defaultWrappers;
    var startTransport = wrappers.reduce(function reduce(wrapped, name) {
        var wrap = registered[name];
        if (!wrap) {
            logger.error('Wrapper %s is not found', name);
            return wrapped;
        }

        return wrap(wrapped, manager).bind({
            // we need this context to allow instruments updating metrics
            ctx: function ctx() {
                return _ctx;
            }
        });
    }, function beforeFinalTransport(options, callback) {
        // start metrics
        var updateMetrics = _ctx.metrics.start();
        transport(options, function afterFinalTransport(err, response) {
            // update metrics
            updateMetrics(err, response);
            // continue with result
            setImmediate(function() { callback(err, response); });
        });
    });

    return function start(options, callback) {
        // we need this context to allow instruments updating metrics
        // this is temporary till instruments are refactored into handlers pipeline
        // lazy context init

        _ctx = {
            metrics: MetricsServices.getOrCreateMonitor({
                clientId: 'REST',
                service: options.clientId,
                operation: options.operation ||
                    (options.basepath ? options.basepath.replace(/(^\/|\/$)/g, '').replace(/\//g, '.') : options.method) ||
                    'unknown'
            })
        };
        // start first wrapper
        startTransport(options, callback);
    };
};

module.exports.register = function register(name, wrapper) {
    registered[name] = wrapper;
};
