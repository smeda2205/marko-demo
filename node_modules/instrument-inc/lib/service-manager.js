'use strict';

var logger = require('logging-inc').logger('instrument-inc/service-manager');

var wrap = require('./service-wrappers');

var ServiceManager = module.exports.ServiceManager = function ServiceManager(moduleName, moduleRef) {
    this.moduleName = moduleName;
    this.moduleRef = moduleRef;
    this.PREFIX = 'nodejs.config.'+this.moduleName+'.';
    this.timeoutEvents = {};
    this.clientState = {};
    this.lastMarkdownEvent = {};
};

var proto = ServiceManager.prototype;

proto.addClientState = function addClientState(id, clientState) {
    this.clientState[id] = clientState;
};

proto.getClientState = function getClientState(id) {
    return this.clientState[id];
};

proto.isMarkdown = function isMarkdown(id) {
    var clientState = this.clientState[id];
    if (clientState) {

        var state = /MARK_DOWN$/.test(clientState.get('SVC_CHANNEL_STATUS'));
        if (state) {
            this.lastMarkdownEvent[id] = this.lastMarkdownEvent[id] || Date.now();
            if (Date.now() - this.lastMarkdownEvent[id] > (clientState.get('auto-markup-timeout') || 5000)) {
                // try markup
                this.lastMarkdownEvent[id] = Date.now();
                return false;
            }
            return true;
        }
    }
    else {
        logger.error(new Error('Cannot find clientState object ' + id));
    }
};

proto.autoMarkdown = function autoMarkdown(id) {
    if (this.isMarkdown(id)) {
        return;
    }

    var clientState = this.clientState[id];
    if (clientState) {
        var state = clientState.get('SVC_CHANNEL_STATUS');
        if (state !== 'APP_AUTO_MARK_DOWN' || state === 'MARK_UP') {
            clientState.set('SVC_CHANNEL_STATUS', 'APP_AUTO_MARK_DOWN');
        }
        else {
            logger.error('Cannot auto markdown as the current state is ', clientState.get('SVC_CHANNEL_STATUS'));
        }
    }
    else {
        logger.error(new Error('Cannot find clientState object ' + id));
    }
};

proto.autoMarkup = function markup(id) {
    var clientState = this.clientState[id];
    if (clientState) {
        if (clientState.get('SVC_CHANNEL_STATUS') === 'APP_AUTO_MARK_DOWN') {
            clientState.set('SVC_CHANNEL_STATUS', 'MARK_UP');
            // clean up markdown tracking
            delete this.lastMarkdownEvent[id];
        }
        else {
            logger.error('Cannot auto markup as the current state is ', clientState.get('SVC_CHANNEL_STATUS'));
        }
    }
    else {
        logger.error(new Error('Cannot find clientState object ' + id));
    }
};

proto.handleErr = function handleErr(id, err) {
    if (err && err.code === 'ETIMEDOUT') {
        var clientState = this.clientState[id];
        if (clientState) {

            this.timeoutEvents[id] = this.timeoutEvents[id] === undefined ? 1 : this.timeoutEvents[id]+1;
            if (this.timeoutEvents[id] > (clientState.get('markdown-threshold') || 10)) {
                logger.error('Marked down experience service client %s', id, err);
                clientState.set('SVC_CHANNEL_STATUS', 'APP_AUTO_MARK_DOWN');
                return;
            }
        }
        else {
            logger.error('Cannot find clientState object ' + id + ', tried to handle timeout: ', err);
        }

    }
};

proto._isMarkdown = function _isMarkdown(id) {
    var clientState = this.clientState[id];
    if (clientState) {
        return /MARK_DOWN$/.test(clientState.get('SVC_CHANNEL_STATUS'));
    }
    else {
        logger.error(new Error('Cannot find clientState object ' + id));
    }
};

proto.registerSuccess = function registerSuccess(id) {
    if (this._isMarkdown(id)) {
        this.autoMarkup(id);
    }
    delete this.timeoutEvents[id];
};

proto.instrument = function instrument(transport, wrappers) {
    if (!transport.__original) {
        var wrapped = wrap(transport, this, wrappers);
        wrapped.__original = transport;
        return wrapped;
    }
    return transport;
};
