'use strict';

var assert = require('assert');
var pathUtil = require('path');

var async = require('async');
var objutil = require('objutil');

var utils = require('./fixtures/utils');

var ServiceManager = require('../lib/service-manager').ServiceManager;
var CALEventCatcher = require('./fixtures/cal-catcher');

var id = 'test-service-manager';

describe(__filename, function () {
    before(function (done) {
        process.env.TEST_ROOT = require('path').join(__dirname, 'fixtures/project');
        utils.cleanup(done);
    });

    after(function () {
        delete process.env.TEST_ROOT;
    });

    it('should init manager', function () {
        var manager = new ServiceManager('module-name', 'module-path');
        assert.equal('module-name', manager.moduleName);
        assert.equal('module-path', manager.moduleRef);
        assert.equal('nodejs.config.module-name.', manager.PREFIX);
    });

    it('should handle markdown and markup', function () {
        var manager = new ServiceManager('module-name', 'module-path');
        assert.equal('module-name', manager.moduleName);
        assert.equal('module-path', manager.moduleRef);
        assert.equal('nodejs.config.module-name.', manager.PREFIX);

        assert.ok(!manager.isMarkdown());
        assert.ok(!manager.isMarkdown(id));

        var state = {
            get: function get(name) {
                return this.state && this.state[name];
            },
            set: function set(name, value) {
                this.state = this.state || {};
                this.state[name] = value;
            }
        };

        manager.addClientState(id, state);

        var id2 = id+'-x';
        manager.addClientState(id2, {
            get: function get(name) {
                return this.state && this.state[name];
            },
            set: function set(name, value) {
                this.state = this.state || {};
                this.state[name] = value;
            }
        });

        assert.ok(!manager.isMarkdown(id));
        assert.ok(!manager.isMarkdown(id2));

        state.set('SVC_CHANNEL_STATUS', 'APP_AUTO_MARK_DOWN');
        assert.ok(manager.isMarkdown(id));
        assert.ok(!manager.isMarkdown(id2));

        state.set('SVC_CHANNEL_STATUS', 'MARK_DOWN');
        assert.ok(manager.isMarkdown(id));
        assert.ok(!manager.isMarkdown(id2));

        state.set('SVC_CHANNEL_STATUS', 'MARK_UP');
        assert.ok(!manager.isMarkdown(id));
        assert.ok(!manager.isMarkdown(id2));

        manager.autoMarkdown('wrong-id');

        manager.autoMarkdown(id);
        assert.ok(manager.isMarkdown(id));
        assert.ok(!manager.isMarkdown(id2));

        manager.autoMarkup('wrong id');
        manager.autoMarkup(id);
        assert.ok(!manager.isMarkdown(id));
        assert.ok(!manager.isMarkdown(id2));

        manager.autoMarkdown(id2);
        assert.ok(manager.isMarkdown(id2));

        manager.autoMarkup(id2);
        assert.ok(!manager.isMarkdown(id2));

    });

    it('should handle auto markup', function (done) {
        var manager = new ServiceManager('module-name', 'module-path');
        assert.equal('module-name', manager.moduleName);
        assert.equal('module-path', manager.moduleRef);
        assert.equal('nodejs.config.module-name.', manager.PREFIX);

        assert.ok(!manager.isMarkdown());
        assert.ok(!manager.isMarkdown(id));

        var state = {
            get: function get(name) {
                return this.state && this.state[name];
            },
            set: function set(name, value) {
                this.state = this.state || {};
                this.state[name] = value;
            }
        };

        manager.addClientState(id, state);

        assert.ok(!manager.isMarkdown(id));

        state.set('SVC_CHANNEL_STATUS', 'APP_AUTO_MARK_DOWN');
        assert.ok(manager.isMarkdown(id));

        async.series([
            function shouldStillBeMarkedDown(next) {
                assert.ok(manager.isMarkdown(id));
                next();
            },
            function delay(next) {
                setTimeout(next, 100);
            },
            function shouldStillBeMarkedDown(next) {
                assert.ok(manager.isMarkdown(id));
                next();
            },
            function delay(next) {
                state.set('auto-markup-timeout', 1);
                setTimeout(next, 10);
            },
            function shouldMarkup(next) {
                assert.ok(!manager.isMarkdown(id));
                next();
            }
        ], done);

    });

    it('should handle error', function (done) {
        var manager = new ServiceManager('module-name', 'module-path');
        assert.equal('module-name', manager.moduleName);
        assert.equal('module-path', manager.moduleRef);
        assert.equal('nodejs.config.module-name.', manager.PREFIX);

        assert.ok(!manager.isMarkdown());
        assert.ok(!manager.isMarkdown(id));

        var state = {
            get: function get(name) {
                return this.state && this.state[name];
            },
            set: function set(name, value) {
                this.state = this.state || {};
                this.state[name] = value;
            }
        };

        manager.addClientState(id, state);

        assert.ok(!manager.isMarkdown(id));

        async.series([
            function shouldHandleNoError(next) {
                manager.handleErr(id, undefined);
                manager.handleErr(id, null);
                manager.handleErr(id);
                assert.ok(!manager.isMarkdown(id));
                next();
            },
            function shouldHandleSimpleError(next) {
                manager.handleErr(id, new Error('Simple error'));
                assert.ok(!manager.isMarkdown(id));
                next();
            },
            function shouldHandleTimeoutError(next) {
                assert.equal(undefined, manager.timeoutEvents[id]);

                var err = new Error('Timeout error');
                err.code = 'ETIMEDOUT';
                manager.handleErr(id, err);
                assert.ok(!manager.isMarkdown(id));
                assert.equal(1, manager.timeoutEvents[id]);

                next();
            },
            function shouldMarkdownAfterDefaultLimit10(next) {
                var err = new Error('Timeout error');
                err.code = 'ETIMEDOUT';
                for (var i = 0; i < 10; i++) {
                    assert.ok(!manager.isMarkdown(id));
                    manager.handleErr(id, err);
                    assert.equal(i + 2, manager.timeoutEvents[id]);
                }
                assert.ok(manager.isMarkdown(id));
                next();
            },
            function shouldSetAutoMarkUp(next) {
                state.set('auto-markup-timeout', 3);
                setTimeout(next, 10);
            },
            function shouldAutoMarkUpForOneRequest(next) {
                assert.ok(!manager.isMarkdown(id));
                manager.handleErr(id);
                assert.equal(11, manager.timeoutEvents[id]);
                manager.registerSuccess(id);
                assert.equal(undefined, manager.timeoutEvents[id]);
                assert.ok(!manager.isMarkdown(id));
                next();
            },
            function shouldMarkdownAfterCustomLimit(next) {
                state.set('markdown-threshold', 3);
                assert.ok(!manager.isMarkdown(id));
                var err = new Error('Timeout error');
                err.code = 'ETIMEDOUT';
                for (var i = 0; i < 4; i++) {
                    assert.ok(!manager.isMarkdown(id));
                    manager.handleErr(id, err);
                }
                assert.ok(manager.isMarkdown(id));
                assert.equal(4, manager.timeoutEvents[id]);
                next();
            },
            function shouldAutoMarkupAgain(next) {
                assert.ok(manager.isMarkdown(id));
                manager.handleErr(id);
                assert.equal(4, manager.timeoutEvents[id]);
                manager.registerSuccess(id);
                assert.equal(undefined, manager.timeoutEvents[id]);
                assert.ok(!manager.isMarkdown(id));
                next();
            },
            function shouldClearErrorCountWhenSuccessRegistered(next) {
                state.set('markdown-threshold', 3);
                assert.ok(!manager.isMarkdown(id));
                var err = new Error('Timeout error');
                err.code = 'ETIMEDOUT';

                manager.handleErr(id, err);
                manager.handleErr(id, err);
                assert.equal(2, manager.timeoutEvents[id]);
                manager.registerSuccess(id);
                assert.equal(undefined, manager.timeoutEvents[id]);

                assert.ok(!manager.isMarkdown(id));
                next();
            }
        ], done);

    });

    it('should instrument transport and execute ok', function (done) {
        var id = 'test-manager-integration';
        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var counter = 0;
        function transport(options, callback) {
            counter++;
            // var err = new Error('Test error');
            // err.code = 'ETIMEDOUT';
            setImmediate(callback.bind(null, null, objutil.mixin(options, {
                headers: {
                    A: 'B'
                },
                statusCode: 304
            }, {})));
        }

        // instrument with defaullt wrappers
        var wrapped = manager.instrument(transport);
        assert.ok(wrapped.__original);
        assert.equal(wrapped, manager.instrument(wrapped));

        var calCatcher = new CALEventCatcher(function (evt) { return evt.messageClass !== 'H' && evt; });
        // execute
        wrapped({
            clientId: id,
            protocol: 'http:',
            hostname: 'globalheader.vip.qa.ebay.com',
            basepath: '/header/json',
            headers: {
                foo: 'bar'
            }
        }, function (err, result) {

            assert.ok(!err);
            // assert.equal('ETIMEDOUT', err.code);
            setTimeout(function () {
                var events = calCatcher.events;
                assert.equal(5, events.length);
                assert.equal('Service', events[0].type);
                assert.equal('test-manager-integration', events[0].name);

                assert.equal('test-manager-integration', events[1].type);

                assert.equal('test-manager-integration', events[2].type);
                assert.equal('RequestURL', events[1].name);
                assert.equal('http://globalheader.vip.qa.ebay.com/header/json', events[1].data.msg);

                assert.equal('test-manager-integration', events[2].type);
                assert.equal('ResponseHeaders', events[2].name);
                assert.deepEqual(['{\"A\":\"B\"}'], events[2].data.msg);

                assert.equal('test-manager-integration', events[3].type);
                assert.equal('HttpStatus', events[3].name);
                assert.equal(304, events[3].data.msg);

                assert.ok(result);
                assert.ok(result.clientId);
                done();
            }, 300);
        });

    });

    it('should instrument transport and execute with timeout, no retry', function (done) {
        var id = 'test-manager-integration-timeout';
        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var counter = 0;
        function transport(options, callback) {
            counter++;
            var err = new Error('Test error');
            err.code = 'ETIMEDOUT';
            setImmediate(callback.bind(null, err, options));
        }

        // instrument with defaullt wrappers
        var wrapped = manager.instrument(transport);
        assert.ok(wrapped.__original);


        var calCatcher = new CALEventCatcher(function (evt) {
            return evt.messageClass !== 'H' && evt || undefined;
        });
        // execute
        wrapped({
            clientId: id
        }, function (err) {
            assert.ok(err);
            assert.equal('ETIMEDOUT', err.code);
            assert.equal(1, counter);
            setTimeout(function () {
                assert.equal(4, calCatcher.events.length);
                done();
            }, 100);
        });

    });

    it('should instrument transport and execute with timeout, 2 retry, threshold, success markup', function (done) {
        var id = 'test-manager-integration-timeout2';
        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var triggerTimeout = true;
        var counter = 0;
        function transport(options, callback) {
            counter++;
            if (triggerTimeout) {
                var err = new Error('Test error');
                err.code = 'ETIMEDOUT';
                setImmediate(callback.bind(null, err, options));
            }
            else {
                setImmediate(callback.bind(null, null, options));
            }
        }

        // instrument with defaullt wrappers
        var wrapped = manager.instrument(transport);
        var wrapped2 = manager.instrument(transport);
        var wrapped3 = manager.instrument(transport);
        assert.ok(wrapped.__original);

        // execute
        var options = {
            clientId: id
        };

        async.series([
            function shouldEndWithTimeoutAnd1Retry(next) {

                wrapped(objutil.mixin(options, {}), function (err) {
                    assert.ok(err);
                    assert.equal('ETIMEDOUT', err.code);
                    assert.equal(3, counter);
                    next();
                });

            },
            function shouldMarkdown(next) {

                wrapped2(objutil.mixin(options, {}), function (err) {
                    assert.ok(err);
                    assert.equal('APP_AUTO_MARK_DOWN', err.code);
                    assert.equal(5, counter);
                    next();
                });

            },
            function shouldAlreadyBeMarkedDown(next) {

                wrapped2(objutil.mixin(options, {}), function (err) {
                    assert.ok(err);
                    assert.equal('AlreadyMarkedDown', err.code);
                    assert.equal(5, counter);
                    next();
                });

            },
            function delay(next) {
                setTimeout(next, 400);
            },
            function shouldMarkup(next) {
                triggerTimeout = false;
                wrapped3(objutil.mixin(options, {}), function (err, result) {
                    assert.ok(!err, err && err.stack);
                    assert.ok(result);
                    assert.equal(6, counter);
                    next();
                });

            }
        ], done);

    });


});
