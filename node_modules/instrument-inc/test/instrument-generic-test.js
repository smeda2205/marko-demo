'use strict';

var assert = require('assert');

var nock = require('nock');

var utils = require('./fixtures/utils');
var serviceDefault = require('./fixtures/project/services/service').DEFAULT;
var serviceCustom = require('./fixtures/project/services/service').CUSTOM;
var CALEventCatcher = require('./fixtures/cal-catcher');
var instrumentInc = require('../lib');

describe(__filename, function () {
    before(function (done) {
        process.env.TEST_ROOT = require('path').join(__dirname, 'fixtures/project');
        delete process.env.ENABLE_HTTPS;
        utils.cleanup(done);
    });

    after(function () {
        delete process.env.TEST_ROOT;
        delete process.env.ENABLE_HTTPS;
    });

    afterEach(function () {
        nock.cleanAll();
    });

    it('should instrument header service with default instruments', function (done) {

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceDefault.invoke(params, function result(err, data) {
            assert.ok(!err, err && err.stack);
            assert.ok(data);
            assert.ok(data.html);

            done();
        });
    });

    it('should instrument header service with custom list of instruments', function (done) {

        var customEvents = [];
        var wrappers = require('../wrappers');
        wrappers.register('my-instrument', function wrap(transport) {
            return wrappers.asyncwrap(transport, function before(options, next) {
                customEvents.push('my-instrument.before');
                next(null, options);
            }, function after(err, result, next) {
                customEvents.push('my-instrument.after');
                next(err, result);
            });
        });

        var events = [];
        new CALEventCatcher(function (evt) {
            evt.messageClass !== 'H' && events.push(evt.name);
        });

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceCustom.invoke(params, function result(err, data) {
            assert.ok(!err, err && err.stack);
            assert.ok(data);
            assert.ok(data.html);

            setTimeout(function () {
                assert.equal(5, events.length);
                assert.equal(2, customEvents.length);

                done();
            }, 100);
        });
    });

    it('should instrument header service with custom list of instruments and CALL_A debug', function (done) {

        var customEvents = [];
        var wrappers = require('../wrappers');
        wrappers.register('my-instrument', function wrap(transport) {
            return wrappers.asyncwrap(transport, function before(options, next) {
                options.debug = true;
                customEvents.push('my-instrument.before');
                next(null, options);
            }, function after(err, result, next) {
                customEvents.push('my-instrument.after');
                next(err, result);
            });
        });

        var events = [];
        new CALEventCatcher(function (evt) {
            evt.messageClass !== 'H' && events.push(evt.name);
        });

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceCustom.invoke(params, function result(err, data) {
            assert.ok(!err, err && err.stack);
            assert.ok(data);
            assert.ok(data.html);

            setTimeout(function () {
                assert.deepEqual([ 'my-service-custom',
                  'RequestURL',
                  'RequestHeaders',
                  'start',
                  'socket',
                  'response',
                  'end',
                  'ResponseHeaders',
                  'HttpStatus',
                  'my-service-custom' ], events.filter(function filter(evt) {
                      return evt !== 'lookup' && evt !== 'connect';
                  }));
                assert.equal(2, customEvents.length);

                done();
            }, 600);
        });
    });

    it('should instrument header service and fail with timeout', function (done) {

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceDefault.invoke(params, {
            socketTimeout: 1,
            retry: 0
        }, function result(err) {
            assert.ok(err);
            assert.equal('ETIMEDOUT', err.code);

            done();
        });
    });

    it('should instrument header service and retry and fail with timeout', function (done) {
        var events = [];
        new CALEventCatcher(function (evt) {
            evt.messageClass !== 'H' && events.push(evt.name);
        });

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceDefault.invoke(params, {
            socketTimeout: 1,
            retry: 1
        }, function result(err) {
            assert.ok(err);
            assert.equal('ETIMEDOUT', err.code);
            setTimeout(function () {
                assert.deepEqual([
                    'my-service-default',
                    'RequestURL',
                    'instrument-inc_service-wrappers_retry',
                    'my-service-default_ETIMEDOUT',
                    'my-service-default'], events);
                done();
            }, 600);
        });
    });

    it('should instrument header service and retry and fail with timeout and CALL_A', function (done) {
        var events = [];
        new CALEventCatcher(function (evt) {
            evt.messageClass !== 'H' && events.push(evt.name);
        });

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceDefault.invoke(params, {
            socketTimeout: 1,
            retry: 1,
            debug: true
        }, function result(err) {
            assert.ok(err);
            assert.equal('ETIMEDOUT', err.code);
            setTimeout(function () {
                console.log('*** Events: ', events);
                assert.deepEqual([
                    'my-service-default',
                    'RequestURL',
                    'RequestHeaders',
                    'start',
                    'socket',
                    'end',
                    'instrument-inc_service-wrappers_retry',
                    'RequestHeaders',
                    'start',
                    'socket',
                    'end',
                    'my-service-default_ETIMEDOUT',
                    'my-service-default'], events.filter(function filter(evt) {
                        return evt !== 'lookup' && evt !== 'connect';
                    }));
                done();
            }, 600);
        });
    });

    it('should instrument header service and fail with 404', function (done) {
        var endpoint = nock('http://globalheader.vip.qa.ebay.com:7777')
            .get('/header/json?app=RAPTOR&human=0&siteid=900&pageid=2058507&pool=qa.ebay.com&lang=es-CO&type=full&categoryid=0')
            .reply(404, 'This is http error');

        var events = [];
        new CALEventCatcher(function (evt) {
            evt.messageClass !== 'H' && events.push(evt.name);
        });

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceDefault.invoke(params, {
            socketTimeout: 1,
            retry: 1,
            port: 7777
        }, function result(err, response) {
            endpoint.done();
            assert.ok(err);
            assert.equal(404, err.statusCode);
            assert.ok(response);
            assert.equal('This is http error', response);
            setTimeout(function () {
                console.log(events);
                assert.deepEqual(['my-service-default',
                    'RequestURL',
                    'ResponseHeaders',
                    'HttpStatus',
                    'my-service-default_404',
                    'my-service-default'], events);
                done();
            }, 600);
        });
    });

    it('should instrument header service and 304 response', function (done) {
        var endpoint = nock('http://globalheader.vip.qa.ebay.com:7777')
            .get('/header/json?app=RAPTOR&human=0&siteid=900&pageid=2058507&pool=qa.ebay.com&lang=es-CO&type=full&categoryid=0')
            .reply(304);

        var events = [];
        new CALEventCatcher(function (evt) {
            evt.messageClass !== 'H' && events.push(evt.name);
        });

        var params = {
            app: 'RAPTOR',
            human: 0,
            siteid: 900,
            pageid: 2058507,
            pool: 'qa.ebay.com',
            lang: 'es-CO',
            type: 'full',
            categoryid: 0
        };

        serviceDefault.invoke(params, {
            socketTimeout: 1,
            retry: 1,
            port: 7777
        }, function result(err, response) {
            endpoint.done();
            assert.ok(instrumentInc.getServiceManager('instrument-inc'));
            assert.ok(!err);
            assert.ok(304, response.statusCode);
            setTimeout(function () {
                assert.deepEqual([
                    'my-service-default',
                    'RequestURL',
                    'ResponseHeaders',
                    'HttpStatus',
                    'my-service-default'], events);
                done();
            }, 600);
        });
    });
});
