'use strict';

var assert = require('assert');

var async = require('async');

var _wrap = require('../lib/service-wrappers/error-handler');
var wrap = function () {
    return _wrap.apply(null, arguments).bind({});
};

describe(__filename, function () {

    it('handle timeout error', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var err = new Error('Test error');
            err.code = 'ETIMEDOUT';
            setImmediate(callback.bind(null, err));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                state.checkMardownCounter++;
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId
        }, function (err) {
            assert.ok(err);
            assert.equal('ETIMEDOUT', err.code);
            assert.equal(1, transportCounter);
            assert.equal(1, state.checkMardownCounter);
            assert.equal(1, state.errors.length);
            assert.equal(0, state.successes);
            done();
        });
    });


    it('handle servicecore timeout error', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var err = new Error('Test error');
            err.code = 'ECONNRESET';
            setImmediate(callback.bind(null, err));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                state.checkMardownCounter++;
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId
        }, function (err) {
            assert.ok(err);
            assert.equal('ETIMEDOUT', err.code);
            assert.equal(1, transportCounter);
            assert.equal(1, state.checkMardownCounter);
            assert.equal(1, state.errors.length);
            assert.equal(0, state.successes);
            done();
        });
    });

    it('handle 2 retries and mark it down', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var err = new Error('Test error');
            err.code = 'ETIMEDOUT';
            setImmediate(callback.bind(null, err));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var manager = {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                state.checkMardownCounter++;
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
                if (err.code === 'ETIMEDOUT' && state.errors.length >= 2) {
                    state.service_state = 'APP_AUTO_MARK_DOWN';
                }
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        };

        var wrapped = wrap(transport, manager);
        var wrapped2 = wrap(transport, manager);

        async.series([
            function shouldTimeout(next) {
                wrapped({
                    clientId: clientId
                }, function (err) {
                    assert.equal('ETIMEDOUT', err.code);
                    assert.equal(1, state.checkMardownCounter);
                    assert.equal(1, transportCounter);
                    assert.equal('MARK_UP', state.service_state);
                    next();
                });
            },
            function shouldMarkdown(next) {
                wrapped({
                    clientId: clientId
                }, function (err) {
                    assert.equal('ETIMEDOUT', err.code);
                    assert.equal(2, state.checkMardownCounter);
                    assert.equal(2, transportCounter);
                    assert.equal('APP_AUTO_MARK_DOWN', state.service_state);
                    next();
                });
            },
            function (next) {
                wrapped({
                    clientId: clientId
                }, function (err) {
                    assert.equal('AlreadyMarkedDown', err.code);
                    assert.equal(3, state.checkMardownCounter);
                    assert.equal(2, transportCounter);
                    assert.equal('APP_AUTO_MARK_DOWN', state.service_state);
                    next();
                });
            },
            function (next) {
                wrapped2({
                    clientId: clientId
                }, function (err) {
                    assert.equal('AlreadyMarkedDown', err.code);
                    assert.equal(4, state.checkMardownCounter);
                    assert.equal(2, transportCounter);
                    next();
                });
            }
        ], done);
    });

    it('handle 2 retries and mark it down and success', function (done) {
        var triggerTimeout = true;
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var err;
            if (triggerTimeout) {
                err = new Error('Test error');
                err.code = 'ETIMEDOUT';
                setImmediate(callback.bind(null, err, options));
            }
            else {
                setImmediate(callback.bind(null, null, options));
            }
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var manager = {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                state.checkMardownCounter++;
                return state.service_state !== 'MARK_UP' && state.checkMardownCounter <= 3;
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
                if (err.code === 'ETIMEDOUT' && state.errors.length >= 2) {
                    state.service_state = 'APP_AUTO_MARK_DOWN';
                }
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
                state.service_state = 'MARK_UP';
            }
        };

        var wrapped = wrap(transport, manager);

        async.series([
            function (next) {
                wrapped({
                    clientId: clientId
                }, function shouldTimeout(err) {
                    assert.equal('ETIMEDOUT', err.code);
                    assert.equal(1, state.checkMardownCounter);
                    assert.equal(1, transportCounter);
                    assert.equal('MARK_UP', state.service_state);
                    next();
                });
            },
            function shouldMarkdown(next) {
                wrapped({
                    clientId: clientId
                }, function (err) {
                    assert.equal('ETIMEDOUT', err.code);
                    assert.equal(2, state.checkMardownCounter);
                    assert.equal(2, transportCounter);
                    assert.equal('APP_AUTO_MARK_DOWN', state.service_state);
                    next();
                });
            },
            function shouldAlreadyMarkdown(next) {
                wrapped({
                    clientId: clientId
                }, function (err) {
                    assert.equal('AlreadyMarkedDown', err.code);
                    assert.equal(3, state.checkMardownCounter);
                    assert.equal(2, transportCounter);
                    assert.equal('APP_AUTO_MARK_DOWN', state.service_state);
                    next();
                });
            },
            function shouldSucceed(next) {
                triggerTimeout = false;
                wrapped({
                    clientId: clientId
                }, function (err) {
                    assert.ok(!err);
                    assert.equal(4, state.checkMardownCounter);
                    assert.equal(3, transportCounter);
                    assert.equal('MARK_UP', state.service_state);
                    next();
                });
            }
        ], done);
    });

    it('handle 404 as success with error-handler params', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var res = {statusCode: 404};
            setImmediate(callback.bind(null, null, res));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId,
            "error-handler": {
                "success-codes": [
                    404
                ]
            }
        }, function (err, resp) {
            assert.ok(!err);
            assert.equal(1, transportCounter);
            assert.equal(0, state.checkMardownCounter);
            assert.equal(0, state.errors.length);
            assert.equal(1, state.successes);
            done();
        });
    });


    it('handle 404 as error without error-handler params', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var res = {statusCode: 404};
            setImmediate(callback.bind(null, null, res));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId
        }, function (err, resp) {
            assert.ok(err);
            assert.equal(1, transportCounter);
            assert.equal(0, state.checkMardownCounter);
            assert.equal(1, state.errors.length);
            assert.equal(0, state.successes);
            done();
        });
    });

    it('handle 400 as error with error-handler params', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var res = {statusCode: 400};
            setImmediate(callback.bind(null, null, res));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId,
            "error-handler": {
                "success-codes": [
                    404
                ]
            }
        }, function (err, resp) {
            assert.ok(err);
            assert.equal(1, transportCounter);
            assert.equal(0, state.checkMardownCounter);
            assert.equal(1, state.errors.length);
            assert.equal(0, state.successes);
            done();
        });
    });

    it('handle 200 as success with error-handler params', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var res = {statusCode: 200};
            setImmediate(callback.bind(null, null, res));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId,
            "error-handler": {
                "success-codes": [
                    404
                ]
            }
        }, function (err, resp) {
            assert.ok(!err);
            assert.equal(1, transportCounter);
            assert.equal(0, state.checkMardownCounter);
            assert.equal(0, state.errors.length);
            assert.equal(1, state.successes);
            done();
        });
    });

    it('handle 200 as success without error-handler params', function (done) {
        var transportCounter = 0;
        function transport(options, callback) {
            transportCounter++;
            var res = {statusCode: 200};
            setImmediate(callback.bind(null, null, res));
        }

        var clientId = 'test-client';
        var state = {
            id: clientId,
            service_state: 'MARK_UP',
            checkMardownCounter: 0,
            errors: [],
            successes: 0
        };

        var wrapped = wrap(transport, {
            isMarkdown: function checkMardown(id) {
                assert.equal(clientId, id);
                return state.service_state !== 'MARK_UP';
            },
            handleErr: function handleErr(id, err) {
                assert.equal(clientId, id);
                state.errors.push(err);
            },
            registerSuccess: function registerSuccess(id) {
                assert.equal(clientId, id);
                state.successes++;
            }
        });

        wrapped({
            clientId: clientId
        }, function (err, resp) {
            assert.ok(!err);
            assert.equal(1, transportCounter);
            assert.equal(0, state.checkMardownCounter);
            assert.equal(0, state.errors.length);
            assert.equal(1, state.successes);
            done();
        });
    });

});
