'use strict';

var utils = require('./fixtures/utils');
var async = require('async');
var asyncwrap = require('../lib/asyncwrap').wrapFunc;

var TIMES = 10000;

describe(__filename, function () {
    this.timeout(60000);

    before(function (done) {
        process.env.TEST_ROOT = require('path').join(__dirname, 'fixtures/project');
        utils.cleanup(done);        
    });

    after(function () {
        delete process.env.TEST_ROOT;
    });

    it('perf, default instrumentation, parallel', function (done) {

        var wrapped = wrap(transport);
        async.times(TIMES, function (n, next) {
            wrapped({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, default instrumentation, series', function (done) {

        var wrapped = wrap(transport);
        async.timesSeries(TIMES, function (n, next) {
            wrapped({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, no instrumentation, parallel', function (done) {

        async.times(TIMES, function (n, next) {
            transport({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, no instrumentation, series', function (done) {

        async.timesSeries(TIMES, function (n, next) {
            transport({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

});

function transport(options, callback) {
    options.transportCounter = options.transportCounter || 0;
    options.transportCounter++;
    setImmediate(callback.bind(null, null, options));
}

function wrap(transport) {
    return asyncwrap(transport, function before(options, next) {
        next(null, options);
    }, function after(err, result, next) {
        next(err, result);
    });
}
