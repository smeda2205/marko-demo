'use strict';

var objutil = require('objutil');
var modConfig = require('module-config-inc');
var servicecore = require('servicecore');
var instrumentTool = require('../../../../lib');

servicecore.register('my-service-default', function expservice(config, transport) {
    // instrumentation of the base transport here, only once
    transport = instrumentTool.instrument(transport);

    return {
        invoke: function invoke(params, options, callback) {
            var args = [].slice.call(arguments);
            params = args.shift();
            callback = args.pop();
            options = args.shift() || {};
            options = objutil.merge(options, config, {
                clientId: 'my-service-default',
                qs: params,
            }, {});
            transport(options, callback);
        }
    };
});

servicecore.register('my-service-custom', function expservice(config, transport) {
    // instrumentation of the base transport here, only once
    transport = instrumentTool.instrument(transport, config.instrument);

    return {
        invoke: function invoke(params, callback) {
            transport(objutil.merge(config, {
                clientId: 'my-service-custom',
                qs: params,
            }), callback);
        }
    };
});

module.exports = {
    DEFAULT: {
        invoke: function invoke(params, options, callback) {
            var args = Array.prototype.slice.call(arguments);
            callback = args.pop();
            params = args.shift();
            options = args.shift() || {};

            modConfig(module, function(err, config) {
                if (err) {
                    return callback(err);
                }
                options = objutil.mixin(config.get('services:my-service-default'), options, {});
                var service = servicecore.create('my-service-default',
                    options);
                service.invoke(params, function (err, res) {
                    callback(err, res && res.body);
                });
            });
        }
    },
    CUSTOM: {
        invoke: function invoke(params, callback) {
            modConfig(module, function(err, config) {
                if (err) {
                    return callback(err);
                }
                var service = servicecore.create('my-service-custom', config.get('services:my-service-custom'));
                service.invoke(params, function (err, res) {
                    callback(err, res && res.body);
                });
            });
        }

    }
};
