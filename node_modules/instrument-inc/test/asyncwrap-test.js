'use strict';

require('./fixtures/utils');
var wrapMethod = require('../lib/asyncwrap').wrap;
var wrapFunc = require('../lib/asyncwrap').wrapFunc;
var assert = require('assert');

describe(__filename + ', method wrap:', function () {
    it('should catch before', function (done) {
        var op = new Operation();

        wrapMethod(op, 'add', function (a, b, next) {
            next(null, a + 1, b + 1);
        });

        op.add(1, 2, function (err, result) {
            assert.ok(!err);
            assert.equal(5, result);
            done();
        });
    });

    it('should catch after', function (done) {
        var op = new Operation();

        wrapMethod(op, 'add', undefined, function (err, result, next) {
            next(err, result * 3);
        });

        op.add(1, 2, function (err, result) {
            assert.ok(!err);
            assert.equal(9, result);
            done();
        });

    });

    it('should catch after and generate error', function (done) {
        var op = new Operation();

        wrapMethod(op, 'add', undefined, function (err, result, next) {
            next(new Error('Test error'));
        });

        op.add(1, 2, function (err) {
            assert.ok(err);
            done();
        });

    });

    it('should instrument prototype', function (done) {
        var foo = new Foo('John');
        foo.greet('Hello', function (err, result) {
            assert.ok(!err);
            assert.equal('Hello> John.', result);
            done();
        });
    });
});

describe(__filename + ', func wrap:', function () {
    it('should catch before', function (done) {
        var op = wrapFunc(add, function (a, b, next) {
            next(null, a + 1, b + 1);
        });

        op(1, 2, function (err, result) {
            assert.ok(!err);
            assert.equal(5, result);
            done();
        });
    });

    it('should catch after', function (done) {
        var op = wrapFunc(add, undefined, function (err, result, next) {
            next(err, result * 3);
        });

        op(1, 2, function (err, result) {
            assert.ok(!err);
            assert.equal(9, result);
            done();
        });

    });

    it('should catch after and generate error', function (done) {
        var op = wrapFunc(add, undefined, function (err, result, next) {
            next(new Error('Test error'));
        });

        op(1, 2, function (err) {
            assert.ok(err);
            done();
        });

    });
});

function add(a, b, callback) {
    callback(null, a + b);
}

function Operation() {
}

Operation.prototype.add = function add(a, b, callback) {
    setImmediate(function () {
        callback(null, a + b);
    });
};

function Foo(name) {
    this.name = name;
}

Foo.prototype.greet = function add(greeting, callback) {
    var self = this;
    setImmediate(function () {
        callback(null, greeting + self.name);
    });
};

wrapMethod(Foo.prototype, 'greet', function before(greeting, next) {
    next(null, greeting + '> ');
}, function after(err, result, next) {
    next(err, result && (result + '.'));
});
