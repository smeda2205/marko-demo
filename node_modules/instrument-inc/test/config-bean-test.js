'use strict';

var pathUtil = require('path');
var assert = require('assert');

var async = require('async');

var utils = require('./fixtures/utils');
var wrap = require('../lib/service-wrappers/config-bean');
var ServiceManager = require('../lib/service-manager').ServiceManager;

var EXPECTED_HOST = 'localhost'; // override in RaptorConfig

describe(__filename, function () {

    before(function (done) {
        process.env.TEST_ROOT = require('path').join(__dirname, 'fixtures/project');
        utils.cleanup(done);
    });

    after(function () {
        delete process.env.TEST_ROOT;
    });

    it('should define config bean from service config', function (done) {
        this.timeout(3000);
        var id = 'test-config-bean3';

        function transport(options, callback) {
            setImmediate(callback.bind(null, null, options));
        }

        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var wrapped = wrap(transport, manager);

        function validate (next) {
            wrapped({
                name: 'John',
                clientId: id
            }, function cb(err, options) {

                assert.ok(!err);

                assert.ok(!manager.isMarkdown(id));
                var bean = manager.getClientState(id).bean;
                assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));

                assert.equal('false', '' + bean.get('debug'));
                assert.equal(EXPECTED_HOST, bean.get('hostname'));
                assert.equal(false, options.dnslookup);
                assert.equal(2000, options.socketTimeout);
                assert.equal(5000, options.maxKeepAliveTime);
                assert.equal(5000, options['auto-markup-timeout']);
                assert.equal(10, options['markdown-threshold']);
                assert.equal(EXPECTED_HOST, options.hostname);
                assert.equal('http:', options.protocol);

                // mark it down
                manager.autoMarkdown(id);
                assert.equal('APP_AUTO_MARK_DOWN', bean.get('SVC_CHANNEL_STATUS'));
                assert.ok(manager.isMarkdown(id));

                manager.autoMarkup(id);
                assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));
                assert.ok(!manager.isMarkdown(id));

                bean.set('SVC_CHANNEL_STATUS', 'MARK_DOWN');
                assert.ok(manager.isMarkdown(id));
                manager.autoMarkup(id);
                assert.ok(manager.isMarkdown(id));

                bean.set('SVC_CHANNEL_STATUS', 'MARK_UP');

                bean.set('debug', 'true');
                assert.equal('true', '' + bean.get('debug'));
                bean.set('debug', 'false');

                next();
            });
        }

        async.series([
            validate,
            validate
        ], done);

    });

    it('should define config bean with Protocol Override for HTTPS flag', function (done) {
        this.timeout(3000);
        process.env.ENABLE_HTTPS=true;

        var id = 'test-config-bean-https-flag';

        function transport(options, callback) {
            setImmediate(callback.bind(null, null, options));
        }

        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var wrapped = wrap(transport, manager);
        function validate (next) {
            wrapped({
                name: 'John',
                clientId: id
            }, function cb(err, options) {
                assert.ok(!err);

                assert.ok(!manager.isMarkdown(id));
                var bean = manager.getClientState(id).bean;
                assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));

                assert.equal('false', '' + bean.get('debug'));
                assert.equal(EXPECTED_HOST, bean.get('hostname'));
                assert.equal(false, options.dnslookup);
                assert.equal(2000, options.socketTimeout);
                assert.equal(5000, options.maxKeepAliveTime);
                assert.equal(5000, options['auto-markup-timeout']);
                assert.equal(10, options['markdown-threshold']);
                assert.equal('https:', options.protocol);
                assert.equal(443, options.port);
                assert.equal('eBayRootCert', options.https);

                delete process.env.ENABLE_HTTPS;
                next();
            });
        }

        async.series([
            validate
        ], done);

    });

    it('should define config bean with Protocol Override for HTTPS flag without port', function (done) {
        this.timeout(3000);
        process.env.ENABLE_HTTPS=true;

        var id = 'test-config-bean-https-flag-without-port';

        function transport(options, callback) {
            setImmediate(callback.bind(null, null, options));
        }

        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var wrapped = wrap(transport, manager);
        function validate (next) {
            wrapped({
                name: 'John',
                clientId: id
            }, function cb(err, options) {
                assert.ok(!err);

                assert.ok(!manager.isMarkdown(id));
                var bean = manager.getClientState(id).bean;
                assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));

                assert.equal('false', '' + bean.get('debug'));
                assert.equal(EXPECTED_HOST, bean.get('hostname'));
                assert.equal(false, options.dnslookup);
                assert.equal(2000, options.socketTimeout);
                assert.equal(5000, options.maxKeepAliveTime);
                assert.equal(5000, options['auto-markup-timeout']);
                assert.equal(10, options['markdown-threshold']);
                assert.equal('https:', options.protocol);
                assert.ok(!options.port);
                assert.equal('eBayRootCert', options.https);

                delete process.env.ENABLE_HTTPS;
                next();
            });
        }

        async.series([
            validate
        ], done);

    });

    it('should define config bean 2 from service config', function (done) {
        this.timeout(3000);
        var id = 'test-config-bean2';

        function transport(options, callback) {
            setImmediate(callback.bind(null, null, options));
        }

        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var wrapped = wrap(transport, manager);

        function validate (next) {
            wrapped({
                name: 'John',
                clientId: id
            }, function cb(err, options) {

                assert.ok(!err);

                assert.ok(!manager.isMarkdown(id));
                var bean = manager.getClientState(id).bean;
                assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));
                assert.equal('false', '' + bean.get('debug'));
                assert.equal('bar', bean.get('foo'));
                assert.equal('B', bean.get('A'));
                assert.equal('B', options.A);
                assert.equal('bar', options.foo);

                // mark it down
                manager.autoMarkdown(id);
                assert.equal('APP_AUTO_MARK_DOWN', bean.get('SVC_CHANNEL_STATUS'));
                assert.ok(manager.isMarkdown(id));

                manager.autoMarkup(id);
                assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));
                assert.ok(!manager.isMarkdown(id));

                bean.set('SVC_CHANNEL_STATUS', 'MARK_DOWN');
                assert.ok(manager.isMarkdown(id));
                manager.autoMarkup(id);
                assert.ok(manager.isMarkdown(id));

                bean.set('SVC_CHANNEL_STATUS', 'MARK_UP');
                next();
            });
        }

        async.series([
            validate,
            validate
        ], done);

    });


    it('should define config bean from service config and moduleB', function (done) {
        this.timeout(3000);
        var id = 'test-config-bean-and-module';

        function transport(options, callback) {
            setImmediate(callback.bind(null, null, options));
        }

        var manager = new ServiceManager('moduleB',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var wrapped = wrap(transport, manager);

        wrapped({
            name: 'John',
            clientId: id
        }, function cb(err, options) {

            assert.ok(!err);

            assert.ok(!manager.isMarkdown(id));
            var bean = manager.getClientState(id).bean;
            assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));
            assert.equal('false', '' + bean.get('debug'));
            assert.equal(EXPECTED_HOST, bean.get('hostname'));

            assert.equal(5, options['should-override']);
            assert.equal(false, options.dnslookup);
            assert.equal(2000, options.socketTimeout);
            assert.equal(5000, options.maxKeepAliveTime);
            assert.equal(5000, options['auto-markup-timeout']);
            assert.equal(10, options['markdown-threshold']);
            assert.equal(EXPECTED_HOST, options.hostname);

            // mark it down
            manager.autoMarkdown(id);
            assert.equal('APP_AUTO_MARK_DOWN', bean.get('SVC_CHANNEL_STATUS'));
            assert.ok(manager.isMarkdown(id));

            manager.autoMarkup(id);
            assert.equal('MARK_UP', bean.get('SVC_CHANNEL_STATUS'));
            assert.ok(!manager.isMarkdown(id));

            bean.set('SVC_CHANNEL_STATUS', 'MARK_DOWN');
            assert.ok(manager.isMarkdown(id));
            manager.autoMarkup(id);
            assert.ok(manager.isMarkdown(id));

            bean.set('SVC_CHANNEL_STATUS', 'MARK_UP');
            done();
        });

    });

    it('should fail to define config bean due to missing service definition', function (done) {
        this.timeout(3000);
        var id = 'test-do-not-exist';

        function transport(options, callback) {}

        var manager = new ServiceManager('moduleA',
            pathUtil.resolve(__dirname, 'fixtures/project'));

        var domain = require('domain').create();
        domain.once('error', function (err) {
            assert.ok(err);
            done();
        });
        domain.run(function () {
            var wrapped = wrap(transport, manager);
            setImmediate(function() {
                wrapped({
                    name: 'John',
                    clientId: id
                }, function cb() {
                    done(new Error('Should have failed'));
                });
            });
        });
    });
});
