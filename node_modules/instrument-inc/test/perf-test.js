'use strict';

var utils = require('./fixtures/utils');
var instrumentTool = require('../lib');
var async = require('async');

var TIMES = 1000;
var INSTRUMENTS = ['error-handler', 'retry', 'config-bean'];

describe(__filename, function () {
    this.timeout(60000);

    before(function (done) {
        process.env.TEST_ROOT = require('path').join(__dirname, 'fixtures/project');
        utils.cleanup(done);        
    });

    after(function () {
        delete process.env.TEST_ROOT;
    });

    it('perf, default instrumentation, parallel', function (done) {

        var wrapped = instrumentTool.instrument(transport, INSTRUMENTS);
        async.times(TIMES, function (n, next) {
            wrapped({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, default instrumentation, parallel', function (done) {

        var wrapped = instrumentTool.instrument(transport, INSTRUMENTS);
        async.times(TIMES, function (n, next) {
            wrapped({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, default instrumentation, series', function (done) {

        var wrapped = instrumentTool.instrument(transport, INSTRUMENTS);
        async.timesSeries(TIMES, function (n, next) {
            wrapped({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, no instrumentation, parallel', function (done) {

        async.times(TIMES, function (n, next) {
            transport({
                clientId: 'test-perf'
            }, next);
        }, done);
    });

    it('perf, no instrumentation, series', function (done) {

        async.timesSeries(TIMES, function (n, next) {
            transport({
                clientId: 'test-perf'
            }, next);
        }, done);
    });    
});

function transport(options, callback) {
    options.transportCounter = options.transportCounter || 0;
    options.transportCounter++;
    callback(null, options);
}
