'use strict';

var assert = require('assert');

var errors = require('../errors');
var RuntimeError = errors.RuntimeError;

describe(__filename, function () {

    it('should create empty error', function () {
        var err = new RuntimeError();

        assertErrorWrapper(err, {
            empty: true
        });
    });

    it('should create simple error', function () {
        var err = new RuntimeError('Simple error');

        assertErrorWrapper(err);
        assert.equal('unknown', err.domain);
        assert.equal('SYSTEM', err.category);
        assert.equal(1, err.errorId);
    });

    it('should wrap existing error', function () {
        var err = new RuntimeError(new Error('Wrapped error'));

        assertErrorWrapper(err);
    });

    it('should wrap existing runtime error and inherit its properties', function () {
        var err = new RuntimeError(new RuntimeError({
            errorId: 123,
            message: 'Wrapped error',
            code: 'TIMEDOUT',
            domain: 'search',
            category: errors.ErrorCategory.APPLICATION
        }));

        assert.equal('TIMEDOUT', err.code);
        assert.equal('APPLICATION', err.category);
        assert.equal('search', err.domain);
        assert.equal(123, err.errorId);
    });

    it('should wrap existing runtime error and inherit its properties while ignoring its own', function () {
        var err = new RuntimeError({
            error: new RuntimeError({
                message: 'Wrapped error',
                code: 'TIMEDOUT',
                category: errors.ErrorCategory.USER
            }),
            message: 'My error',
            code: 2,
            type: 'my-type'
        });

        assert.equal('TIMEDOUT', err.code);
        assert.equal('USER', err.category);
        assert.equal('Re-thrown: My error', err.message);
    });

    it('should wrap existing error with new message', function () {
        var err = new RuntimeError('Simple error', new Error('Wrapped error'));

        assertErrorWrapper(err);
    });

    it('should create simple error with type', function () {
        var err = new RuntimeError('Simple error', {
            type: 'user'
        });

        assertErrorWrapper(err, {
            type: 'user'
        });
    });

    it('should create simple error with code', function () {
        var err = new RuntimeError('Simple error', {
            type: 'user',
            code: 2
        });

        assertErrorWrapper(err, {
            type: 'user',
            code: 2
        });
    });

    it('should create simple error with statusCode', function () {
        var err = new RuntimeError('Simple error', {
            type: 'user',
            code: 2,
            statusCode: 404
        });

        assertErrorWrapper(err, {
            type: 'user',
            code: 2,
            statusCode: 404
        });
    });

    it('should create error with original one', function () {
        var err = new RuntimeError(new Error('Wrapped error'));

        assertErrorWrapper(err);
    });

});

function assertErrorWrapper(err, options) {
    options = options || {};
    var category = options.category || 'SYSTEM';
    var code = options.code || 1;

    assert.ok(err instanceof Error, 'should be instance of Error');
    assert.ok(err instanceof RuntimeError, 'should be instance of RuntimeError');
    assert.equal(code, err.code, 'It should have error code set to 1');
    options.empty && assert.equal('RuntimeError', err.message);
    options.simple && !options.originalError && assert.equal('Simple error', err.message);
    options.simple && options.originalError && assert.equal('Re-thrown: Simple error', err.message);
    options.originalError && options.simple && assert.ok(err.stack.indexOf('Re-thrown: Simple error') !== -1);
    options.originalError && assert.ok(err.stack.indexOf('Original error: Error: Wrapped error') !== -1);
    options.originalError && assert.ok(!err.originalError, 'should not have original error object');
    assert.ok(err.stack.indexOf('at RuntimeError.Error') !== -1);
    assert.equal(category, err.category, 'should set default type "'+category+'"');
    assert.equal(options.statusCode, err.statusCode, 'should have status code ' + options.statusCode);
}
