'use strict';

var assert = require('assert');
var utils = require('./fixtures/utils');

var wrappers = require('../wrappers');
var asyncwrap = require('../lib/asyncwrap').wrapFunc;
var index = require('../lib');


describe(__filename, function () {
    before(function (done) {
        process.env.TEST_ROOT = require('path').join(__dirname, 'fixtures/project');
        utils.cleanup(done);        
    });

    after(function () {
        delete process.env.TEST_ROOT;
    });

    it('should register a new wrapper', function (done) {

        var events = [];
        function transport(options, callback) {
            events.push('transport');
            setImmediate(callback.bind(null, null, options));
        }
               
        wrappers.register('wrap1', function wrap1(transport) {
            return asyncwrap(transport, function before(options, next) {
                events.push('wrap1.before');
                next(null, options);
            }, function after(err, result, next) {
                events.push('wrap1.after');
                next(err, result);
            });
        });

        wrappers.register('wrap2', function wrap2(transport) {
            return asyncwrap(transport, function before(options, next) {
                events.push('wrap2.before');
                next(null, options);
            }, function after(err, result, next) {
                events.push('wrap2.after');
                next(err, result);
            });
        });
        
        var wrapped = index.instrument(transport, null, ['wrap1', 'wrap2']);
        wrapped({
            clientId: 'test'
        }, function () {
            assert.equal('wrap2.before->wrap1.before->transport->wrap1.after->wrap2.after', events.join('->'));
            done();
        });

    });
});

