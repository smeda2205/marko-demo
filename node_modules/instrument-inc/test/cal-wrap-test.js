'use strict';

var assert = require('assert');
var _wrap = require('../lib/service-wrappers/cal');
var CALEventCatcher = require('./fixtures/cal-catcher');
var logger = require('logging-inc').logger('test-logger');

var wrap = function () {
    return _wrap.apply(null, arguments).bind({});
};

describe(__filename, function () {

    it('should log atomic transaction', function (done) {
        var events = [];

        new CALEventCatcher(function (evt) {
            events.push(evt);
        });

        function transport(options, callback) {
            setImmediate(callback.bind(null, null, {
                headers: {
                    A: 'B',
                    foo: 'bar'
                },
                statusCode: 200
            }));
        }

        var wrapped = wrap(transport).bind({});
        wrapped({
            clientId: 'test-client',
            dnslookup: false,
            socketTimeout: 3000,
            maxKeepAliveTime: 5000,
            protocol: 'http:',
            hostname: 'globalheader.vip.qa.ebay.com',
            basepath: '/header/json',
            transport: 'generic',
            method: 'GET',
            headers: {
                D: 'C',
                M: 'B',
                authorization: 'Bear 73173129731'
            }
        }, function (err, result) {
            assert.ok(!err);
            assert.ok(result);

            // validate
            setTimeout(function () {
                assert.equal(5, events.length);

                assert.equal('Service', events[0].type);
                assert.equal('test-client', events[0].name);
                assert.equal('t', events[0].messageClass);

                assert.equal('Service', events[0].type);
                assert.equal('test-client', events[0].name);

                assert.equal('test-client', events[1].type);
                assert.equal('RequestURL', events[1].name);
                assert.equal('http://globalheader.vip.qa.ebay.com/header/json', events[1].data.msg);

                assert.equal('test-client', events[2].type);
                assert.equal('ResponseHeaders', events[2].name);
                assert.deepEqual(['{\"A\":\"B\",\"foo\":\"bar\"}'], events[2].data.msg);

                assert.equal('test-client', events[3].type);
                assert.equal('HttpStatus', events[3].name);
                assert.equal(200, events[3].data.msg);

                assert.equal('Service', events[4].type);
                assert.equal('test-client', events[4].name);
                assert.equal('T', events[4].messageClass);

                done();
            }, 100);
        });

    });

    it('should log transaction', function (done) {
        var events = [];
        new CALEventCatcher(function (evt) {
            events.push(evt);
        });

        function transport(options, callback) {
            logger.warn('This', 'is', 'warning');
            setImmediate(callback.bind(null, null, 'Hello ' + options.name));
        }

        var wrapped = wrap(transport).bind({});
        wrapped({
            name: 'John',
            clientId: 'test-client'
        }, function (err, result) {
            assert.ok(!err);
            assert.ok(result);
            assert.equal('Hello John', result);

            // validate
            setTimeout(function () {
                assert.equal(4, events.length);

                assert.equal('Service', events[0].type);
                assert.equal('test-client', events[0].name);
                assert.equal('t', events[0].messageClass);

                assert.equal('RequestURL', events[1].name);

                assert.equal('Service', events[3].type);
                assert.equal('test-client', events[3].name);
                assert.equal('T', events[3].messageClass);

                done();
            }, 1000);
        });

    });


    it('should log transaction with operation name', function (done) {
        var events = [];
        new CALEventCatcher(function (evt) {
            events.push(evt);
        });

        function transport(options, callback) {
            logger.warn('This', 'is', 'warning');
            setImmediate(callback.bind(null, null, 'Hello ' + options.name));
        }

        var wrapped = wrap(transport).bind({});
        wrapped({
            name: 'John',
            clientId: 'test-client',
            operation: 'test-op'
        }, function (err, result) {
            assert.ok(!err);
            assert.ok(result);
            assert.equal('Hello John', result);

            // validate
            setTimeout(function () {
                assert.equal(4, events.length);

                assert.equal('Service', events[0].type);
                assert.equal('test-client.test-op', events[0].name);
                assert.equal('t', events[0].messageClass);

                assert.equal('RequestURL', events[1].name);

                assert.equal('Service', events[3].type);
                assert.equal('test-client.test-op', events[3].name);
                assert.equal('T', events[3].messageClass);

                done();
            }, 1000);
        });

    });

    it('should log error transaction', function (done) {
        var events = [];
        new CALEventCatcher(function (evt) {
            events.push(evt);
        });

        function transport(options, callback) {
            logger.warn('This', 'is', 'warning');
            setImmediate(callback.bind(null, new Error('Test error')));
        }

        var wrapped = wrap(transport).bind({});
        wrapped({
            name: 'John',
            clientId: 'test-client'
        }, function (err, result) {
            assert.ok(err);
            assert.ok(!result);

            // validate
            setTimeout(function () {
                assert.equal(5, events.length);

                assert.equal('Service', events[0].type);
                assert.equal('test-client', events[0].name);
                assert.equal('t', events[0].messageClass);

                assert.equal('test-client', events[2].type);
                assert.equal('test-logger', events[2].name);
                assert.equal('warn', events[2].loglevel);
                assert.equal('E', events[2].messageClass);

                assert.equal('Error', events[3].type);
                assert.equal('test-client_Error', events[3].name);
                assert.equal('E', events[3].messageClass);

                assert.equal('Service', events[4].type);
                assert.equal('test-client', events[4].name);
                assert.equal('T', events[4].messageClass);
                assert.equal(1, events[4].status);

                done();
            }, 1000);
        });
    });

    it('should log 404 error transaction', function (done) {
        var events = [];
        new CALEventCatcher(function (evt) {
            events.push(evt);
        });

        function transport(options, callback) {
            logger.warn('This', 'is', 'warning');
            var err = new Error('Test error');
            err.code = 404;
            setImmediate(callback.bind(null, err));
        }

        var wrapped = wrap(transport).bind({});
        wrapped({
            name: 'John',
            clientId: 'test-client'
        }, function (err, result) {
            assert.ok(err);
            assert.ok(!result);

            // validate
            setTimeout(function () {
                assert.equal(5, events.length);

                assert.equal('Service', events[0].type);
                assert.equal('test-client', events[0].name);
                assert.equal('t', events[0].messageClass);

                assert.equal('Error', events[3].type);
                assert.equal('test-client_404', events[3].name);
                assert.equal('E', events[3].messageClass);

                assert.equal('Service', events[4].type);
                assert.equal('test-client', events[4].name);
                assert.equal('T', events[4].messageClass);
                assert.equal(1, events[4].status);

                done();
            }, 1000);
        });

    });
});
