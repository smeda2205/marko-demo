'use strict';

var debug = require('debug');
var utils = require('./utils/index');
var testAapp = utils.testAppMultipartStreamError();
var punch = require('httpunch');
var svr;
var request = require('supertest');

var streams = require('../index');
var chunked = streams.ChunkedStream;
var MultipartStream = streams.MultipartStream;

var assert = require('assert');
var nock;
describe(__filename, function() {

    before(function(done) {
        svr = testAapp.listen(2223, done);
    });

    after(function() {
        svr.close();
    });

    it('should recieve end event with undefind for empty chunk', function (done) {
        var chunks = [];
        var cstream = new chunked();
        var stream = new MultipartStream();
        cstream.pipe(stream);
        stream.on('error', done);
        stream.on('data', function() {
            done(new Error('Should not happen'));
        });
        stream.on('end', function(data) {
            assert.equal(undefined, data);
            done();
        });
        cstream.write('');
        cstream.end();
    });

    it('should fail to parse chunk', function (done) {
        var chunks = [];
        var cstream = new chunked();
        var stream = new MultipartStream();
        cstream.pipe(stream);
        stream.on('error', function(err) {
            assert.equal('Unable to parse chunk s', err.message);
            done();
        });
        stream.on('data', function(data) {
            done(new Error('Should not happen'));
        });

        stream.on('end', function(data) {
            done(new Error('Should not happen'));
        });
        cstream.write('s');
        cstream.end();
    });

    it('Should return undefined for 304 request', function(done) {
        this.timeout(2000);

        var stream = new chunked();
        // nock = require('nock');
        // var mock = nock('http://localhost:2223').get('/304').reply(304, 'Not Modified');
        var options = {
            url: 'http://localhost:2223/304'
        };
        var req = punch.get(options, function(err, result) {
            // nock.restore();
            // assert.equal(result.body.toString(), 'Not Modified');
            // done();
            // svr.close();
        });

        var eventParts = new MultipartStream();
        var parts = [];
        stream.pipe(eventParts);
        req.pipe(stream);
        var chunks = [];
        req.on('response', function(res) {
            //data, error and end should be registered. if only end event is registered, it fails
            res.on('data', function(chunk) {
                chunks.push(chunk.toString());
            });
            res.on('error', function(msg){
            });
            res.on('end', function(r) {
                assert.equal(undefined, r);
                done();
                //nock.cleanAll();
            });
        });
    });

});
