'use strict';

var express = require('express');
var pathUtils = require('path');

var BEAN_DIR = pathUtils.resolve(process.cwd(), '.beans');

module.exports.testApp = function(options) {
    var app = express();

    app.use(function(req, res) {
        if (req.query.delay) {

            return setTimeout(function() {
                res.end();
            }, parseInt(req.query.delay));
        }

        var queries = {
            'moduleA': 'moduleA',
            'moduleB': 'moduleB'
        };
        if (req.query.delay) {
            return setTimeout(function() {
                res.end();
            }, parseInt(req.query.delay));
        }
        var maxTimeout = 0;

        Object.keys(queries).forEach(function(name) {
            var timeout = parseInt(req.query[name]) || 0;
            maxTimeout = Math.max(timeout, maxTimeout);
            setTimeout(function() {
                res.write(getDataStr(name) + '\n\n');
            }, timeout);
        });
        setTimeout(function() {
            if (req.headers['data-in-last-chunk'] === 'true') {
                res.end(JSON.stringify({
                    name: 'last',
                    title: 'This is a last chunk'
                }));
            } else {
                res.end();
            }
        }, maxTimeout + 100);
    });

    return app;
};

module.exports.testSSE = function(options) {
    var app = express();
    var chunkError = false;
    app.use(function(req, res) {
        if (req.query.delay) {
            setTimeout(function() {
                res.end();
            }, parseInt(req.query.delay));
        }
        chunkError = req.query.error;
        var maxTimeout = 0;
        var eventSources = options.events || [];
        eventSources.forEach(function(source) {
            var timeout = 10;
            timeout = 0;
            maxTimeout = Math.max(timeout, maxTimeout);
            setTimeout(function() {
                source.write(res);
            }, timeout);
        });
        setTimeout(function() {
            if (req.headers['data-in-last-chunk'] === 'true') {
                res.end(JSON.stringify({
                    name: 'last',
                    title: 'This is a last chunk'
                }));
            } else {
                res.end();
            }
        }, maxTimeout + 100);
    });

    return app;
};

module.exports.testAppEventsChunking = function() {
    var app = express();
    app.use(function(req, res) {
        res.write('event: test\n');
        res.write('id: 1\n');
        res.write('retry: 0' + '\n');
        res.write('data: {"test": "data1"}' );
        res.write('\n');
        
        setTimeout(function(){
            res.write('\n');
            
            setTimeout(function(){
                res.write('event: test\n');
                res.write('id: 2\n');
                res.write('retry: 0' + '\n');
                res.write('data: {"test": "data2"}' );
                res.write('\n\n');
                res.end();   
            }, 200);          
        }, 200);
        
    });

    return app;
};
module.exports.testAppMultipartChunking = function() {
    var app = express();
    app.use(function(req, res) {
        res.write('{\"type\":\"DATA\",\"id\":\"TRACKING_DATA\",\"data\":\"{\'test\':\'testdata1\'}"}');
        res.write('\n\n');

        setTimeout(function(){
            res.write('{\"type\":\"DATA\",\"id\":\"Testdata\",\"data\":\"{\'test\':\'testdata2\'}"}');
            res.write('\n\n');
            res.end();
        }, 200);
    });
    return app;
};

module.exports.testAppEvents = function() {
    var app = express();
    var chunkError = false;
    app.use(function(req, res) {
        if (req.query.delay) {
            return setTimeout(function() {
                res.end();
            }, parseInt(req.query.delay));
        }
        chunkError = req.query.error;
        var modules = {
            'moduleA': {
                name: 'moduleA',
                data: {
                    "name": "item1",
                    "itemId": "1001",
                    "description": "this is something you really need"
                }
            },
            'moduleB': {
                name: 'moduleB',
                data: {
                    "name": "item2",
                    "itemId": "1002",
                    "description": "this is something you really need"
                }
            },
            'moduleC': {
                name: 'moduleC',
                data: {
                    "name": "item3",
                    "itemId": "1003",
                    "description": "this is something you really need"
                }
            },
            'moduleD': {
                name: 'moduleD',
                data: {
                    "name": "item4",
                    "itemId": "1005",
                    "description": "this is something you really need"
                }
            },
            'moduleE': {
                name: 'module6',
                data: {
                    "name": "item6",
                    "itemId": "1007",
                    "description": "this is something you really need"
                }
            },
            'moduleF': {
                name: 'module19',
                data: {
                    "name": "item20",
                    "itemId": "10020",
                    "description": "this is something you really need"
                }
            },
            'moduleG': {
                name: 'module22',
                data: {
                    "name": "item22",
                    "itemId": "1002GGG2",
                    "description": "this is something you really need"
                }
            }
        };


        var queries = {
            'moduleA': 'moduleA',
            'moduleB': 'moduleB',
            'moduleC': 'moduleC',
            'moduleD': 'moduleD',
            'moduleE': 'moduleE',
            'moduleF': 'moduleF'
        };
        queries = modules;
        if (req.query.delay) {
            return setTimeout(function() {
                res.end();
            }, parseInt(req.query.delay));
        }
        var maxTimeout = 0;
        if (chunkError) {
            res.write('event: error' + '\n');
            res.write('id: ' + Date.now() + '\n');
            res.write('retry: 0' + '\n');
            res.write('data: ' + getModelDataStr(new Error('Unknown Error')));
            res.write('\n\n');
        }
        Object.keys(queries).forEach(function(name) {
            var timeout = parseInt(req.query[name]) || 10;
            timeout = 200;
            maxTimeout = Math.max(timeout, maxTimeout);
            setTimeout(function() {
                res.write('event: ' + name + '\n');
                res.write('id: ' + Date.now() + '\n');
                res.write('retry: 0' + '\n');
                res.write('data: ' + getModelDataStr(modules[name]));
                res.write('\n\n');
            }, timeout);
        });
        setTimeout(function() {
            if (req.headers['data-in-last-chunk'] === 'true') {
                res.end(JSON.stringify({
                    name: 'last',
                    title: 'This is a last chunk'
                }));
            } else {
                res.end();
            }
        }, maxTimeout + 100);
    });

    return app;
};

module.exports.testAppMultipartStream = function() {
    var app = express();
    var chunkError = false;
    app.use(function(req, res) {
        if (req.query.delay) {
            return setTimeout(function() {
                res.end();
            }, parseInt(req.query.delay));
        }
        chunkError = req.query.error;
        var modules = {
            'moduleA': {
                id: 'moduleA',
                type: 'DATA',
                data: {
                    "name": "item1",
                    "itemId": "1001",
                    "description": "this is something you really need"
                }
            },
            'module23': {
                id: 'module23',
                type: 'ERROR',                
                data: {
                    "name": "item23",
                    "itemId": "1002GGG2",
                    "description": "this is something you really need"
                }
            },
            'moduleB': {
                id: 'moduleB',
                type: 'DATA',
                data: {
                    "name": "item2",
                    "itemId": "1002",
                    "description": "this is something you really need"
                }
            },
            'moduleC': {
                id: 'moduleC',
                type: 'DATA',
                data: {
                    "name": "item3",
                    "itemId": "1003",
                    "description": "this is something you really need"
                }
            },
            'moduleD': {
                id: 'moduleD',
                type: 'DATA',
                data: {
                    "name": "item4",
                    "itemId": "1005",
                    "description": "this is something you really need"
                }
            },
            'moduleE': {
                id: 'module6',
                type: 'DATA',
                data: {
                    "name": "item6",
                    "itemId": "1007",
                    "description": "this is something you really need"
                }
            },
            'moduleF': {
                id: 'module19',
                type:'DATA',
                data: {
                    "name": "item20",
                    "itemId": "10020",
                    "description": "this is something you really need"
                }
            },
            'moduleG': {
                id: 'module22',
                type: 'DATA',                
                data: {
                    "name": "item22",
                    "itemId": "1002GGG2",
                    "description": "this is something you really need"
                }
            }
        };
        var maxTimeout = 0;
        var moduleKeys = Object.keys(modules);
        moduleKeys.forEach(function(name) {
            var timeout = parseInt(req.query[name]) || 10;
            timeout = 200;
            maxTimeout = Math.max(timeout, maxTimeout);
            setTimeout(function() {
                res.write(getModelDataStr(modules[name]));
                res.write('\n\n');
            }, timeout);
        });
        setTimeout(function() {
            if (req.headers['data-in-last-chunk'] === 'true') {
                res.end(JSON.stringify({
                    name: 'last',
                    title: 'This is a last chunk'
                }));
            } else {
                res.end();
            }
        }, maxTimeout + 100);
    });

    return app;
};
module.exports.testAppMultipartStreamError = function() {
    var app = express();
    var chunkError = false;
    app.use(function(req, res) {
        res.writeHead(304, {'Last-Modified':new Date()});
       //res.write('{\"type\":\"DATA\",\"id\":\"Testdata\",\"data\":\"{\'test\':\'testdata2\'}"}');
        res.end();
    });

    return app;
};


function getDataStr(name) {
    var model = {
        name: name,
        title: 'This is module' + name
    };
    return JSON.stringify(model);
}

function getModelDataStr(model) {
    return JSON.stringify(model);
}

module.exports.cleanup = function cleanup(cb) {
    cb && cb();
};