'use strict';

var debug = require('debug');
var utils = require('./utils/index');
var testAapp;
var punch = require('httpunch');
var svr;
var request = require('supertest');

var streams = require('../index');
var chunked = streams.ChunkedStream;
var eventStream = streams.EventStream;
var eventsource = require('./utils/event-source').EventSource;
var assert = require('assert');
var eventCount = 10;
describe(__filename, function() {

    beforeEach(function(done) {
        utils.cleanup(done);
    });

    before(function(done) {
        var sources = eventsources(eventCount);
        var testAapp = require('./utils/index').testSSE({
            events: sources
        });
        svr = testAapp.listen(8888, done);
    });

    after(function() {
        svr.close();
    });

    it('Should pass this test', function(done) {
        debug('booting %s', __filename);
        this.timeout(10000);
        var stream = new chunked();
        var req = punch.get('http://localhost:8888');
        var eventParts = new eventStream();
        var parts = [];
        var lastchunk;

        stream.pipe(eventParts);
        req.pipe(stream);

        eventParts.on('data', function(part) {
            if (part.name === 'end-event') {
                lastchunk = part;
            }
            parts.push(part.toJson());
        });

        eventParts.once('finish', function() {
            assert.equal(11, parts.length);
            assert.equal(parts[parts.length - 1].name, 'end-event');
            assert.ok(lastchunk);
            assert.equal(lastchunk.is('end-event'), true);
            done();
        });

    });

    function eventsources(count) {
        var source = {};
        var sources = [];
        for (var i = 0; i < count; i++) {
            source = new eventsource();
            source.type = 'event';
            source.id = i;
            source.name = 'event' + i;
            source.value = {
                "name": "item1",
                "itemId": "1001",
                "description": "this is something you really need"
            };
            source.comment = 'Event for id' + i;
            sources.push(source);
        }

        source = new eventsource();
        source.type = 'event';
        source.id = 'end';
        source.name = 'end-event';
        sources.push(source);
        return sources;
    }
});