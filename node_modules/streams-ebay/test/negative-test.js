'use strict';

var debug = require('debug');
var utils = require('./utils/index');
var testAapp = require('./utils/index').testApp('json');
var punch = require('httpunch');
var svr;
var request = require('supertest');
var streams = require('../index');
var chunked = streams.ChunkedStream;
var jsonStream = streams.JsonStream;


var assert = require('assert');
var nock;
describe(__filename, function() {

    beforeEach(function(done) {
        utils.cleanup(done);
    });

    before(function(done) {
        svr = testAapp.listen(7777, done);

    });

    after(function() {
        svr.close();

    });

    it('Should send 200 , still generate parsing excpeption ', function(done) {
        debug('booting %s', __filename);
        var stream = new chunked();
        var options = {
            headers: {
                'data-in-last-chunk': true
            },
            url: 'http://localhost:7777/200',
            socketTimeout: 0
        };
        nock = require('nock');
        nock('http://localhost:7777').get('/200').reply(200, 'Hello World !!!');
        var req = punch.get(options);

        var jsonParts = new jsonStream();
        stream.pipe(jsonParts);
        req.pipe(stream);
        jsonParts.once('error', function(err) {
            assert.ok(err);
            nock.cleanAll();
            done();
        });
        jsonParts.once('finish', function() {
            done();
        });
    });

    it('Request should TIMEOUT', function(done) {
        debug('booting %s', __filename);
        var stream = new chunked();
        var options = {
            headers: {
                'data-in-last-chunk': true
            },
            url: 'http://localhost:7777?delay=1000',
            socketTimeout: 1
        };

        var req = punch.get(options, function(err) {
            assert.ok(err);
            assert.equal('ECONNRESET', err.code);
            done();
        });

        var jsonParts = new jsonStream();
        stream.pipe(jsonParts);
        req.pipe(stream);
        jsonParts.once('error', function(err) {
            assert.ok(err);
            done();
        });
        jsonParts.once('finish', function() {
            done();
        });
    });
});