'use strict';
var formatters = require('../index').formatters;

var assert = require('assert');

describe(__filename, function() {

    it('Should Format Data', function(done) {
        var result = formatters.sse("Test");
        assert.ok(result);
        assert.equal(result, 'data: Test');
        done();
    });

    it('Should Format JSON Data', function(done) {
        var data = {
            name: 'module22',
            data: {
                "name": "item22",
                "itemId": "1002GGG2",
                "description": "this is something you really need"
            }
        };
        var result = formatters.sse(data, {});
        assert.ok(result);
        assert.equal('data: ' + JSON.stringify(data), result);
        done();
    });


    it('Should Format JSON Data w/Options', function(done) {
        var data = {
            name: 'module22',
            data: {
                "name": "item22",
                "itemId": "1002GGG2",
                "description": "this is something you really need"
            }
        };

        var options = {
            'comment': 'hello world',
            'id': 1234,
            'name': 'ebayitem',
            'retry': 0
        };

        var result = formatters.sse(data, options);
        assert.ok(result);
        var resultlist = result.split('\n');
        assert.equal(resultlist.length, 4);
        done();
    });

    it('Should Format JSON Data w/No Options', function(done) {
        var data = {
            name: 'module22',
            data: {
                "name": "item22",
                "itemId": "1002GGG2",
                "description": "this is something you really need"
            }
        };

        var result = formatters.sse(data);
        assert.ok(result);
        assert.equal('data: ' + JSON.stringify(data), result);

        done();
    });

    it('Should not Format Undefined Data w/No Options', function(done) {
        var data;
        var result = formatters.sse(data);
        assert.ok(!result);
        done();
    });
    it('Should not Format NULL Data w/No Options', function(done) {
        var result = formatters.sse(null);
        assert.ok(!result);
        done();
    });
    it('Should Format Empty Data w/No Options', function(done) {
        var data = ' ';

        var result = formatters.sse(data);
        assert.equal(result.trim().length, 5);
        done();
    });

    it('Should Format JSON Data should not overlap with options.data', function(done) {
        var data = {
            name: 'module22',
            data: {
                "name": "item22",
                "itemId": "1002GGG2",
                "description": "this is something you really need"
            }
        };

        var options = {
            'comment': 'hello world',
            'id': 1234,
            'name': 'ebayitem',
            'retry': 0,
            data: data
        };

        var result = formatters.sse(data, options);
        assert.ok(result);
        var resultlist = result.split('\n');
        assert.equal(resultlist.length, 4);
        var resultdata = resultlist.pop();
        assert.equal('data: ' + JSON.stringify(data), resultdata);

        done();
    });

    it('Should Format JSON Data should not overlap with options.data', function(done) {
        var result = formatters.sse(123);
        assert.equal('data: 123', result);
        done();
    });

});