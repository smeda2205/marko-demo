'use strict';

var debug = require('debug');
var utils = require('./utils/index');
var testAapp = require('./utils/index').testAppMultipartStream();
var punch = require('httpunch');
var svr;
var request = require('supertest');

var streams = require('../index');
var Chunked = streams.ChunkedStream;
var MultipartStream = streams.MultipartStream;

var assert = require('assert');

describe(__filename, function() {

    beforeEach(function(done) {
        utils.cleanup(done);
    });

    before(function(done) {
        svr = testAapp.listen(8888, done);
    });

    after(function() {
        svr.close();
    });

    it('Should throw ECONNRESET error', function(done) {
        debug('booting %s', __filename);
        this.timeout(10000);
        var stream = new Chunked();

        var options = {
            url: 'http://localhost:8888?delay=1000',
            socketTimeout: 1
        };

        var req = punch.get(options, function(err) {
            assert.ok(err);
            assert.equal('ECONNRESET', err.code);
            done();
        });
         var eventParts = new MultipartStream();
         stream.pipe(eventParts);
         req.pipe(stream);
    });
});