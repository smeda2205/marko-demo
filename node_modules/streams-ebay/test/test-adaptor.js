'use strict';

var debug = require('debug');
var utils = require('./utils/index');
var testAapp = require('./utils/index').testAppEvents();
var punch = require('httpunch');
var svr;
var request = require('supertest');

var streams = require('../index');
var chunked = streams.ChunkedStream;
var eventStream = streams.EventStream;

var assert = require('assert');

describe(__filename, function () {

    it('Should pass this test with data', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();

        function doCallBack(callback) {
            callback(undefined, {
                body: 'hello'
            });
            setTimeout(callback, 500);

        }
        streamsAdaptor.on('data', function (data) {
            assert.ok(data);
            assert.ok(data.unknown);
            assert.ok(data.unknown === 'hello');
        });

        streamsAdaptor.on('end', function () {
            done();
        });
        doCallBack(streamsAdaptor.handle());
    });
    it('Should pass this test with data along with id', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();

        function doCallBack(callback) {
            callback(undefined, {
                body: {data: 'hello', id: 'chunkid'}
            });
            setTimeout(callback, 500);

        }
        streamsAdaptor.on('data', function (data) {
            assert.ok(data);
            assert.ok(data.chunkid);
            assert.ok(data.chunkid === 'hello');
        });

        streamsAdaptor.on('end', function () {
            done();
        });
        doCallBack(streamsAdaptor.handle());
    });

    it('Should pass this test with Error', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();

        function doCallBack(callback) {
            callback(new Error('Undefined unknown Error'));
        }
        var hasData = false;
        streamsAdaptor.on('error', function (err) {
            assert.ok(err);
        });

        streamsAdaptor.on('end', function () {
            assert.ok(!hasData);
            done();
        });

        doCallBack(streamsAdaptor.handle());
    });

    it('Should pass this test with undefined Error & undefined response', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();

        function doCallBack(callback) {
            callback(undefined);
        }
        var hasData = false;
        var hasError = false;
        streamsAdaptor.on('end', function () {
            assert.ok(!hasData && !hasError);
            done();
        });

        doCallBack(streamsAdaptor.handle());
    });

    it('Should pass this test with data along with name', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();

        function doCallBack(callback) {
            callback(undefined, {
                body: {data: 'hello', name:'chunkname'}
            });
            setTimeout(callback, 500);

        }
        streamsAdaptor.on('data', function (data) {
            assert.ok(data);
            assert.ok(data.chunkname);
            assert.ok(data.chunkname === 'hello');
        });

        streamsAdaptor.on('end', function () {
            done();
        });
        doCallBack(streamsAdaptor.handle());
    });
    it('Should pass this test with data along with name and id', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();

        function doCallBack(callback) {
            callback(undefined, {
                body: {data: 'hello', name:'chunkname', id:'chunkid'}
            });
            setTimeout(callback, 500);

        }
        streamsAdaptor.on('data', function (data) {
            assert.ok(data);
            assert.ok(data.chunkname);
            assert.ok(data.chunkname === 'hello');
        });

        streamsAdaptor.on('end', function () {
            done();
        });
        doCallBack(streamsAdaptor.handle());
    });
    it('Should pass this test with end event for SSE', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();
        var hasData = false;
        function doCallBack(callback) {
            callback(undefined, {
                body: {data: 'hello', name:'end'}
            });
            setTimeout(callback, 500);

        }
        streamsAdaptor.on('end', function () {
            assert.ok(!hasData);
            done();
        });
        doCallBack(streamsAdaptor.handle());
    });
    it('Should pass this test with end event for multipart-json', function (done) {
        var adaptor = require('../Adaptor').Adaptor;
        var streamsAdaptor = new adaptor();
        var hasData = false;
        function doCallBack(callback) {
            callback(undefined, {
                body: {data: 'hello', id:'end-event'}
            });
            setTimeout(callback, 500);

        }
        streamsAdaptor.on('end', function () {
            assert.ok(!hasData);
            done();
        });
        doCallBack(streamsAdaptor.handle());
    });
});
