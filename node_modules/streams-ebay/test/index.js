'use strict';

var debug = require('debug');
var utils = require('./utils/index');
var testAapp = require('./utils/index').testApp('json');
var punch = require('httpunch');
var svr;
var request = require('supertest');
var streams = require('../index');
var chunked = streams.ChunkedStream;
var jsonStream = streams.JsonStream;
var assert = require('assert');
var nock;
describe(__filename, function() {

    beforeEach(function(done) {
        utils.cleanup(done);
    });

    before(function(done) {
        svr = testAapp.listen(7777, done);
    });

    after(function() {
        svr.close();
    });

    it('Should pass this test', function(done) {
        debug('booting %s', __filename);
        var stream = new chunked();
        var req = punch.get('http://localhost:7777');
        var jsonParts = new jsonStream();
        var parts = [];

        stream.pipe(jsonParts);
        req.pipe(stream);
        jsonParts.on('object', function(part) {
            parts.push(part);
        });
        jsonParts.once('finish', function() {
            assert.equal(2, parts.length);
            done();
        });
    });


    it('Should pass this test w/last chunk', function(done) {
        debug('booting %s', __filename);
        var stream = new chunked();
        var options = {
            headers: {
                'data-in-last-chunk': true
            },
            url: 'http://localhost:7777'
        };

        var req = punch.get(options);
        var jsonParts = new jsonStream();
        var parts = [];
        stream.pipe(jsonParts);
        req.pipe(stream);
        jsonParts.on('object', function(part) {
            parts.push(part);
        });
        jsonParts.once('finish', function() {
            assert.equal(3, parts.length);
            done();
        });
    });


    it('Should send 404 and raise parsing exception', function(done) {
        var stream = new chunked();
        var jsonParts = new jsonStream();
        var parts = [];
        var options = {
            headers: {
                'data-in-last-chunk': true
            },
            url: 'http://localhost:7777/404',
            socketTimeout: 0
        };

        var nock = require('nock');
        nock('http://localhost:7777').get('/404').reply(404, 'Unknown URL');
        var req = punch.get(options);
        stream.pipe(jsonParts);
        req.pipe(stream);
        jsonParts.on('object', function(part) {
            parts.push(part);
        });
        jsonParts.once('error', function(err) {
            nock.restore();
            done();
        });
        jsonParts.once('finish', function() {
            assert.equal(3, parts.length);
            done();
        });
    });



});