'use strict';

var util = require('util');
var Transform = require('stream').Transform;

var ChunkedStream = module.exports.ChunkedStream = function ChunkedStream() {
    Transform.call(this);
    this._chunks = [];
};

util.inherits(ChunkedStream, Transform);

ChunkedStream.prototype._pushDataAndResetChunks = function(data){
    try {
        this.push(data);
    } catch (err) {
        console.log('Error is : ', err);
    }
    this._chunks = [];
};
    
ChunkedStream.prototype._transform = function(chunk, encoding, callback) {
    chunk = chunk instanceof Buffer ? chunk.toString('utf-8') : chunk;
    var pcs = chunk.split('\n\n');
    
    while (pcs.length > 1) {    
        this._chunks.push(pcs.shift());
        // emit full chunk
        this._pushDataAndResetChunks(this._chunks.join(''));
    }

    var left = pcs.shift();
    if (left) {
        this._chunks.push(left);
        if (left === "\n")
        {
            var data = this._chunks.join('');
            this._pushDataAndResetChunks(data.substring(0, data.length -2)); //remove trailing \n\n       
        }
    }

    callback();
};


ChunkedStream.prototype._flush = function(cb) {
    if (this._chunks.length) {
        this.push(this._chunks.join(''));
    }
    this._chunks = [];
    cb();
};