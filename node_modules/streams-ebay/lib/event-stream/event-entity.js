'use strict';

module.exports = {
    toJson: function toJson(eventEntity) {
        if (eventEntity && eventEntity.type !== 'comment' && eventEntity.data) {
            return {
                name: eventEntity.name,
                id: eventEntity.id,
                data: tryParse(eventEntity.data)
            };
        }
        return eventEntity;
    },
    parse: function parse(chunkPart) {
        if (chunkPart && chunkPart.indexOf(':') >= 0) {
            var field = {
                name: null,
                value: null
            };
            field.name = chunkPart.substring(0, chunkPart.indexOf(':')) || '';
            field.value = chunkPart.substring(field.name.length + 1).trim();

            if (field.value && !field.name.length) {
                field.name = 'comment';
            }
            return field;
        }
    },
    eventEntities: function eventEntities(chunkParts) {
        var self = this;
        var eventEntity = {
            type: 'generic',
            name: null,
            id: Date.now(),
            data: null,
            toJson: function toJson() {
                return self.toJson(this);
            }
        };
        chunkParts.forEach(function(chunkItem) {
            var field = self.parse(chunkItem);
            if (!field) {
                throw new Error('Invalid Chuned Event Part, Chuked Part Is: ' + chunkParts.join(''));
            } else {
                switch (field && field.name) {
                    case 'id':
                        eventEntity.type = 'identity';
                        eventEntity.id = field.value;
                        break;
                    case 'event':
                        eventEntity.type = 'event';
                        eventEntity.name = field.value;
                        break;
                    case 'data':
                        eventEntity.data = (field.value);
                        break;
                    case 'comment':
                        eventEntity.comments = field.value;
                        break;
                    default:
                        break;
                }
            }
        });

        eventEntity.is = function is(name) {
            return this.name === name;
        };

        eventEntity.hasError = eventEntity.name === 'error';
        return eventEntity;
    }
};

function tryParse(jsonStr) {
    try {
        return JSON.parse(jsonStr);
    } catch (err) {
        return new Error('Unable to parse JsonString: ' + jsonStr);
    }
}