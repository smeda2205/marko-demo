'use strict';

var util = require('util');
var Transform = require('stream').Transform;
var debug = require('debug')('streams-ebay:event-stream');

var logger = require('logging-inc').logger('event-stream');
var eventEntity = require('./event-entity');

var EventStream = module.exports.EventStream = function EventStream() {
    Transform.call(this);
};

util.inherits(EventStream, Transform);

EventStream.prototype._transform = function(chunk, encoding, callback) {
    chunk = chunk ? chunk.toString().trim() : '';
    if (chunk.length) {
        var ssEvent = tryParse(chunk.toString());
        if (ssEvent) {
            this.emit(((ssEvent instanceof Error) ? 'error' : 'data'), ssEvent);
        }
    }
    callback();
};


function tryParse(chunk) {
    try {
        return eventEntity.eventEntities(chunk.split('\n'));
    } catch (err) {
        debug("Unable to parse Chunk, Error : " + err);
        return new Error('Unable to parse chunk\nBroken chunk:\n' + chunk);
    }
}

function logWarnings(warning) {
    logger.warn(warning);
}

module.exports.format = function(data, options) {
    options = options || {};
    var formatted = [];
    if (options.comment) {
        formatted.push(': ' + options.comment);
    }
    if (options.id) {
        formatted.push('id: ' + options.id);
    }
    if (options.name) {
        formatted.push('event: ' + options.name);
    }
    if (options.retry) {
        formatted.push('retry: ' + options.retry);
    }

    if (data) {
        if (typeof data === 'string') {
            if (data.trim() === '') {
                logWarnings('SSE Format is applied on an empty data', data);
            }
            formatted.push('data: ' + data);
        } else {
            formatted.push('data: ' + JSON.stringify(data));
        }
    }
    if (formatted.length) {
        return formatted.join('\n');
    }

};
