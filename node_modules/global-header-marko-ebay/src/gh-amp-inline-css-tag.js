'use strict';

var getLassoContext = require('lasso/taglib/getLassoRenderContext');

module.exports = function render(input, out) {
    var globalHeader = out.global.globalHeader;
    var lassoRenderContext = getLassoContext(out);
    var ampSlot = (globalHeader && globalHeader.options && globalHeader.options.slot) ? globalHeader.options.slot : 'amp-slot';
    var config = lassoRenderContext.data.config;

    if (!globalHeader) {
        throw new Error('Global header not configured. The <gh-configure> tag (Marko Template) or {@gh-configure/} helper (Dust) should be included near the beginning.'); // eslint-disable-line max-len
    }

    var headerAsyncValue = globalHeader.header;
    if (headerAsyncValue.isResolved()) {
        if (headerAsyncValue.data.inlineCSS) {
            config.dependencies = config.dependencies || [];
            config.dependencies.push({
                type:'css',
                code: headerAsyncValue.data.inlineCSS, 
                inline: true, 
                slot: ampSlot
            });
        }
        if (input.renderBody) {
            input.renderBody(out);
        }
        return;
    }
    
    var asyncOut = out.beginAsync();
    headerAsyncValue.done(function(err, header) {
        if (!err && header.inlineCSS) {
            config.dependencies = config.dependencies || [];
            config.dependencies.push({
                type:'css',
                code: header.inlineCSS, 
                inline: true, 
                slot: ampSlot
            });
        }
        if (input.renderBody) {
            input.renderBody(asyncOut);
        }
            
        asyncOut.end();
    });
};