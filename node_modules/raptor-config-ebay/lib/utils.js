'use strict';

var _ = require('underscore');
var configBean = require('config-bean-ebay');
var BEAN_ID = 'node.ebay.config.raptor.config';

var latestChangeSetQuery = function (message) {
    //fetch current state from bean
    var bean = configBean.getBeanById(BEAN_ID);
    var state = bean ? (bean.get('Staging') ? 'STAGING' : 'ACTIVE') : 'ACTIVE';

    return ['domain=', message.domain,
        '&target=', message.target,
        '&project=', message.project,
        '&config=', message.config,
        '&version=', message.version,
        '&states=["' + state + '"]&latest=true'].join('');
};

var baselineQuery = function (message, offset, limit) {
    return ['domain=', message.domain,
            '&target=', message.target,
            '&project=', message.project,
            '&config=', message.config,
            '&version=', message.version,
            '&offset=', offset,
            '&limit=', limit].join('');
};

var changesQuery = function (message, changeSet) {
    return ['domain=', message.domain,
            '&target=', message.target,
            '&project=', message.project,
            '&config=', message.config,
            '&version=', message.version,
            '&changeset=', changeSet,
            '&meta=false&compare=false'].join('');
};

var buildLoadKey = function (message) {
    return ['domain=', message.domain,
            '&target=', message.target,
            '&project=', message.project,
            '&config=', message.config,
            '&version=', message.version].join('');
};

var applyChanges = function (origin, changes) {

    var changesAtOffset = changes[origin.offset] || [];
    var survivals = {};
    var removals = {};
    survivals[origin.uid] = origin;

    _.each(changesAtOffset, function (change) {
        if (origin === change) {
            return;
        }
        if (change.action === 0) {
            if (survivals[change.uid]) {
                survivals[change.uid] = null;
            } else {
                removals[change.uid] = change;
            }
        } else {
            if (removals[change.uid]) {
                removals[change.uid] = null;
            } else {
                survivals[change.uid] = change;
            }
        }
    });

    return _.reduce(survivals, function (memoize, survived) {
        return memoize || survived;
    }, null);
};

/**
 * valueList is [{'key':'','value':''}...], and we support @param valueType of:
 * string/char (using 'key')
 * int/long (using 'key' and parseInt)
 * float/double (using 'key' and parseFloat)
 * list (using 'key' array of string)
 * properties (using 'key', 'value' as map)
 */
var resolveValueByType = function (valueList, valueType) {

    valueType = valueType ? valueType.toLowerCase() : 'properties';

    if ('string' === valueType || 'char' === valueType) {
        return valueList && valueList.length ? valueList[0].key : null;
    }
    else if ('int' === valueType || 'long' === valueType) {
        return valueList && valueList.length ? parseInt(valueList[0].key, 10) : null;
    }
    else if ('float' === valueType || 'double' === valueType) {
        return valueList && valueList.length ? parseFloat(valueList[0].key, 10) : null;
    }
    else if ('list' === valueType || 'array' === valueType) {
        return valueList && valueList.length ? _.map(valueList || [], function (elem) {
            return elem.key;
        }) : [];
    }
    else if ('properties' === valueType || 'map' === valueType) {
        //properties
        return _.reduce(valueList || [], function (memoize, elem) {
            memoize[elem.key && elem.key.trim()] = elem.value;
            return memoize;
        }, {});
    }
    else if ('boolean' === valueType) {
        return valueList && valueList.length ? 'true' === valueList[0].key : false;
    }

    //default, and no idea how to resolve it
    return valueList;
};

/**
    Create config bean for raptor config. Used for fetching staged config.
 */
var defineBean = function(opts) {
    opts = opts || {};
    var bean = _.extend({
        'configbean': true,
        'id': BEAN_ID,
        'alias': BEAN_ID,
        'group': 'nodejs.config',
        'desc': 'Raptor Configuration',
        'attributes': [{
            'name': 'Staging',
            'value': false,
            'desc': 'fetch staged config',
            'type': 'boolean',
            'readable': 'true',
            'writable': 'true'
        }]
    }, opts);

    configBean.define(bean);
    return bean;
};


module.exports = {
    latestChangeSetQuery: latestChangeSetQuery,
    baselineQuery: baselineQuery,
    changesQuery: changesQuery,
    buildLoadKey: buildLoadKey,
    applyChanges: applyChanges,
    resolveValueByType: resolveValueByType,
    defineBean: defineBean,
    configBeanId: BEAN_ID
};