'use strict';

var Assert = require('assert');
var moduleConfig = require('module-config-inc');
var AsyncValue = require('raptor-async/AsyncValue');
var Objutil = require('objutil');
var Utils = require('./utils');

var logger = require('logging-inc').logger('service-instruments-ebay/resolver');

var customInstruments = {};
var instrumentsMetadata = {};
var configValue;
var modConfig;

function resolveInstruments(instruments) {
    Assert.ok(instruments, 'No instruments provided, in case you do not need them, please use empty list');

    // resolve instruments list and sort it according to the priorities
    return instruments
        .map(resolveInstrumentMeta)
        .sort(function sort(a, b) {
            return a.transport ? -1 :
                b.transport ? +1 :
                a.priority - b.priority;
        });
}
module.exports.resolveInstruments = resolveInstruments;

function resolveInstrumentMeta(name) {
    var meta;
    if (typeof name === 'object') {
        meta = Objutil.clone(name);
        // expecting the instrument represents an in-line instrument metadata
        // if resolved
        if (meta.instrument) {
            return meta;
        }
        // try to load it
        name = meta.name;
        // check if this has been already loaded
        var location = Utils.tryResolve(meta.module);
        if (!location) {
            throw new Error('Cannot find instrument module ' + meta.module +
                ' for instrument: ' + name + ', make sure you install it');
        }

        if (customInstruments[location]) {
            // already loaded
            return customInstruments[location];
        }

        // load
        meta.instrument = require(location);
        customInstruments[location] = meta;

        return meta;
    }

    if (typeof name === 'string') {
        // if this is an id of the instrument, find it in instrumentMeta
        meta = instrumentsMetadata[name];
        if (!meta) {
            throw new Error('Cannot find metadata for instrument: ' +
                name + ', make sure you use correct name');
        }
        return meta;
    }

    throw new Error('Cannot recognize instrument name/meta "' + name + '", make sure you configure it correctly');
}
module.exports.resolveInstrumentMeta = resolveInstrumentMeta;

function updateInstrumentsMetadata(instrumentsMeta) {
    // iterate through repository and load instruments
    Object.keys(instrumentsMeta).forEach(function forEach(name) {
        var meta = instrumentsMeta[name];
        meta.name = name;

        var instrument = tryLocal(meta.module) ||
            Utils.tryRequire(meta.module);
        if (!instrument) {
            throw new Error('Cannot find instrument module ' + meta.module +
                ' for instrument: ' + name + ', make sure you install it');
        }
        instrumentsMeta[name].instrument = instrument;
        // refresh cache
        instrumentsMetadata[name] = instrumentsMeta[name];
    });

    return instrumentsMeta;
}
module.exports.updateInstrumentsMetadata = updateInstrumentsMetadata;

function tryLocal(name) {
    var root = 'service-instruments-ebay/';
    var pos = name.indexOf(root);
    if (pos !== -1) {
        name = '../' + name.substring(pos + root.length);
        return Utils.tryRequire(name);
    }
}

function loadInstrumentsMetadata(callback) {
    if (configValue) {
        callback && configValue.done(callback);
        return;
    }

    configValue = new AsyncValue();
    callback && configValue.done(callback);

    function resolveMetadata(value) {
        value.resolve({
            get metadata() {
                return instrumentsMetadata;
            }
        });
    }

    moduleConfig(module, function (err, cfg) {
        if (err) {
            resolveMetadata(configValue);
            configValue = undefined;
            return;
        }

        modConfig = cfg;

        try {
            updateInstrumentsMetadata(
                cfg.get('service-instruments-ebay:instruments-metadata'));
        }
        catch (err) {
            logger.error('failed to load instrument metadata', err);
        }

        // resolve either new or old value
        resolveMetadata(configValue);

        cfg.on('change', function () {
            try {
                updateInstrumentsMetadata(
                    cfg.get('service-instruments-ebay:instruments-metadata'));
            }
            catch (err) {
                logger.error('failed to refresh instruments metadata', err);
            }
        });
    });
}

loadInstrumentsMetadata();

module.exports.loadInstrumentsMetadata = loadInstrumentsMetadata;
Object.defineProperty(module.exports, 'modConfig', {
    get: function _get() {
        return modConfig;
    }
});
module.exports.reset = function reset() {
    configValue = undefined;
    modConfig = undefined;
    instrumentsMetadata = {};
};
