'use strict';

var NodeUtils = require('util');
var UrlUtils = require('url');
var Objutil = require('objutil');

var logger = require('logging-inc').logger('service-instruments-ebay/retry');

module.exports = function retry(pipe) {
    var retryCount = 0;
    var clientId = pipe.context.clientId;
    var maxRetryAttempts = 0;
    var _request;

    pipe.on('request', function onRequest(request, next) {
        // make a simple clone as some intruments can change it
        _request = Object.assign({}, request);
        logger.info('retry handler', clientId);
        var options = request;
        maxRetryAttempts = isIdempotent(options.method ||
            'GET') || options['force-retry'] ? options.retry || 0 : 0;

        next();
    });

    pipe.on('error', function onErr(err, next) {
        if (err.code === 'ETIMEDOUT' || err.code === 'ECONNRESET') {
            if (retryCount++ >= maxRetryAttempts) {
                return next();
            }

            logger.warn('Timed out calling the service %s, will retry, current try: %d, limit: %d',
                clientId, (retryCount - 1), maxRetryAttempts);

            // re-try again with original options
            pipe.request(Object.assign({}, _request));
            return;
        }

        next();
    });

};

/**
 * check if the HTTP method is idempotent
 *
 * @param {string} methodName
 * @return {boolean}
 */
function isIdempotent(methodName) {
    return ['GET', 'PUT', 'HEAD', 'OPTIONS', 'DELETE'].indexOf(methodName.toUpperCase()) !== -1;
}
