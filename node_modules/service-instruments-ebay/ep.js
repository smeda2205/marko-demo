'use strict';

var Objutil = require('objutil');

var logger = require('logging-inc').logger(
    'service-instruments-ebay/ep');

var RuntimeError = require('./lib/errors').RuntimeError;
var hmv = require('header-multi-value-ebay');
var Utils = require('./lib/sse-utils');

module.exports = function epHandler(pipe) {
    var app = pipe.context.app;
    var ebay = app && app.request && app.request.ebay;
    var experimentation = ebay ? ebay.experimentation : undefined;

    pipe.on('request', function onRequest(request, next) {
        var options = request;
        logger.info('ep handler', pipe.context.clientId);

        var isEnabled = true;
        if (typeof options.ep === 'boolean') {
            isEnabled = options.ep;
        }
        if (!isEnabled) {
            return next();
        }

        var err;
        if (experimentation && experimentation.preflightRequestHeaders) {
            options = Objutil.mixin(options, {
                headers: {},
                ep: options.ep || 'EPRESULT'
            });
            experimentation.preflightRequestHeaders(ebay,
                options, function onOptionsUpdate(err, options) {
                    request = options;
                    next(request);
                });
            return;
        }

        err = new RuntimeError(
            'Cannot add experimetation headers, experimetation context is not found, ' +
            'please make sure you use experimetation middleware');
        logger.warn(err);

        next();
    });

    let isChunkedResponse;

    pipe.on('response', function onResponse(response, next) {
        isChunkedResponse = Utils.isChunkedResponse(response);

        if (experimentation &&
            experimentation.handleResponseHeaders &&
            !isChunkedResponse && response && response.headers) {
            // only log from headers for non-chunked responses
            experimentation.handleResponseHeaders(ebay, response.headers);
        }

        next();
    });

    pipe.on('response:data', function onResponse(chunk, next) {
        if (experimentation &&
            isChunkedResponse &&
            Utils.isEpResponse(chunk)) {
            // handle EP chunk
            experimentation.handleResponseHeaders(ebay, chunk.data);
            pipe.resume();  // swallow EP chunk
            return;
        }

        next();
    });

};

function getHeaderMultiValue(input) {
    var hmvList = (input || "").split("=");
    var headerValue = {};
    var _key;

    if (hmvList) {
        hmvList.forEach(function iter(key, idx) {
            if (idx % 2 === 0) {
                _key = key;
            } else {
                headerValue[_key] = key;
            }

        });
        return headerValue;
    }
}
