'use strict';

var logger = require('logging-inc').logger(
    'service-instruments-ebay/tracking');

var RuntimeError = require('./lib/errors').RuntimeError;

var Utils = require('./lib/sse-utils');

module.exports = function trackingHandler(pipe, config) {
    var app = pipe.context.app;
    var request = app ? app.request : undefined;
    var ebay = request ? request.ebay : undefined;
    var tracking = ebay ? ebay.tracking : undefined;
    var trackingInFirstChunk = config && config.tracking && config.tracking.trackingInFirstChunk;

    pipe.on('request', function onRequest(request, next) {
        logger.info('tracking handler ', pipe.context.clientId);

        var options = request;
        if (options.tracking === false) {
            return next();
        }

        if (tracking) {
            options.headers = options.headers || {};
            tracking.addTrackingHeadersForRequest(options.headers);
        } else {
            logger.warn(new RuntimeError(
                'Cannot add tracking, the tracking context is not found, ' +
                'please make sure you use tracking middleware'));
        }

        next();
    });

    let headers, doneTracking, isChunkedResponse;

    pipe.on('response', function onResponse(response, next) {
        isChunkedResponse = Utils.isChunkedResponse(response);
        headers = response.headers;

        if (tracking && (trackingInFirstChunk || !isChunkedResponse && response.headers)) {
            doneTracking = true;
            tracking.handleResponseHeaders(response.headers);
        }

        next();
    });

    pipe.on('response:data', function onResponse(chunk, next) {
        if (tracking &&
            isChunkedResponse &&
            Utils.isTrackingResponse(chunk)) {

            if (!doneTracking) {
                doneTracking = true;
                tracking.handleResponseHeaders(chunk.data);
            }
            pipe.resume();  // swallow tracking chunk
            return;
        }

        next();
    });

    /**
     * To handle Experience services using chunked reponse but using response headers
     * instread of tracking chunck for tracking.
     */
    pipe.on('response:end', function onResponse(next) {
        if (headers &&
            tracking &&
            !doneTracking) {

            tracking.handleResponseHeaders(headers);
        }

        next();
    });
};
