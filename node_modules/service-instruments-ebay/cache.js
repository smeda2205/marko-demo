'use strict';

var Assert = require('assert');

var tryRequire = require('try-require');

var logger = require('logging-inc').logger('caching');
var cacheProviders = {};

module.exports = function cache(pipe, config) {
    var provider;
    var key;
    var options;

    pipe.on('request', function onRequest(request, next) {
        logger.info('cache handler', pipe.context.clientId);
        options = request;
        var enabled = options.cache && options.cacheKey;
        if (!enabled) {
            // skip
            return next();
        }

        var providerModule = options.cache['cache-provider'] ||
            config && config['cache-provider'];
        Assert.ok(providerModule, 'Cache provider is not specified in service client configuration');

        provider = cacheProviders[providerModule] ||
            (cacheProviders[providerModule] = tryRequire(providerModule));

        if (!provider) {
            throw new Error('Cache provider cannot be found, name: "' +
                providerModule + '"');
        }

        provider.get(options.cacheKey, function(err, result) {
            if (result) {
                return pipe.respond({
                    body: result.body,
                    statusCode: result.statusCode,
                    fromCache: true
                });
            }

            next();
        });
    });

    // continue request flow
    pipe.on('response', function onResponse(response, next) {
        var result = {
            body: response.body,
            statusCode: response.statusCode
        };

        if (provider) {
            provider.put(options.cacheKey, result, function(err, result) {
                if (err) {
                    logger.error('Failed to save in cache', err);
                }
            });
        }

        // continue response flow
        next();
    });
};

module.exports.reset = function reset() {
    cacheProviders = {};
};
