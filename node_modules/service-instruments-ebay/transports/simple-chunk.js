'use strict';

var cal = require('cal');

var Httpunch = require('httpunch'),
    JsonStream = require('streams-ebay').JsonStream,
    ChunkedStream = require('streams-ebay').ChunkedStream,
    Hoek = require('hoek'),
    httpfy = require('./http-api'),
    Utils = require('../lib/utils');

var Objutil = require('objutil');
var StreamUtils = require('./stream-utils');

/**
 * Generic transport is just a passthrough to httpunch (regular http request) with JSON parsing for JSON content-type.
 * @type {exports}
 */
module.exports = function simpleChunkTransport(pipe, config) {
    pipe.on('request', function (request) {
        var st = Date.now();
        var req;
        var responseStream;

        var onceError = Hoek.once(function onErr(err) {
            pipe.throw(err);
        });

        var jsonStream = new JsonStream();

        jsonStream
        .on('object', function onstreamdata(model) {
            // record time taken for obtaining specific module
            cal.createTransaction('Model', model.name, function(
                err, event) {
                event.timestamp = st;
                event.complete();
            });

            responseStream.write(model);
        })
        .once('error', function onstreamerr(err) {
            var statusCode = req.res && req.res.statusCode;
            statusCode = statusCode >= 400 ? statusCode : undefined;
            err.statusCode = statusCode || 'ParseError';
            onceError(err);
        })
        .once('finish', function onstreamfinish() {
            responseStream.end();
        });

        config && Objutil.merge(config, request);
        req = StreamUtils.startStream(request);
        req.on('error', onceError);
        req.once('response', function onResponse(response) {
            if (response.statusCode >= 300) {
                /** Handle this for redirection cases separately..
                    Redirections are valid data
                ***/
                response.once('finish', function onFinish() {
                    pipe.respond(req.res);
                });
                return;
            }
            responseStream = pipe.streamResponse(response);
            var stream = new ChunkedStream();
            stream.pipe(jsonStream);
            response.pipe(stream);
        });

        req.end();
    });

    httpfy(pipe);
};
