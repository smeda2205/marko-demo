'use strict';

var NodeUtils = require('util');

var template = require('underscore').template;
var Cal = require('cal');
var Hmv = require('header-multi-value-ebay');
var Httpunch = require('httpunch');
var Objutil = require('objutil');
var Hmv = require('header-multi-value-ebay');
var debug = require('debug')('service-instruments-ebay/http-transport');

var httpfy = require('./http-api');
var TransportUtils = require('./utils');
var Client = httpfy.Client;
var Request = httpfy.Request;

module.exports = function transport(pipe, config) {
    pipe.on('request', function onRequest(request) {
        var options = request;
        config && Objutil.merge(config, options);

        TransportUtils.updateRequest(options);
        // add x-forwarded-for
        TransportUtils.addXFF(pipe, request, config);

        var reply = function reply(response) {
            pipe.respond(response);
        };

        if (process.domain) {
            reply = process.domain.bind(reply);
        }

        debug('# request', options);
        var req = nsBindRequest(Httpunch.request(options));
        req.end(function (error, response) {

            if (options.debug === true || options.debug === 'true') {
                TransportUtils.generateHeadersInfo(options.headers);
                TransportUtils.generateMetricsEvents(req.metrics);
            }

            if (error) {
                pipe.throw(error);
                return;
            }

            var encoding = response.headers && response.headers['content-encoding'];
            if (encoding !== 'gzip' && Httpunch.utils.isJSON(response)) {
               response.body = Httpunch.utils.tryParse(response.body);
            }

            reply(response);
        });
    });

    httpfy(pipe);
};

function nsBindRequest(req) {
    process.domain && process.domain.add(req);

    return req;
}
