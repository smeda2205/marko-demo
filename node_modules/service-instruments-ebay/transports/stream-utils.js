'use strict';

var Httpunch = require('httpunch');
var debug = require('debug')('service-instruments-ebay/stream');
var Utils = require('../lib/utils');
var TransportUtils = require('./utils');

module.exports.startStream = function startStream(request) {

    TransportUtils.updateRequest(request);

    debug('# request:', request);
    var req = Httpunch.request(request);
    process.domain && process.domain.add(req);
    var httpErr;
    var dataBody;

    req.once('response', function onres(res) {
        req.res = res;
        if (res.statusCode >= 300 && res.statusCode < 400) {
            Httpunch.utils.read(res, function(err, result) {
                res.body = result;
                req.res.emit('finish');
            });
        } else if (res.statusCode >= 400) {

            httpErr = new Error('HTTP ' + res.statusCode);
            httpErr.statusCode = res.statusCode;

            httpErr.message = '';
            httpErr.res = res;
            Httpunch.utils.read(res, function(err, result) {
                if (result) {
                    res.body = result;
                    httpErr.message += result.toString();
                }
                req.emit('error', httpErr);
            });
        }

        // TODO: enable below once response timeout becomes available
        // res.once('error', function (err) {
        //     if (err.code === 'ECONNRESET') {
        //         err.code = 'ETIMEDOUT';
        //     }
        //     reply(err);
        // });

    });
    req.once('finish', function () {
        if (request.debug === true || request.debug === 'true') {
            Utils.generateHeadersInfo(request.headers);
            Utils.generateMetricsEvents(req.metrics);
        }
    });
    req.once('abort', function () {
        var err = new Error('Connection aborted');
        err.code = 'ETIMEDOUT';
        this.emit('error', err);
    });

    return req;
};
