'use strict';

var Objutil = require('objutil');
var requestLocal = require('request-local');
var SOA_HEADERS = require('./soa-headers');
var logger = require('logging-inc').logger('service-instruments-ebay/soap');

module.exports.adapt = function adaptToEbay(options, wsdl) {
    var headers = {};

    var tns = wsdl.definitions.xmlns.tns;
    var svcName = wsdl.definitions.$name;
    var guidInfo = getGuid() || 'no-guid';

    headers[SOA_HEADERS.USECASE_NAME] = svcName + 'Client';
    if (tns) {
        headers[SOA_HEADERS.SERVICE_NAME] = '{' + tns + '}' + svcName;
    } else {
        headers[SOA_HEADERS.SERVICE_NAME] = svcName;
    }

    headers[SOA_HEADERS.REQUEST_DATA_FORMAT] = 'XML';
    headers[SOA_HEADERS.REQUEST_GUID] = guidInfo;
    headers[SOA_HEADERS.RESPONSE_DATA_FORMAT] = 'XML';
    headers[SOA_HEADERS.SERVICE_OPERATION_NAME] = options.operation;
    headers[SOA_HEADERS.VERSION] = '1.0.0';

    var rlogid = getRLogId();
    if (rlogid) {
        headers.rlogid = rlogid;
    }

    Objutil.merge(headers, options.headers);
    return options;
};

function getGuid() {
    var ebay;
    try {
        var req = requestLocal.data.request;
        return req.ebay && req.ebay.getGuid();
    } catch (e) {
        logger.warn('soap:getGuid request-local error');
    }
}

function getRLogId() {
    var ebay;
    try {
        var req = requestLocal.data.request;
        return req.ebay && req.ebay.getRlogId();
    } catch (e) {
        logger.warn('soap:getRLogId request-local error');
    }
}