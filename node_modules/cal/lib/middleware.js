'use strict';

var nsutils = require('./nsutils');
var threads = require('./threads');
var constants = require('./constants');
var apputil = require('./apputil');
var tryRequire = require('try-require');
var correlationId = require('./correlationId');

var calLogger, appContext, modconfig;

module.exports = function middleware(options) {
    options = options || {};
    var enableBuffering = (typeof options.enableBuffering === 'boolean') ? options.enableBuffering : false;
    var enableNestedCal = options.enableNestedCal === undefined ? false : options.enableNestedCal;
    var releaseTimeout = options.releaseTimeout || 25000; //auto release timeout 25s
    var bufferFlushDelay = options.bufferFlushDelay || 0;

    calLogger = require('./index');
    appContext = require('app-context-ebay');
    modconfig = require('module-config-inc');

    var config = modconfig(module);
    configCal(options, config);

    config.on('changed', function(){
        configCal(options, config);
    });

    return function cal(req, res, next) {
        var isReleased = false;
        var releaseTimer;

        nsutils.run(
            req, res, function () {
            nsutils.set(constants.BUFFER_FLUSH_DELAY, bufferFlushDelay);
            nsutils.set(constants.IS_BUFFERING, enableBuffering);
            nsutils.set(constants.IS_NESTED_CAL, enableNestedCal);
            nsutils.set(constants.RELEASE_TIMEOUT, releaseTimeout);
            nsutils.set(constants.TX, null);
            var threadId = threads.getNextThreadId();
            nsutils.set(constants.THREAD_ID, threadId);
            req.threadId = threadId;    //For backward compatibility
            nsutils.set('correlationId', correlationId(req));
            // reset counter
            nsutils.set('nextId', null);

            var releaseThreadId = function releaseThreadId() {
                if (isReleased) {
                    return;
                }
                isReleased = true;
                threads.releaseThreadId(threadId);
                clearTimeout(releaseTimer);
                releaseTimer = undefined;
                res.removeListener('close', releaseThreadId);
                res.removeListener('finish', releaseThreadId);
                res.removeListener('error', releaseThreadId);
            };
            res.once('close', releaseThreadId);
            res.once('finish', releaseThreadId);
            res.once('error', releaseThreadId);

            //Auto release the CAL transaction, in case of error
            releaseTimer = setTimeout(function () {
                releaseThreadId();
            }, releaseTimeout);

            next();
        });
    };
};

function configCal(options, cfg) {
    var config = options.cal || {};
        config.settings = cfg.get('commons:cal');
        config.settings.poolname = appContext.poolName;

    var type = config.type || 'cal',
        format = config.format || 'cal';

    calLogger.setDefaultWriteStream(type, config.settings);
    calLogger.defaults.formatter = calLogger.formatter[type === 'cal' ? 'cal' : format];
}
