'use strict';

var constants = require('./constants');
var debug = require('debug')('cal:nsutils');
var Domain = require('domain');

Domain.create = (function (original) {
    return function clsCreateDomain() {
        var _domain = original.apply(Domain, arguments);
        // inherit parent context if any or create new one if root transaction
        _domain._cal = process.domain && process.domain._cal ?
            Object.create(process.domain._cal) : {};
        return _domain;
    };
})(Domain.create);

module.exports = {
    run: function run(req, res, next) {
        var args = [].slice.call(arguments);
        next = args.pop();

        var parentDomain = process.domain;
        var calCtx = parentDomain && parentDomain._cal;

        req = args.shift() || calCtx && calCtx.request;
        res = args.shift() || calCtx && calCtx.response;

        var domain = Domain.create();
        if (req) {
            domain.add(req);
            domain._cal.request = req;
        }
        if (res) {
            domain.add(res);
            domain._cal.response = res;
        }

        // hook to the parentDomain coontext for error dispatching if any
        // works in 0.12+
        // parentDomain && parentDomain.add(domain);

        // workaround for 0.10 to pipe error into parent domain
        domain.on('error', function domainError(err) {
            if (parentDomain) {
                return parentDomain.emit('error', err);
            }
            process.emit('uncaughtException', err);
        });

        domain.run(next);
    }
};

module.exports.get = module.exports.getValue = function getValue(name, defaultValue) {
    try {
        return process.domain._cal[name];
    }
    catch (err) {
        debug('getValue: no CAL context for name: %s, value: %s', name, defaultValue);
        return defaultValue;
    }
};

module.exports.set = module.exports.setValue = function setValue(name, value) {
    try {
        process.domain._cal[name] = value;
    }
    catch (err) {
        debug('setValue: no CAL context, using non context storage for name: %s', name);
    }
};
