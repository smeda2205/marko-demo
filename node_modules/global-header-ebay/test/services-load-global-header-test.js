'use strict';

var chai = require('chai');
var shell = require('shelljs'),
    path = require('path');
var assert = chai.assert;
chai.config.includeStack = true;
require('chai').should();

describe.skip('global-header-ebay/services Should get PreProd Content', function() {

    var _oldEnv;
    beforeEach(function(done) {
        _oldEnv = process.env.NODE_ENV;
        process.env.NODE_ENV = 'pre-production';
        process.env.DEPLOY_ENV = 'pre-production';
        shell.rm('-rf', path.join(__dirname,'../.beans/*.configbean'));
        require('module-config-inc').cache.clear();
        done();

    });

    afterEach(function(done) {
      if (_oldEnv) {
        process.env.NODE_ENV = _oldEnv;
        process.env.DEPLOY_ENV = _oldEnv;
      }
      else {
        delete process.env.NODE_ENV;
        delete process.env.DEPLOY_ENV;
      }
      done();
    });

    it('should generate a footer query without categoryId and get good footer response when there is the categoryId is empty', function(done) {

        var services = require('../lib/services');

        services.loadHeader({app: 'NODEJS'}, function(err, result) {
            assert.ok(!err);
            assert.ok(result);
            assert.ok(result.html);
            var resultVersion = getVersionBySource(result.html);
            assert.equal(resultVersion!== null, true);
            done();
        });
    });


});

function getVersionBySource(sourceHtml) {
    var versionText = '<!--rvr:';
    var htmlCommentEnd = '-->';

    if (sourceHtml) {
        var versionIdx = sourceHtml.indexOf(versionText);
        var version = sourceHtml.substring(versionIdx + versionText.length);
        return version.substring(0, version.indexOf(htmlCommentEnd));
    } else {
        return null;
    }
}
