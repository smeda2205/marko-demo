'use strict';
require('request-local');

var chai = require('chai'),
    http = require('http'),
    request = require('request'),
    express = require('express'),
    servicecore = require('servicecore'),
    cookiesEbay = require('cookies-ebay/middleware'),
    commons = require('commons-ebay/middleware'),
    locale = require('locale-ebay'),
    globalHeader = require('../middleware'),
    marko = require('marko'),
    assert = chai.assert,
    patternCount = function(pattern, text) {
        var match = text.match(pattern);
        return match ? match.length : 0;
    },
    dust;

describe('AMP Dust', function() {
    before(function() {
        dust = require('dustjs-linkedin');
        require('../dust').registerHelpers(dust);
        process.env.NODE_ENV = 'test';
    });

    it('AMP Dust: CSS', function(next) {
        var code = '{@gh-configure layout="MIN" var="mweb"/}<html><head><style amp-custom>{@gh-amp-css/}</style></head></html>'; // eslint-disable-line max-len
        dust.renderSource(code, { dependencies: [] }, function(err, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.strictEqual(patternCount(/<style/gim, out), 1, 'There should be one <style> open tag');
            assert.strictEqual(patternCount(/<\/style>/gim, out), 1, 'There should be one </style> close tag');
            assert.include(out, 'background', 'Should include a background specifc style');
            assert.notInclude(out, '!important', 'Should not include the !important rule');
            next();
        });
    });

    it('AMP Dust: CSS with wrong variation', function(next) {
        var code = '{@gh-configure var="mweb"/}<html><head><style amp-custom>{@gh-amp-css/}</style></head></html>'; // eslint-disable-line max-len
        dust.renderSource(code, { dependencies: [] }, function(err, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.strictEqual(patternCount(/<style[^>]*>/gim, out), 1, 'There should be one <style> open tag');
            assert.strictEqual(patternCount(/<\/style>/gim, out), 1, 'There should be one </style> close tag');
            assert.notInclude(out, '!important', 'Should not include the !important rule');
            next();
        });
    });

    it('AMP Dust: Header', function(next) {
        var code = '{@gh-configure layout="MIN" var="mweb"/}<html><head></head><body>{@gh-amp-header/}</body></html>'; // eslint-disable-line max-len
        dust.renderSource(code, { dependencies: [] }, function(err, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.isFalse(/<style[^>]*>/gim.test(out), 'There should be no <style> tag');
            assert.isFalse(/<script[^>]*>/gim.test(out), 'There should be no <script> tag');
            assert.isFalse(/<!--[^\[>]*-->/gim.test(out), 'There should be no HTML comments <!--xxx-->');
            assert.strictEqual(patternCount(/<header[^>]*>/gim, out), 1, 'There should be one <header> open tag');
            assert.strictEqual(patternCount(/<\/header>/gim, out), 1, 'There should be one </header> close tag');
            assert.notInclude(out, '_sp', 'Should not include the custom _sp attribute in any of the HTML tags');
            next();
        });
    });

    it('AMP Dust: Header with wrong variation', function(next) {
        var code = '{@gh-configure layout="MIN"/}<html><head></head><body>{@gh-amp-header/}</body></html>'; // eslint-disable-line max-len
        dust.renderSource(code, { dependencies: [] }, function(err, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.isFalse(/<style[^>]*>/gim.test(out), 'There should be no <style> tag');
            assert.isFalse(/<script[^>]*>/gim.test(out), 'There should be no <script> tag');
            assert.isFalse(/<!--[^\[>]*-->/gim.test(out), 'There should be no HTML comments <!--xxx-->');
            assert.strictEqual(patternCount(/<header[^>]*>/gim, out), 1, 'There should be one <header> open tag');
            assert.strictEqual(patternCount(/<\/header>/gim, out), 1, 'There should be one </header> close tag');
            assert.notInclude(out, '_sp', 'Should not include the custom _sp attribute in any of the HTML tags');
            next();
        });
    });

    it('AMP Dust: Footer', function(next) {
        var code = '{@gh-configure layout="MIN" var="mweb"/}<html><head></head><body>{@gh-amp-footer/}</body></html>'; // eslint-disable-line max-len
        dust.renderSource(code, { dependencies: [] }, function(err, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.isFalse(/<style[^>]*>/gim.test(out), 'There should be no <style> tag');
            assert.isFalse(/<script[^>]*>/gim.test(out), 'There should be no <script> tag');
            assert.strictEqual(patternCount(/<footer[^>]*>/gim, out), 1, 'There should be one <footer> open tag');
            assert.strictEqual(patternCount(/<\/footer>/gim, out), 1, 'There should be one </footer> close tag');
            assert.notInclude(out, '_sp', 'Should not include the custom _sp attribute in any of the HTML tags');
            next();
        });
    });

    it('AMP Dust: Footer with wrong variation', function(next) {
        var code = '{@gh-configure layout="MIN"/}<html><head></head><body>{@gh-amp-footer/}</body></html>'; // eslint-disable-line max-len
        dust.renderSource(code, { dependencies: [] }, function(err, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.isFalse(/<style[^>]*>/gim.test(out), 'There should be no <style> tag');
            assert.isFalse(/<script[^>]*>/gim.test(out), 'There should be no <script> tag');
            assert.strictEqual(patternCount(/<footer[^>]*>/gim, out), 1, 'There should be one <footer> open tag');
            assert.strictEqual(patternCount(/<\/footer>/gim, out), 1, 'There should be one </footer> close tag');
            assert.notInclude(out, '_sp', 'Should not include the custom _sp attribute in any of the HTML tags');
            next();
        });
    });
});

var app,
    server,
    port;

var testCookies = {};

app = express();
app.use(commons());
app.use(servicecore());
app.use(cookiesEbay());
app.use(function testCookieModifier(req, res, next) {
    (Object.keys(testCookies) || []).forEach(function(name) {
        req.ebay.cookies.setCookieValue(name, testCookies[name]);
    });
    next();
});

app.use(locale());
app.use(globalHeader());

app.get('/marko', function(req, res) {
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    var templateName = req.query.template;
    var template = marko.load(require.resolve('./marko/' + templateName + '.marko'));
    template.render({}, res);
});

app.use(function(err, req, res) {
    console.error(err.stack);
    res.send(500, 'Server error');
});

describe('AMP Marko', function() {
    before(function(done) {
        try {
            server = http.createServer(app);
            server.on('listening', function() {
                port = server.address().port;
                console.log('Listening on port ' + port);
                done();
            });
            server.listen();
        } catch (e) {
            console.error('ERROR: ', (e.stack || e));
            done(e);
        }
    });

    after(function() {
        server.close();
    });

    afterEach(function() {
        testCookies = {};
    });

    it('AMP Marko: CSS', function(next) {
        request('http://localhost:' + port + '/marko?template=amp-css', function(err, response, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.strictEqual(patternCount(/<style/gim, out), 0, 'There should be zero <style> tags');
            assert.include(out, 'background', 'Should include a background specifc style');
            assert.notInclude(out, '!important', 'Should not include the !important rule');
            next();
        });
    });

    it('AMP Marko: header', function(next) {
        request('http://localhost:' + port + '/marko?template=amp-header', function(err, response, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.isFalse(/<style[^>]*>/gim.test(out), 'There should be no <style> tag');
            assert.isFalse(/<script[^>]*>/gim.test(out), 'There should be no <script> tag');
            assert.strictEqual(patternCount(/<header[^>]*>/gim, out), 1, 'There should be one <header> open tag');
            assert.strictEqual(patternCount(/<\/header>/gim, out), 1, 'There should be one </header> close tag');
            assert.notInclude(out, '_sp', 'Should not include the custom _sp attribute in any of the HTML tags');
            next();
        });
    });

    it('AMP Marko: footer', function(next) {
        request('http://localhost:' + port + '/marko?template=amp-footer', function(err, response, out) {
            if (err) {
                next(err);
                return;
            }

            assert.ok(out);
            assert.isFalse(/<style[^>]*>/gim.test(out), 'There should be no <style> tag');
            assert.isFalse(/<script[^>]*>/gim.test(out), 'There should be no <script> tag');
            assert.strictEqual(patternCount(/<footer[^>]*>/gim, out), 1, 'There should be one <footer> open tag');
            assert.strictEqual(patternCount(/<\/footer>/gim, out), 1, 'There should be one </footer> close tag');
            assert.notInclude(out, '_sp', 'Should not include the custom _sp attribute in any of the HTML tags');
            next();
        });
    });
});
