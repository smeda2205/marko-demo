'use strict';

var Assert = require('assert');
var Async = require('async');

var Fallback = require('../lib/fallback');
var Genutils = require('../scripts/utils');
var config = require('../scripts/config.json');

describe(__filename, function () {
    describe('key generation', function () {

        it('should generate key from empty', function () {
            var key = Fallback.generateKey({}, {}, 'prefix');
            Assert.equal('prefix', key);
        });

        it('should generate key from default', function () {
            var key = Fallback.generateKey({}, {
                foo: 'bar'
            }, 'prefix');
            Assert.equal('prefix_foo_bar', key);
        });

        it('should generate custom key and ignore default', function () {
            var key = Fallback.generateKey({
                foo: 'qaz'
            }, {
                foo: 'bar'
            }, 'prefix');
            Assert.equal('prefix_foo_qaz', key);
        });

        it('should generate custom key and ignore extra options', function () {
            var key = Fallback.generateKey({
                foo: 'qaz',
                wsx: 'edc'
            }, {
                foo: 'bar'
            }, 'prefix');
            Assert.equal('prefix_foo_qaz', key);
        });

        it('should generate custom key from default and custom', function () {
            var key = Fallback.generateKey({
                wsx: 'edc'
            }, {
                foo: 'bar',
                wsx: 'vbn'
            }, 'prefix');
            Assert.equal('prefix_foo_bar__wsx_edc', key);
        });

    });

    describe('header key generation', function () {
        it('should generate default header key', function () {
            var key = Fallback.generateHeaderKey();
            Assert.equal('header_type_FULL__siteid_0__var___secure_0', key);
        });

        it('should generate custom header key', function () {
            var key = Fallback.generateHeaderKey({
                siteid: 77
            });
            Assert.equal('header_type_FULL__siteid_77__var___secure_0', key);
        });

        it('should generate custom header key, secure', function () {
            var key = Fallback.generateHeaderKey({
                siteid: 77,
                secure: 1
            });
            Assert.equal('header_type_FULL__siteid_77__var___secure_1', key);
        });

        it('should generate custom header key, secure, type', function () {
            var key = Fallback.generateHeaderKey({
                type: 'MIN',
                siteid: 77,
                secure: 1
            });
            Assert.equal('header_type_MIN__siteid_77__var___secure_1', key);
        });

        it('should generate custom header key, secure, type, var', function () {
            var key = Fallback.generateHeaderKey({
                type: 'MIN',
                siteid: 77,
                secure: 1,
                var: 'mweb'
            });
            Assert.equal('header_type_MIN__siteid_77__var_mweb__secure_1', key);
        });

    });

    describe('footer key generation', function () {
        it('should generate default footer key', function () {
            var key = Fallback.generateFooterKey();
            Assert.equal('footer_type_NORMAL__siteid_0__var___secure_0', key);
        });

        it('should generate custom footer key', function () {
            var key = Fallback.generateFooterKey({
                siteid: 77
            });
            Assert.equal('footer_type_NORMAL__siteid_77__var___secure_0', key);
        });

        it('should generate custom footer key, secure', function () {
            var key = Fallback.generateFooterKey({
                siteid: 77,
                secure: 1
            });
            Assert.equal('footer_type_NORMAL__siteid_77__var___secure_1', key);
        });

        it('should generate custom footer key, secure, type', function () {
            var key = Fallback.generateFooterKey({
                type: 'MIN',
                siteid: 77,
                secure: 1
            });
            Assert.equal('footer_type_MIN__siteid_77__var___secure_1', key);
        });

        it('should generate custom footer key, secure, type, var', function () {
            var key = Fallback.generateFooterKey({
                type: 'MIN',
                siteid: 77,
                secure: 1,
                var: 'mweb'
            });
            Assert.equal('footer_type_MIN__siteid_77__var_mweb__secure_1', key);
        });

    });

    describe('loadResource', function () {

        it('should load resource', function (next) {
            Fallback.loadResource('footer_type_MIN__siteid_77__var_mweb__secure_1',
            function (err, spec) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(spec.html);
                next();
            });
        });

        it('should load all resources for header', function (next) {
            this.timeout(40000);
            Fallback.configure();
            var perms = Genutils.generateAllHeaderPermutations(config.variations);

            Async.eachLimit(perms, 10, function iter(options, next) {
                Fallback.getHeader(options, function (err, spec) {
                    Assert.ok(!err, err && err.stack);
                    Assert.ok(spec);
                    next();
                });
            }, function validateCache(err) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(perms.length ===
                    Object.keys(Fallback.cache.cacheStore.cache).length ||
                    perms.length === 468
                );
                next();
            });
        });

        it('should not fail when no match found and load generic header', function (next) {
            this.timeout(40000);
            Fallback.configure();

            Async.series({
                expected: function (next) {
                    Fallback.getHeader({
                        type: 'FULL',
                        siteid: 71,
                        var: '',
                        secure: 0
                    },
                    function (err, spec) {
                        next(null, spec);
                    });
                },
                actual: function (next) {
                    Fallback.getHeader({
                        type: 'weird',
                        siteid: 71,
                        var: 'site',
                        secure: 0
                    }, function (err, spec) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(spec);
                        next(null, spec);
                    });
                }
            }, function validate(err, specs) {
                setImmediate(function () {
                    Assert.ok(!err, err && err.stack);
                    Assert.deepEqual(specs.expected, specs.actual);
                    next();
                });
            });

        });

        it('should not fail when no match found and load generic header, all the way to most generic', function (next) {
            this.timeout(25000);
            Fallback.configure();

            Async.series({
                expected: function (next) {
                    Fallback.getHeader({
                        type: 'FULL',
                        siteid: 0,
                        var: '',
                        secure: 1
                    },
                    function (err, spec) {
                        next(null, spec);
                    });
                },
                actual: function (next) {
                    Fallback.getHeader({
                        type: 'Foo',
                        siteid: 7100,
                        var: 'sss',
                        secure: 1
                    }, function (err, spec) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(spec);
                        next(null, spec);
                    });
                }
            }, function validate(err, specs) {
                setImmediate(function () {
                    Assert.ok(!err, err && err.stack);
                    Assert.deepEqual(specs.expected, specs.actual);
                    next();
                });
            });

        });

        it('should not fail when no match found and load generic footer', function (next) {
            this.timeout(25000);
            Fallback.configure();

            Async.series({
                expected: function (next) {
                    Fallback.getFooter({
                        type: 'FULL',
                        siteid: 71,
                        var: '',
                        secure: 0
                    },
                    function (err, spec) {
                        next(null, spec);
                    });
                },
                actual: function (next) {
                    Fallback.getFooter({
                        type: 'weird',
                        siteid: 71,
                        var: 'site',
                        secure: 0
                    }, function (err, spec) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(spec);
                        next(null, spec);
                    });
                }
            }, function validate(err, specs) {
                setImmediate(function () {
                    Assert.ok(!err, err && err.stack);
                    Assert.deepEqual(specs.expected, specs.actual);
                    next();
                });
            });

        });

        it('should not fail when no match found and load generic footer, all the way to most generic', function (next) {
            this.timeout(25000);
            Fallback.configure();

            Async.series({
                expected: function (next) {
                    Fallback.getFooter({
                        type: 'NORMAL',
                        siteid: 0,
                        var: '',
                        secure: 1
                    },
                    function (err, spec) {
                        next(null, spec);
                    });
                },
                actual: function (next) {
                    Fallback.getFooter({
                        type: 'Foo',
                        siteid: 7100,
                        var: 'sss',
                        secure: 1
                    }, function (err, spec) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(spec);
                        next(null, spec);
                    });
                }
            }, function validate(err, specs) {
                setImmediate(function () {
                    Assert.ok(!err, err && err.stack);
                    Assert.deepEqual(specs.expected, specs.actual);
                    next();
                });
            });

        });

        it('should load all resources for footer', function (next) {
            this.timeout(25000);
            Fallback.configure();
            var perms = Genutils.generateAllFooterPermutations(config.variations);

            Async.eachLimit(perms, 10, function iter(options, next) {
                Fallback.getFooter(options, function (err, spec) {
                    Assert.ok(!err, err && err.stack);
                    Assert.ok(spec);
                    next();
                });
            }, function validateCache(err) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(perms.length ===
                    Object.keys(Fallback.cache.cacheStore.cache).length ||
                    perms.length === 468,
                    `Actual permutation length ${perms.length}`
                );
                next();
            });
        });
    });

    describe('getResource', function () {
        it('should load resource', function (next) {
            Fallback.getResource('footer_type_MIN__siteid_77__var_mweb__secure_1',
            function (err, spec) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(spec.html);
                next();
            });
        });
    });

    describe('cache', function () {
        var key = 'footer_type_MIN__siteid_77__var_mweb__secure_1';

        before(function () {
            Fallback.configure({
                freeDelay: 300
            });
        });

        it('should cache resource', function (next) {
            Fallback.getResource(key,
            function (err, spec) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(spec.html);
                Fallback.cache.get(key, function onRead(err, data) {
                    Assert.ok(!err, err && err.stack);
                    Assert.ok(data);
                    next();
                });
            });
        });

        it('wait for cache cleanup', function (next) {
            setTimeout(next, 350);
        });

        it('should clean cache', function (next) {
            Fallback.cache.get(key, function onRead(err, data) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(!data);
                next();
            });
        });

    });
});
