'use strict';

var Path = require('path');
var assert = require('assert'),
    cal = require('cal'),
    globalHeader = require('../'),
    middleware = require('../middleware'),
    nock = require('nock');

var Async = require('async');
var Cache = require('../lib/cache');
var services = require('../lib/services');
var markoCompiler = require('marko-v2/compiler');
var cheerio = require('cheerio');
var marko = require('marko-v2');
var Shelljs = require('shelljs');
var modConfig = require('module-config-inc');

cal.setDefaultWriteStream('console');

describe(__filename, function () {

    before(function () {
        Shelljs.rm('-rf', Path.resolve(__dirname, '../.beans/nodejs.config.global*'));
        Cache.configure({
            enable: true,
            max: 2000,          //Max cache size
            maxAge: 1800000        //Max Age (30 mins)
        });
    });

    describe('fallback is disabled', function () {

        var _compile = markoCompiler.compile;
        var _load = cheerio.load;
        var _markoload = marko.load;
        var _getBackup;
        var _get;

        after(function () {
            nock.cleanAll();
        });

        afterEach(function () {
            markoCompiler.compile = _compile;
            cheerio.load = _load;
            marko.load = _markoload;
            Cache.reset();
        });

        it('should not crash node when first request is 500', function (next) {

            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(500, 'Test error')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(500, 'Test error');

            var req = {};
            req.ip = '127.0.0.1';
            req.query = {
                '_ul': 'RUru_RU'
            };

            middleware()({
                route: {
                    config: {
                        'global-header': {
                            preload: true
                        }
                    }
                }
            }, {}, function () {

                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);

                            svr.done();
                            nock.cleanAll();
                            next();
                        });
                    });
            });

        });

        it('should not crash node when response is html is bad', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, 'Bad html<D')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, 'Bad response');

            var req = {};
            req.ip = '127.0.0.1';

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);
                            assert.ok(/Unexpected token B/.test(err.message));

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when html parsing is bad', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            )
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            cheerio.load = function boom() {
                throw new Error('Parse error');
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);
                            assert.equal('Parse error', err.message);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko compiler fails', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            )
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            markoCompiler.compile = function boom() {
                throw new Error('Test error');
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);
                            assert.equal('Test error', err.message);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko template load fails', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            )
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            marko.load = function boom() {
                throw new Error('Marko load error');
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);
                            assert.equal('Marko load error', err.message);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko template render fails', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            )
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            marko.load = function prepareBoom() {
                var ret = _markoload.apply(marko, arguments);
                ret.render = function boom() {
                    throw new Error('Marko render error');
                };
                return ret;
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);
                            assert.equal('Marko render error', err.message);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko template render fails and serve backupCache',
        function (next) {
            this.timeout(5000);
            var backupCount = 0;
            var renderValidation = 0;
            var backupRenderValidation = 0;

            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000        //Max Age (30 mins)
            });

            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100')
            .reply(200, function () {
                _get = Cache.cache.get;
                _getBackup = Cache.cache.getBackup;
                // mocking backup cache
                Cache.cache.getBackup = function (key) {
                    backupCount++;
                    return {
                        render: function (model, context) {
                            backupRenderValidation++;
                            context.end();
                        }
                    };
                };
                Cache.cache.get = function (key) {
                    // or mock expired cache entry
                    // to trigger backup cache and refresh
                };

                marko.load = function prepareBoom() {
                    var ret = _markoload.apply(marko, arguments);
                    ret.render = function boom() {
                        renderValidation++;
                        throw new Error('Marko render error');
                    };
                    return ret;
                };

                return {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                };
            });

            var req = {};
            req.ip = '127.0.0.1';

            middleware()({}, {}, function () {

                services.loadHeader({
                        pool: 'rand0100'
                    },
                    function (err, header) {

                        assert.ok(!err, err && err.stack);
                        var renderCount = 0;
                        header.render({}, {
                            end: function () {
                                renderCount++;
                            }
                        });
                        setTimeout(function validate() {
                            assert.ok(!err);
                            assert.equal(1, backupCount);
                            assert.equal(1, backupRenderValidation);
                            assert.equal(1, renderCount);

                            svr.done();
                            next();
                        }, 500);

                    });

            });

        });

        it('should not crash node when it fails to parse and should serve from backupCache', function (next) {
            this.timeout(5000);
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000        //Max Age (30 mins)
            });

            var backupCount = 0;
            var backupRenderValidation = 0;

            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100')
            .reply(200, function () {
                _getBackup = Cache.cache.getBackup;
                _get = Cache.cache.get;
                // mocking backup cache
                Cache.cache.getBackup = function (key) {
                    backupCount++;
                    return {
                        render: function (model, context) {
                            backupRenderValidation++;
                            context.end();
                        }
                    };
                };
                Cache.cache.get = function (key, fallback) {
                    // or mock expired cache entry
                    // to trigger backup cache and refresh
                };

                return 'non-JSON should fail to parse';
            });

            var req = {};
            req.ip = '127.0.0.1';

            middleware()({}, {}, function () {

                services.loadHeader({
                        pool: 'rand0100'
                    },
                    function (err, header) {

                        assert.ok(!err, err && err.stack);
                        var renderCount = 0;
                        header.render({}, {
                            end: function () {
                                renderCount++;
                            }
                        });
                        setTimeout(function validate() {
                            assert.ok(!err);
                            assert.equal(1, backupCount);
                            assert.equal(1, backupRenderValidation);
                            assert.equal(1, renderCount);

                            svr.done();
                            next();
                        }, 500);

                    });

            });
        });

        it('should not crash node when marko template render returns error', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            )
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            marko.load = function prepareBoom() {
                var ret = _markoload.apply(marko, arguments);
                ret.render = function prepareRender(model, context) {
                    context.end(new Error('Marko render returns error'));
                };
                return ret;
            };
            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(err);
                            assert.ok(err.message.indexOf('Marko render returns error') !== -1);

                            svr.done();
                            next();
                        });
                    });
            });
        });


    });

    describe('cold fallback is enabled', function () {
        var _compile = markoCompiler.compile;
        var _load = cheerio.load;
        var _markoload = marko.load;
        var config;

        before(function (next) {
            Shelljs.rm('-rf', Path.resolve(__dirname, '../.beans/nodejs.config.global*'));
            modConfig(Path.resolve(__dirname, '..'), function (err, _config) {
                config = _config;
                config.set('globalheader:fallback', true);
                config.set('globalheader:cache:cold', true);

                Cache.configure(config.get('globalheader'));
                next();
            });

        });

        after(function () {
            nock.cleanAll();
        });

        afterEach(function () {
            markoCompiler.compile = _compile;
            cheerio.load = _load;
            marko.load = _markoload;
            Cache.reset();
        });


        it('should not crash node when first request is 500 and do fallback', function (next) {

            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(500, 'Test error');

            var req = {};
            req.ip = '127.0.0.1';
            req.query = {
                '_ul': 'RUru_RU'
            };

            Async.series([
                middleware().bind(null, {
                    route: {
                        config: {
                            'global-header': {
                                preload: true
                            }
                        }
                    }
                }, {}),

                function load(next) {

                    globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(header._htmlTemplate);
                            svr.done();
                            nock.cleanAll();
                            next();
                        });
                    });
                }

            ], next);
        });

        it('should not crash node when response is html is bad and do fallback', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, 'Bad html<D');

            var req = {};
            req.ip = '127.0.0.1';

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(header._htmlTemplate);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when html parsing is bad', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            cheerio.load = function boom() {
                // restore it for fallback template
                cheerio.load = _load;
                throw new Error('Parse error');
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(header._htmlTemplate);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko compiler fails', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            markoCompiler.compile = function boom() {
                // restore it for fallback template
                markoCompiler.compile = _compile;

                throw new Error('Test error');
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(header._htmlTemplate);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko template load fails', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            marko.load = function boom() {
                // restore it for fallback template
                marko.load = _markoload;
                throw new Error('Marko load error');
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(header._htmlTemplate);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should not crash node when marko template render fails', function (next) {
            this.timeout(5000);
            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/json?pool=rand0100&app=NODE&human=0')
            .reply(200, {
                    js: {},
                    css: {},
                    'js.inline': 'alert("hello");',
                    html: 'will not be used by the test'
                }

            );

            var req = {};
            req.ip = '127.0.0.1';

            marko.load = function prepareBoom() {
                marko.load = _markoload;
                var ret = _markoload.apply(marko, arguments);
                ret.render = function boom() {
                    throw new Error('Marko render error');
                };
                return ret;
            };

            middleware()({}, {}, function () {
                globalHeader.loadHeader(req, {
                        pool: 'rand0100'
                    },
                    function (err, header) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(header._htmlTemplate);

                            svr.done();
                            next();
                        });
                    });
            });
        });

        it('should handle footer fallback', function (next) {

            var svr = nock('http://globalheader.vip.qa.ebay.com')
            .get('/header/footer?pool=rand0100&app=NODE&human=0')
            .reply(500, 'Test error');

            var req = {};

            Async.series([
                middleware().bind(null, {}, {}),

                function load(next) {

                    globalHeader.loadFooter(req, {
                        pool: 'rand0100'
                    },
                    function (err, footerSpec) {
                        setImmediate(function validate() {
                            assert.ok(!err, err && err.stack);
                            assert.ok(footerSpec._html);
                            svr.done();
                            nock.cleanAll();
                            next();
                        });
                    });
                }

            ], next);
        });

    });
});
