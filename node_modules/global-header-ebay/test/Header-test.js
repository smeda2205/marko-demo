'use strict';

var assert = require('assert');

var Header = require('../lib/Header');

describe(__filename + ' Test\n', function() {

    it('Header refinedCategories empty Test \n', function() {
        var headerResponse = {
            htmlTemplate: {
                render: function() {

                }
            }
        };
        var jsOptions = {};
        var header = new Header(headerResponse, jsOptions);
        var options = {};
        var context = {
            beginAsync: function () {
                return {
                    write: function () {},
                    end: function () {}
                };
            }
        };
        header.render(options, context);
        // console.log(options);
        assert.ok(options.categoriesArr);
        assert.ok(options.refinedCategoriesArr);
        assert.equal(options.categoriesArr.length, 0);
        assert.equal(options.refinedCategoriesArr.length, 0);

    });

    it('Header refinedCategories 0 Test \n', function() {
        var headerResponse = {
            htmlTemplate: {
                render: function() {

                }
            }
        };
        var jsOptions = {};
        var header = new Header(headerResponse, jsOptions);
        var options = {
            categories: 0,
            refinedCategories: 0
        };
        var context = {
            beginAsync: function () {
                return {
                    write: function () {},
                    end: function () {}
                };
            }
        };
        header.render(options, context);
        // console.log(options);
        assert.ok(options.categoriesArr);
        assert.ok(options.refinedCategoriesArr);
        assert.equal(options.categoriesArr.length, 1);
        assert.equal(options.refinedCategoriesArr.length, 1);

    });

    it('Header refinedCategories 0 Test \n', function() {
        var headerResponse = {
            htmlTemplate: {
                render: function() {

                }
            }
        };
        var jsOptions = {};
        var header = new Header(headerResponse, jsOptions);
        var options = {
            categories: "testCat1:100,testCat2:200",
            refinedCategories: "topCat1:300,topCat2:900"
        };
        var context = {
            beginAsync: function () {
                return {
                    write: function () {},
                    end: function () {}
                };
            }
        };
        header.render(options, context);
        // console.log(options);
        assert.ok(options.categoriesArr);
        assert.ok(options.refinedCategoriesArr);
        assert.equal(options.categoriesArr.length, 2);
        assert.equal(options.refinedCategoriesArr.length, 2);
    });

    it('should not crash node when render fails', function (next) {
        var headerResponse = {
            htmlTemplate: {
                render: function() {
                    throw new Error('render boom');
                }
            }
        };
        var jsOptions = {};
        var header = new Header(headerResponse, jsOptions);
        var options = {
            categories: "testCat1:100,testCat2:200",
            refinedCategories: "topCat1:300,topCat2:900"
        };
        var context = {
            beginAsync: function () {
                return {
                    write: function () {},
                    end: function end(err) {
                        assert.ok(err);
                        assert.equal('render boom', err.message);
                        next();
                    }
                };
            }
        };
        header.render(options, context);
    });

    it('Test for Categories/RefinedCategories comma and colon replace', function (next) {
        var headerResponse = {
            htmlTemplate: {
                render: function(options) {
                    assert.deepEqual(
                        [ { key: 'testCat1,Tested1,Tested2', value: '100', selected: '' },
                        { key: 'testCat2', value: '200', selected: '' } ],
                        options.categoriesArr);
                    assert.deepEqual(
                        [ { key: 'topCat1', value: '300', selected: '' },
                        { key: 'topCat:Tested1:Tested2', value: '900', selected: '' } ],
                        options.refinedCategoriesArr);
                    next();
                }
            }
        };
        var jsOptions = {};
        var header = new Header(headerResponse, jsOptions);
        var options = {
            categories: "testCat1&comma;Tested1&comma;Tested2:100,testCat2:200",
            refinedCategories: "topCat1:300,topCat&colon;Tested1&colon;Tested2:900"
        };
        var context = {
            beginAsync: function () {
                return {
                    write: function () {},
                    end: function () {}
                };
            }
        };
        header.render(options, context);
    });
});
