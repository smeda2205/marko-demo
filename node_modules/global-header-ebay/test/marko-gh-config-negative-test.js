'use strict';

var chai = require('chai'),
    assert = chai.assert,
    cal = require('cal'),
    http = require('http'),
    request = require('request'),
    express = require('express'),
    servicecore = require('servicecore'),
    cookiesEbay = require('cookies-ebay/middleware'),
    commons = require('commons-ebay/middleware'),
    locale = require('locale-ebay'),
    globalHeader = require('../middleware'),
    marko = require('marko');

var fs = require('node-fs'),
    nodePath = require('path'),
    cheerio = require('cheerio'),
    markoCompiler = require('marko/compiler');

var cacheDir = nodePath.join(process.cwd(), '.cache/global-header');
var debug = require('debug')('header:templify');

var templify = require('../lib/templify');



cal.setDefaultWriteStream('console');

var app, server, port;
var testCookies = {};

function generateTempFilename() {

    var now = new Date();
    return [
    now.getYear(),
    now.getMonth(),
    now.getDate(),
    process.pid,
    (Math.random() * 0x100000000 + 1).toString(36)
    ].join('-');
}

app = express();
app.use(commons());
app.use(servicecore());
app.use(cookiesEbay());
app.use(function testCookieModifier(req, res, next) {
    (Object.keys(testCookies) || []).forEach(function (name) {
        req.ebay.cookies.setCookieValue(name, testCookies[name]);
    });
    next();
});
app.use(locale());
app.use(globalHeader());

app.get('/marko', function (req, res, next) {
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    var templateName = req.query.template;
    var template = marko.load(require.resolve('./marko/' + templateName + '.marko'));

    template.render({}, res);
});

app.get('/splat-geo', function(req, res, next) {
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    var templateName = 'splat-geo';
    var template = marko.load(require.resolve('./marko/' + templateName + '.marko'));

    template.render({}, res);

});

app.get('/splat-geo2', function(req, res, next) {
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    var templateName = 'splat-geo2';
    var template = marko.load(require.resolve('./marko/' + templateName + '.marko'));

    template.render({}, res);

});

app.use(function (err, req, res, next) {
    console.error(err.stack);
    res.send(500, 'Server error');
});

var oldHeaderFunction = templify.header;


describe('global-header-ebay/marko-gh-config-negative-test', function () {

    before(function (done) {
        try {
            server = http.createServer(app);
            server.on('listening', function () {
                port = server.address().port;
                console.log('Listening on port ' + port);
                done();
            });

            server.listen();
        } catch (e) {
            console.error('ERROR: ', (e.stack || e));
            done(e);
        }



    });

    after(function () {
        templify.header = oldHeaderFunction;

        server.close();
    });

    afterEach(function () {
        testCookies = {};
    });

    // it('marko: configure should get correct Geo (Russion) Header', function (next) {
    //
    //     templify.header = oldHeaderFunction;
    //
    //     request('http://localhost:' + port + '/splat-geo?_ul=RUru-RU', function (err, response, body) {
    //         if (err) {
    //             return next(err);
    //         }
    //
    //
    //         assert.ok(body);
    //         body = body.toString('utf-8');
    //         assert.include(body, '<option selected="selected" value="0">&#x412;&#x441;&#x435;');
    //
    //         next();
    //     });
    // });

    it('marko: configure should get NOT correct Geo (Russion) Header', function (next) {

        templify.header = function (html, callback) {

            var st = Date.now();

            st = Date.now();
            var $ = cheerio.load(html);
            debug('cheerio: Loaded HTML in ' + (Date.now() - st) + 'ms');

            st = Date.now();
            // All for the keywords input to be populated with keywords
            $("[name='_nkw']").attr('value', '$data.searchKeywords');

            //allCategoriesText
            var oldAllCategoriesText = $('#gh-cat option[value="0"]').text();
            $('#gh-cat option[value="0"]').text('${data.allCategoriesText || ' + JSON.stringify(oldAllCategoriesText) + '}');
            // $('#gh-cat option[value="0"]').text('${data.allCategoriesText || ' + oldAllCategoriesText + '}');


            // Allow the search form action to be changed
            var oldAction = $("#gh-f").attr('action');
            $("#gh-f").attr('action', '${data.searchFormAction || ' + JSON.stringify(oldAction) + '}');

            // Allow for hidden input fields to be added
            $("#gh-f").prepend('<input type="hidden" name="$hidden.name" value="$hidden.value" for="hidden in data.searchFormFields">');

            //L1 level category: categoriesArr from categories
            $('#gh-cat').append('<option for="category in data.categoriesArr" value="$category.value">$category.key</option>');
            //L2 level category: refinedCategoriesArr from refinedCategories
            $('#gh-cat').append('<option for="category in data.refinedCategoriesArr; status-var=loop" value="$category.value"><if test="!loop.isFirst()">&#9492;</if>$category.key</option>');



            debug('cheerio: Manipulated DOM in ' + (Date.now() - st) + 'ms');

            st = Date.now();
            html = $.html();
            debug('cheerio: Generated HTML in ' + (Date.now() - st) + 'ms');

            var filename = generateTempFilename();
            var outFile = nodePath.join(cacheDir, filename + '.marko.js');


            var compiled = markoCompiler.compile(html, outFile);

            debug('Compiled template in ' + (Date.now() - st) + 'ms');

            st = Date.now();

            fs.writeFile(outFile, compiled, 'utf8', function (err) {
                if (err) {
                    return callback(err);
                }

                debug('Wrote compiled template in ' + (Date.now() - st) + 'ms');

                st = Date.now();
                var templateModule = require(outFile);
                debug('Required compiled template in ' + (Date.now() - st) + 'ms');

                st = Date.now();
                var template = marko.load(templateModule);
                debug('Loaded compiled template in ' + (Date.now() - st) + 'ms');

                fs.unlink(outFile, function () {}); // No longer necessary to keep the module on disk now that it has been loaded


                callback(null, template);
            });
        };




        request('http://localhost:' + port + '/splat-geo2?_ul=RUru-RU', function (err, response, body) {

            if (err) {
                templify.header = oldHeaderFunction;
                return next(err);
            }
            templify.header = oldHeaderFunction;


            assert.ok(body);
            body = body.toString('utf-8');
            assert.notInclude(body, '<option selected="selected" value="0">&#x412;&#x441;&#x435;');
            templify.header = oldHeaderFunction;

            next();
        });


    });








});
