'use strict';

var Assert = require('assert');
var Fs = require('fs');
var Path = require('path');
var nock = require('nock');

var rm = require('shelljs').rm;
var Utils = require('../scripts/utils');

var resourcesPath = Path.resolve(__dirname, '../resources');

describe(__filename, function () {

    describe('permutate', function() {
        before(function () {
            clean();
        });
        after(function () {
            clean();
        });

        it('should permutate single', function () {
            var permutations = Utils.permutate({
                foo: ['A']
            });

            Assert.deepEqual(
                [ { foo: 'A' } ],
                  permutations);
        });

        it('should permutate singles', function () {
            var permutations = Utils.permutate({
                foo: ['A'],
                bar: ['B']
            });

            Assert.deepEqual(
                [ { foo: 'A', bar: 'B' } ],
                  permutations);
        });

        it('should permutate triple', function () {
            var permutations = Utils.permutate({
                foo: ['A'],
                bar: ['B'],
                qaz: ['C']
            });

            Assert.deepEqual(
                [ { foo: 'A', bar: 'B', qaz: 'C' } ],
                  permutations);
        });

        it('should permutate double and single', function () {
            var permutations = Utils.permutate({
                foo: ['A', 'B'],
                bar: ['C']
            });

            Assert.deepEqual(
                [ { foo: 'A', bar: 'C' },
                  { foo: 'B', bar: 'C' }],
                  permutations);
        });

        it('should permutate double and empty', function () {
            var permutations = Utils.permutate({
                foo: ['A', 'B'],
                bar: []
            });

            Assert.deepEqual(
                [ { foo: 'A' },
                  { foo: 'B' } ],
                  permutations);
        });

        it('should permutate simple', function () {
            var permutations = Utils.permutate({
                foo: ['A', 'B'],
                bar: ['C', 'D']
            });

            Assert.deepEqual(
                [ { foo: 'A', bar: 'C' },
                  { foo: 'B', bar: 'C' },
                  { foo: 'A', bar: 'D' },
                  { foo: 'B', bar: 'D' } ],
                  permutations);
        });

        it('should permutate non equal-length arrays', function () {
            var permutations = Utils.permutate({
                foo: ['A', 'B'],
                bar: ['C', 'D', 'E']
            });

            Assert.deepEqual(
                [ { foo: 'A', bar: 'C' },
                  { foo: 'B', bar: 'C' },
                  { foo: 'A', bar: 'D' },
                  { foo: 'B', bar: 'D' },
                  { foo: 'A', bar: 'E' },
                  { foo: 'B', bar: 'E' } ],
                  permutations);
        });

        it('should permutate non equal-length arrays and more keys', function () {
            var permutations = Utils.permutate({
                foo: ['A', 'B'],
                bar: ['C', 'D', 'E'],
                qaz: ['F']
            });

            Assert.deepEqual(
                [ { foo: 'A', bar: 'C', qaz: 'F' },
                  { foo: 'B', bar: 'C', qaz: 'F' },
                  { foo: 'A', bar: 'D', qaz: 'F' },
                  { foo: 'B', bar: 'D', qaz: 'F' },
                  { foo: 'A', bar: 'E', qaz: 'F' },
                  { foo: 'B', bar: 'E', qaz: 'F' } ],
                  permutations);
        });


    });

    describe('fetch', function () {
        var session;

        after(function () {
            nock.cleanAll();
        });

        it('should fetch', function (done) {
            session = nock('http://www.xyz.com')
            .get('/')
            .reply(200, 'ok');

            Utils.fetch('test', 'http://www.xyz.com/', function (err, content) {
                session.done();
                Assert.ok(!err);
                Assert.equal('ok', content);
                done();
            });
        });

        it('should fail to fetch', function (done) {
            session = nock('http://www.xyz.com')
            .get('/')
            .reply(300, 'redirect');

            Utils.fetch('test', 'http://www.xyz.com/', function (err, content) {
                session.done();
                Assert.ok(err);
                Assert.ok(!content);
                done();
            });
        });

    });

    describe('fetchContent', function () {

        it('should fetchContent', function (done) {

            Utils.fetchContent([
                { foo: 'foo' },
                { bar: 'bar' }
            ], function load(options, next) {
                Assert.ok(options.foo || options.bar);
                next();
            }, function (err, content) {
                Assert.ok(!err);
                done();
            });
        });

        it('should fail fetchContent', function (done) {

            Utils.fetchContent([
                { foo: 'foo' },
                { bar: 'bar' }
            ], function load(options, next) {
                if (options.bar) {
                    return next(new Error('test error'));
                }
                Assert.ok(options.foo);
                next();
            }, function (err, content) {
                Assert.ok(err);
                done();
            });
        });
    });

    describe('loadFooter', function () {
        var _writeFileSync;
        var session;

        before(function () {
            _writeFileSync = Fs.writeFileSync;
        });

        after(function () {
            Fs.writeFileSync = _writeFileSync;
            nock.cleanAll();
        });

        it('should loadFooter', function (done) {
            session = nock('http://gh.ebaystatic.com')
            .get('/header/json/footer')
            .reply(200, {
                html: 'footer'
            });

            var count = 0;
            Fs.writeFileSync = function (file, content) {
                Assert.ok(/\/resources\/footer\.json$/.test(file), file);
                Assert.deepEqual({
                    html: 'footer'
                }, JSON.parse(content));
                count++;
            };

            Utils.loadFooter('http://gh.ebaystatic.com/header/json/footer', {}, function (err, content) {
                session.done();
                Assert.equal(1, count);
                Assert.ok(!err);
                done();
            });
        });

        it('should fail to loadFooter', function (done) {
            session = nock('http://gh.ebaystatic.com')
            .get('/header/json/footer')
            .reply(404);

            Utils.loadFooter('http://gh.ebaystatic.com/header/json/footer', {}, function (err, content) {
                session.done();
                Assert.ok(err);
                done();
            });
        });

    });

    describe('loadHeader', function () {
        var _writeFileSync;
        var session;

        before(function () {
            _writeFileSync = Fs.writeFileSync;
        });

        after(function () {
            Fs.writeFileSync = _writeFileSync;
            nock.cleanAll();
        });

        it('should loadHeader', function (done) {
            session = nock('http://gh.ebaystatic.com')
            .get('/header/json')
            .reply(200, {
                html: 'header'
            });

            var count = 0;
            Fs.writeFileSync = function (file, content) {
                Assert.ok(/\/resources\/header\.json$/.test(file), file);
                Assert.deepEqual({
                    html: 'header'
                }, JSON.parse(content));
                count++;
            };

            Utils.loadHeader('http://gh.ebaystatic.com/header/json', {}, function (err, content) {
                session.done();
                Assert.equal(1, count);
                Assert.ok(!err);
                done();
            });
        });

        it('should fail to loadHeader', function (done) {
            session = nock('http://gh.ebaystatic.com')
            .get('/header/json')
            .reply(404);

            Utils.loadHeader('http://gh.ebaystatic.com/header/json', {}, function (err, content) {
                session.done();
                Assert.ok(err);
                done();
            });
        });
    });

    describe('fetchHeader', function () {

        it('should succeed', function (done) {

            var count = 0;
            Utils.fetchHeader({
                    "header": {
                        "type": [
                            "FULL", "MIN"
                        ]
                    },
                    "common": {
                        "siteid": [
                            0,
                            2
                        ],
                        "var": [
                            "",
                            "mweb"
                        ]
                    }
                }, function load(options, next) {
                    count++;
                    next();
                }, function (err, content) {
                    Assert.ok(!err, err && err.stack);
                    Assert.equal(8, count);
                    done();
            });
        });

        it('should fail', function (done) {

            var count = 0;
            Utils.fetchHeader({
                    "header": {
                        "type": [
                            "FULL", "MIN"
                        ]
                    },
                    "common": {
                        "siteid": [
                            0,
                            2
                        ],
                        "var": [
                            "",
                            "mweb"
                        ]
                    }
                }, function load(options, next) {
                    count++;
                    next(new Error('TestError'));
                }, function (err, content) {
                    Assert.ok(err);
                    Assert.equal('TestError', err.message);
                    Assert.equal(1, count);
                    done();
            });
        });

    });

    describe('fetchFooter', function () {

        it('should succeed', function (done) {
            var count = 0;
            Utils.fetchFooter({
                    "footer": {
                        "type": [
                            "NORMAL", "MIN"
                        ]
                    },
                    "common": {
                        "siteid": [
                            0,
                            2
                        ],
                        "var": [
                            "",
                            "mweb"
                        ]
                    }
                }, function load(options, next) {
                    count++;
                    next();
                }, function (err, content) {
                    Assert.ok(!err, err && err.stack);
                    Assert.equal(8, count);
                    done();
            });
        });

        it('should fail', function (done) {
            var count = 0;
            Utils.fetchFooter({
                    "footer": {
                        "type": [
                            "NORMAL", "MIN"
                        ]
                    },
                    "common": {
                        "siteid": [
                            0,
                            2
                        ],
                        "var": [
                            "",
                            "mweb"
                        ]
                    }
                }, function load(options, next) {
                    count++;
                    next(new Error('TestError'));
                }, function (err, content) {
                    Assert.ok(err);
                    Assert.equal('TestError', err.message);
                    Assert.equal(1, count);
                    done();
            });
        });
    });

    describe('fetchAll', function () {

        it('should succeed', function (done) {

            var countHeader = 0;
            var countFooter = 0;

            Utils.fetchAll({
                loadFooter: function loadFooter(url, options, next) {
                    countFooter++;
                    next();
                },
                loadHeader: function loadHeader(url, options, next) {
                    countHeader++;
                    next();
                },
                "endpoints": {
                    "header": "http://gh.ebaystatic.com/header/json",
                    "footer": "http://gh.ebaystatic.com/header/json/footer"
                },
                "variations": {
                    "footer": {
                        "type": [
                            "NORMAL", "MIN"
                        ]
                    },
                    "header": {
                        "type": [
                            "FULL", "MIN"
                        ]
                    },
                    "common": {
                        "siteid": [
                            0,
                            2
                        ],
                        "var": [
                            "",
                            "mweb"
                        ]
                    }
                }
            }, function (err, content) {
                Assert.ok(!err, err && err.stack);
                Assert.equal(8, countHeader);
                Assert.equal(8, countFooter);
                done();
            });
        });

        it('should fail', function (done) {

            var countHeader = 0;
            var countFooter = 0;

            Utils.fetchAll({
                loadFooter: function loadFooter(url, options, next) {
                    countFooter++;
                    next(new Error('TestError'));
                },
                loadHeader: function loadHeader(url, options, next) {
                    countHeader++;
                    next();
                },
                "endpoints": {
                    "header": "http://gh.ebaystatic.com/header/json",
                    "footer": "http://gh.ebaystatic.com/header/json/footer"
                },
                "variations": {
                    "footer": {
                        "type": [
                            "NORMAL", "MIN"
                        ]
                    },
                    "header": {
                        "type": [
                            "FULL", "MIN"
                        ]
                    },
                    "common": {
                        "siteid": [
                            0,
                            2
                        ],
                        "var": [
                            "",
                            "mweb"
                        ]
                    }
                }
            }, function (err, content) {
                Assert.ok(err);
                Assert.equal('TestError', err.message);
                done();
            });
        });
    });

    describe('postInstall', function () {

        before(function () {
            clean();
        });

        it('should get all headers/footer', function (done) {
            this.timeout(40000);

            var config = require('../scripts/config.json');

            require('../scripts/utils').fetchAll(config, function handleResult(err) {
                if (err) {
                    return done(err);
                }
                done();
            });
        });

    });
});

function clean() {
    if (Fs.existsSync(resourcesPath)) {
        rm('-rf', resourcesPath + '/*');
    }
}
