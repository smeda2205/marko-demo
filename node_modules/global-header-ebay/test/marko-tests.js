'use strict';

var chai = require('chai'),
    assert = chai.assert,
    cal = require('cal'),
    http = require('http'),
    nock = require('nock'),
    request = require('request'),
    express = require('express'),
    servicecore = require('servicecore'),
    cookiesEbay = require('cookies-ebay/middleware'),
    commons = require('commons-ebay/middleware'),
    locale = require('locale-ebay'),
    globalHeader = require('../middleware'),
    marko = require('marko');

cal.setDefaultWriteStream('console');

var app, server, port;
var testCookies = {};

app = express();
app.use(commons());
app.use(servicecore());
app.use(cookiesEbay());
app.use(function testCookieModifier(req, res, next) {
    (Object.keys(testCookies) || []).forEach(function (name) {
        req.ebay.cookies.setCookieValue(name, testCookies[name]);
    });
    next();
});

app.use(function(req, res, next){
    if(req.query.csp){
        req.csp = {};
        var text = "thisisamplecspnoncevaluetotesttheglobalheadermodule";
        req.csp.nonce = text;
    }
    next();
});

app.use(locale());
app.use(globalHeader());

app.get('/marko', function (req, res, next) {
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    var templateName = req.query.template;
    var template = marko.load(require.resolve('./marko/' + templateName + '.marko'));

    template.render({}, res);
});

app.use(function (err, req, res, next) {
    console.error(err.stack);
    res.send(500, 'Server error');
});

describe(__filename, function () {

    before(function (done) {
        try {
            server = http.createServer(app);
            server.on('listening', function () {
                port = server.address().port;
                console.log('Listening on port ' + port);
                done();
            });

            server.listen();
        } catch (e) {
            console.error('ERROR: ', (e.stack || e));
            done(e);
        }

    });

    after(function () {
        server.close();
    });

    afterEach(function () {
        testCookies = {};
    });

    it('marko: header: FULL', function (next) {


        request('http://localhost:' + port + '/marko?template=header-full', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, '<script');
            assert.include(body, 'GH_config={"siteId":"0","geoLang":"[]","lng":"en-US","qapool":"qa.ebay.com",sin:0');
            next();
        });
    });

    it('marko: header: Mobile', function (next) {


        request('http://localhost:' + port + '/marko?template=header-mweb', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'https://m.qa.ebay.com');
            next();
        });
    });

    it('marko: header: FULL, US', function (next) {


        request({
            url: 'http://localhost:' + port + '/marko?template=header-full',
            headers: {
                'x-forwarded-for': '16.113.168.131'
            }
        }, function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, '<script');
            assert.include(body, 'GH_config={"siteId":"0","geoLang":"[]","lng":"en-US","qapool":"qa.ebay.com",sin:0');
            next();
        });
    });

    describe('x-forward-for', function () {
        afterEach(function () {
            nock.cleanAll();
        });

        it('marko: header: FULL, US, geo: should not use cached version as js options are different for RU user', function (next) {
            var session = nock('http://lbsp.vip.qa.ebay.com')
                .get('/lbservice/geocode/v1/mplocationinfo?ipaddress=31.43.213.215')
                .reply(200, { status: 'SUCCESS',
                  countryId: 168,
                  siteId: 215,
                  city: 'bysk',
                  postalCode: '659305',
                  latitude: 52.5413,
                  longitude: 85.217,
                  alpha2ISOcountryCode: 'RU',
                  defaultLanguageLocale: 'ru_RU' });

            request({
                url: 'http://localhost:' + port + '/marko?template=header-full',
                headers: {
                    'x-forwarded-for': '31.43.213.215'
                }
            }, function (err, response, body) {
                session.done();
                if (err) {
                    return next(err);
                }
                assert.ok(body);
                assert.include(body, 'www.qa.ebay.com');
                assert.include(body, '<link');
                assert.include(body, '<script');
                assert.include(body, '"siteId":"215","geoLang":"[\\"en-US\\",\\"ru-RU\\"]","lng":"ru-RU","qapool":"qa.ebay.com",sin:0,geoul:\'RUru-RU\',langs:1', 'Actual body: ' + body);
                next();
            });
        });

        it('marko: header: FULL, US, geo: should not use cached version as js options are different for recognized RU user', function (next) {

            var session = nock('http://lbsp.vip.qa.ebay.com')
                .get('/lbservice/geocode/v1/mplocationinfo?ipaddress=31.43.213.215')
                .reply(200, { status: 'SUCCESS',
                  countryId: 168,
                  siteId: 215,
                  city: 'bysk',
                  postalCode: '659305',
                  latitude: 52.5413,
                  longitude: 85.217,
                  alpha2ISOcountryCode: 'RU',
                  defaultLanguageLocale: 'ru_RU' });

            testCookies = {
                'USERID': 'testUser'
            };
            request({
                url: 'http://localhost:' + port + '/marko?template=header-full',
                headers: {
                    'x-forwarded-for': '31.43.213.215'
                }
            }, function (err, response, body) {
                session.done();
                if (err) {
                    return next(err);
                }
                assert.ok(body);
                assert.include(body, 'www.qa.ebay.com');
                assert.include(body, '<link');
                assert.include(body, '<script');
                assert.include(body, '"siteId":"215","geoLang":"[\\"en-US\\",\\"ru-RU\\"]","lng":"ru-RU","qapool":"qa.ebay.com",sin:1,geoul:\'RUru-RU\',langs:1');
                next();
            });
        });

    });

    it('marko: header: MIN', function (next) {


        request('http://localhost:' + port + '/marko?template=header-min', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, '#mainContent');
            next();
        });
    });

    it('marko: header: FULL, motor categoryId', function (next) {


        request('http://localhost:' + port + '/marko?template=header-full-catid', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, '#mainContent');
            next();
        });
    });

    it('marko: header: FULL with searchKeywords', function (next) {


        request('http://localhost:' + port + '/marko?template=header-full-searchKeywords', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, 'nike');
            assert.include(body, '<script');
            next();
        });
    });



    it('marko: header: FULL with searchFormAction', function (next) {


        request('http://localhost:' + port + '/marko?template=header-full-searchFormAction', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, 'my-custom-search');
            assert.include(body, '<script');
            next();
        });
    });

    it('marko: footer', function (next) {


        request('http://localhost:' + port + '/marko?template=footer', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.ebayinc.com');
            assert.include(body, 'pages.qa.ebay.com');
            next();
        });
    });

    it('marko: header and footer', function (next) {


        request('http://localhost:' + port + '/marko?template=header-footer', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, 'www.ebayinc.com');
            assert.include(body, 'pages.qa.ebay.com');
            assert.include(body, 'www.qa.ebay.com');
            assert.include(body, '<link');
            assert.include(body, '<script');
            next();
        });
    });

    it('marko: configure should allow passthrough for any attribute', function (next) {


        request('http://localhost:' + port + '/marko?template=splat', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            next();
        });
    });

    it('should add csp nonce', function (next) {

        request('http://localhost:' + port + '/marko?template=header-full&csp=hello', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, '<script');
            assert.include(body, '<style nonce="thisisamplecspnoncevaluetotesttheglobalheadermodule"');
            assert.include(body, '<script type="text/javascript" nonce="thisisamplecspnoncevaluetotesttheglobalheadermodule"');
            next();
        });
    });

    it('should not add csp nonce', function (next) {

        request('http://localhost:' + port + '/marko?template=header-full', function (err, response, body) {
            if (err) {
                return next(err);
            }
            assert.ok(body);
            assert.include(body, '<script');
            assert.notInclude(body, '<script type="text/javascript" nonce="thisisamplecspnoncevaluetotesttheglobalheadermodule"');
            assert.notInclude(body, '<script type="text/javascript" nonce=');
            assert.notInclude(body, '<style nonce=');
            next();
        });
    });
});
