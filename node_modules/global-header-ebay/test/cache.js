'use strict';

var Assert = require('assert');
var Fs = require('fs');
var Path = require('path');
var Cp = require('child_process');

var Async = require('async');
var Shelljs = require('shelljs');
var Cache = require('../lib/cache');

describe(__filename, function () {
    var cacheDir = Path.resolve(__dirname, '../.cache');

    before(function () {
        Cache.reset();
    });

    after(function () {
        Cache.reset();
    });

    it('should have caches disabled', function () {
        Assert.equal(undefined, Cache.config);
        Assert.deepEqual({}, Cache.lastColdCacheUpdate);
        Assert.equal(undefined, Cache.cache);
        Assert.equal(false, Cache.cacheEnabled);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

        Cache.configure();

        Assert.equal(undefined, Cache.config);
        Assert.deepEqual({}, Cache.lastColdCacheUpdate);
        Assert.equal(undefined, Cache.cache);
        Assert.equal(false, Cache.cacheEnabled);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

        Cache.configure({});

        Assert.deepEqual(undefined, Cache.config);
        Assert.deepEqual({}, Cache.lastColdCacheUpdate);
        Assert.equal(undefined, Cache.cache);
        Assert.equal(false, Cache.cacheEnabled);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

    });

    it('should have in-memory enabled', function () {
        Cache.configure({
            enable: true
        });

        Assert.deepEqual({}, Cache.lastColdCacheUpdate);
        console.log(Cache.cache._cache);
        Assert.equal(true, Cache.cacheEnabled);
        Assert.ok(Cache.cache._cache.max > 0);
        Assert.ok(Cache.cache._cache.maxAge > 0);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

        Cache.reset();
        Cache.configure({
            enable: true,
            max: 2000,          //Max cache size
            maxAge: 1800000        //Max Age (30 mins)
        });
        Assert.equal(true, Cache.cacheEnabled);
        Assert.equal(2000, Cache.cache._cache.max);
        Assert.equal(1800000, Cache.cache._cache.maxAge);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

        // should not update values
        Cache.configure({
            enable: true,
            max: 3000,          //Max cache size
            maxAge: 1700000        //Max Age (30 mins)
        });
        Assert.equal(3000, Cache.cache._cache.max);
        Assert.equal(1700000, Cache.cache._cache.maxAge);

        // should disable cache
        Cache.configure({
            enable: false,
            max: 4000,          //Max cache size
            maxAge: 1800000        //Max Age (30 mins)
        });

        Assert.equal(false, Cache.cacheEnabled);
        Assert.equal(3000, Cache.cache._cache.max);
        Assert.equal(1700000, Cache.cache._cache.maxAge);

        // should enabled cache back and update config values
        Cache.configure({
            enable: true,
            max: 5000,          //Max cache size
            maxAge: 1900000        //Max Age (30 mins)
        });
        Assert.equal(true, Cache.cacheEnabled);
        Assert.equal(5000, Cache.cache._cache.max);
        Assert.equal(1900000, Cache.cache._cache.maxAge);

    });

    it('should have in-memory cache re-configured and preserve values', function () {
        Cache.reset();

        Cache.configure({
            enable: true,
            max: 2000,          //Max cache size
            maxAge: 1800000        //Max Age (30 mins)
        });
        Assert.equal(true, Cache.cacheEnabled);
        Assert.equal(2000, Cache.cache._cache.max);
        Assert.equal(1800000, Cache.cache._cache.maxAge);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

        // add some values
        Cache.set('foo', 'bar');
        Cache.set('qaz', 'qwe');

        Assert.deepEqual([ 'qaz', 'foo' ], Cache.cache._cache.keys());

        // now re-configure
        Cache.configure({
            enable: true,
            max: 10,          //Max cache size
            maxAge: 1800000        //Max Age (30 mins)
        });
        Assert.equal(10, Cache.cache._cache.max);

        Assert.deepEqual([ 'qaz', 'foo' ], Cache.cache._cache.keys());

        // get some backup cache
        Cache.cache._backupCache.set('wsx', 'rfv');
        Cache.cache._backupCache.set('asd', 'zxc');
        Assert.deepEqual([ 'asd', 'wsx' ], Cache.cache._backupCache.keys());

        Cache.configure({
            enable: true,
            max: 11,          //Max cache size
            maxAge: 1700000        //Max Age (30 mins)
        });
        Assert.equal(11, Cache.cache._cache.max);
        Assert.deepEqual([ 'asd', 'wsx' ], Cache.cache._backupCache.keys());

    });

    it('should have in-memory cache cleared', function () {
        Cache.reset();

        Cache.configure({
            enable: true,
            max: 2000,          //Max cache size
            maxAge: 1800000        //Max Age (30 mins)
        });
        Assert.equal(true, Cache.cacheEnabled);
        Assert.equal(2000, Cache.cache._cache.max);
        Assert.equal(1800000, Cache.cache._cache.maxAge);
        Assert.equal(undefined, Cache.coldCache);
        Assert.equal(false, Cache.coldCacheEnabled);

        // add some values
        Cache.set('foo', 'bar');
        Cache.set('qaz', 'qwe');

        Assert.deepEqual([ 'qaz', 'foo' ], Cache.cache._cache.keys());

        // now mock cache clean up
        Cache.configure({
            enable: true,
            max: 10,          //Max cache size
            maxAge: 1800000,        //Max Age (30 mins)
            lastCleanup: 1
        });
        Assert.equal(10, Cache.cache._cache.max);

        Assert.deepEqual([], Cache.cache._cache.keys());
        Assert.deepEqual([], Cache.cache._backupCache.keys());

        // now add more values
        Cache.set('foo', 'bar');
        Cache.set('qaz', 'qwe');
        Assert.deepEqual([ 'qaz', 'foo' ], Cache.cache._cache.keys());

        // now mock cache clean up with lastCleanup not changed,
        // this should preserve the values
        Cache.configure({
            enable: true,
            max: 10,          //Max cache size
            maxAge: 1800000,        //Max Age (30 mins)
            lastCleanup: 1
        });

        Assert.deepEqual([ 'qaz', 'foo' ], Cache.cache._cache.keys());

        // now mock cache clean up
        Cache.configure({
            enable: true,
            max: 10,          //Max cache size
            maxAge: 1800000,        //Max Age (30 mins)
            lastCleanup: 2
        });

        Assert.deepEqual([], Cache.cache._cache.keys());

    });

    it('should set/get values', function () {
        Cache.reset();

        Cache.configure({
            enable: true,
            max: 5,
            maxAge: 300
        });

        // add some values
        Cache.set('foo1', 'bar1');
        Assert.equal('bar1', Cache.get('foo1'));
        Cache.set('foo2', 'bar2');
        Assert.equal('bar2', Cache.get('foo2'));
        Cache.set('foo3', 'bar3');
        Assert.equal('bar3', Cache.get('foo3'));
        Cache.set('foo4', 'bar4');
        Assert.equal('bar4', Cache.get('foo4'));
        Cache.set('foo5', 'bar5');
        Assert.equal('bar5', Cache.get('foo5'));

        Assert.deepEqual([ 'foo1', 'foo2', 'foo3', 'foo4', 'foo5' ].reverse(),
            Cache.cache._cache.keys());

        Cache.set('foo5', 'bar');
        Assert.deepEqual([ 'foo1', 'foo2', 'foo3', 'foo4', 'foo5' ].reverse(),
            Cache.cache._cache.keys());

        Assert.equal('bar4', Cache.get('foo4'));
        Assert.deepEqual([ 'foo1', 'foo2', 'foo3', 'foo5', 'foo4' ].reverse(),
            Cache.cache._cache.keys());

        Cache.set('foo6', 'bar6');
        Assert.equal('bar6', Cache.get('foo6'));

        Assert.deepEqual([ 'foo2', 'foo3', 'foo5', 'foo4', 'foo6' ].reverse(),
            Cache.cache._cache.keys());

        Assert.deepEqual([ 'foo1' ].reverse(),
            Cache.cache._backupCache.keys());

    });

    it('should set/get values', function () {
        Cache.reset();

        Cache.configure({
            enable: true,
            max: 5,
            maxAge: 300
        });

        // add some values
        Cache.set('foo1', 'bar1');
        Assert.equal('bar1', Cache.get('foo1'));
        Cache.set('foo2', 'bar2');
        Assert.equal('bar2', Cache.get('foo2'));
        Cache.set('foo3', 'bar3');
        Assert.equal('bar3', Cache.get('foo3'));
        Cache.set('foo4', 'bar4');
        Assert.equal('bar4', Cache.get('foo4'));
        Cache.set('foo5', 'bar5');
        Assert.equal('bar5', Cache.get('foo5'));

        Assert.deepEqual([ 'foo1', 'foo2', 'foo3', 'foo4', 'foo5' ].reverse(),
            Cache.cache._cache.keys());

        Cache.set('foo5', 'bar');
        Assert.deepEqual([ 'foo1', 'foo2', 'foo3', 'foo4', 'foo5' ].reverse(),
            Cache.cache._cache.keys());

        Assert.equal('bar4', Cache.get('foo4'));
        Assert.deepEqual([ 'foo1', 'foo2', 'foo3', 'foo5', 'foo4' ].reverse(),
            Cache.cache._cache.keys());

        Cache.set('foo6', 'bar6');
        Assert.equal('bar6', Cache.get('foo6'));

        Assert.deepEqual([ 'foo2', 'foo3', 'foo5', 'foo4', 'foo6' ].reverse(),
            Cache.cache._cache.keys());

        Assert.deepEqual([ 'foo1' ].reverse(),
            Cache.cache._backupCache.keys());

    });

    describe('cold cache', function () {
        var cacheDir = Path.resolve(__dirname, '../.cache');

        before(function () {
            Shelljs.rm('-rf', cacheDir);
        });

        it('should have cold cache enabled', function () {
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: true,
                    singleFile: false,
                    freeDelay: 360000,  // 6 min before releasing memory
                    refreshInterval: 1800000 // every 30 min
                }
            });

            Assert.equal(true, Cache.cacheEnabled);
            Assert.equal(2000, Cache.cache._cache.max);
            Assert.equal(1800000, Cache.cache._cache.maxAge);
            Assert.ok(Cache.coldCache);
            Assert.equal(true, Cache.coldCacheEnabled);
            Assert.ok(Cache.coldCache);
            Assert.equal(360000, Cache.coldCache.freeDelay);
            Assert.equal(0, Cache.coldCache.timeToLive);
            Assert.equal(0, Cache.coldCache.timeToIdle);
            Assert.ok(Cache.coldCache.cacheStore);
            Assert.ok(/\.cache\/global-header-ebay-(test|development)$/
                .test(Cache.coldCache.cacheStore.dir), 'actual: ' +
                Cache.coldCache.cacheStore.dir);
        });

        it('should have cold cache disabled', function () {

            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: false,
                    singleFile: false,
                    freeDelay: 360000,  // 6 min before releasing memory
                    refreshInterval: 1800000 // every 30 min
                }
            });

            Assert.equal(true, Cache.cacheEnabled);
            Assert.equal(2000, Cache.cache._cache.max);
            Assert.equal(1800000, Cache.cache._cache.maxAge);
            Assert.ok(Cache.coldCache);
            Assert.equal(false, Cache.coldCacheEnabled);
        });

        it('should have cold cache re-configured', function () {

            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: true,
                    singleFile: false,
                    freeDelay: 350000,  // 6 min before releasing memory
                    refreshInterval: 1800000 // every 30 min
                }
            });

            Assert.equal(350000, Cache.coldCache.freeDelay);
            Assert.ok(Cache.coldCache);
            Assert.equal(true, Cache.coldCacheEnabled);
        });

        describe('writing/reading to/from cold cache:', function () {
            before(function () {
                Shelljs.rm('-rf', cacheDir);
            });

            it('should not write to coldCache yet', function (next) {
                Cache.reset();
                Cache.configure({
                    enable: true,
                    max: 2000,          //Max cache size
                    maxAge: 1800000,        //Max Age (30 mins)
                    cold: {
                        enable: true,
                        singleFile: false,
                        flushDelay: 20,
                        freeDelay: 350000,  // 6 min before releasing memory
                        refreshInterval: 50
                    }
                });

                // empty folder
                Assert.equal(0, Fs.readdirSync(Path.resolve(cacheDir, 'global-header-ebay-test')).length);
                Assert.ok(!Fs.existsSync(Path.resolve(cacheDir, 'global-header-ebay-test/cache')));
                // should not write to coldCache yet
                Cache.toColdCache('foo', {
                    bar: 'qaz'
                });
                // no flush to disk yet
                Assert.equal(null, Cache.coldCache.cacheStore.cache);
                // only cache index file should be present
                Assert.equal(1, Fs.readdirSync(Path.resolve(cacheDir, 'global-header-ebay-test')).length);

                // now after 50ms of flush delay
                setTimeout(function () {
                    Assert.equal(2, Fs.readdirSync(Path.resolve(cacheDir, 'global-header-ebay-test')).length);
                    Assert.ok(Cache.coldCache.cacheStore.cache.foo);
                    next();
                }, 50);
            });

            it('should read from coldCache from disk', function (next) {
                // trigger cold cache reset by reconfiguring it
                Cache.configure({
                    enable: true,
                    max: 2000,          //Max cache size
                    maxAge: 1800000,        //Max Age (30 mins)
                    cold: {
                        enable: true,
                        singleFile: false,
                        flushDelay: 21,
                        freeDelay: 250,   // ill free memory in 50 ms
                        refreshInterval: 50
                    }
                });

                // should not be loaded yet
                Assert.equal(null, Cache.coldCache.cacheStore.cache);
                setTimeout(function () {
                    Cache.fromColdCache('foo', function (err, value) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(Cache.coldCache.cacheStore.cache.foo);
                        Assert.equal('qaz', value.bar);
                        next();
                    });
                }, 50);
            });

            it('delay', function (next) {
                setTimeout(next, 260);
            });

            it('should free memory and then read it back from the disk', function (next) {
                Assert.equal(null, Cache.coldCache.cacheStore.cache);
                Cache.fromColdCache('foo', function (err, value) {
                    Assert.ok(!err, err && err.stack);
                    Assert.ok(Cache.coldCache.cacheStore.cache.foo);
                    Assert.equal('qaz', value.bar);
                    next();
                });
            });

            describe('write more values', function () {
                it('now', function () {
                    // increase freeDelay
                    Cache.configure({
                        enable: true,
                        max: 2000,          //Max cache size
                        maxAge: 1800000,        //Max Age (30 mins)
                        cold: {
                            enable: true,
                            singleFile: false,
                            flushDelay: 22,
                            freeDelay: 2500,
                            refreshInterval: 50
                        }
                    });

                    Cache.toColdCache('foo1', {
                        bar: 'qaz1'
                    });

                    Cache.toColdCache('foo2', {
                        bar: 'qaz2'
                    });
                });

                it('wait', function (next) {
                    setTimeout(next, 30);
                });

                it('validate', function (next) {
                    Cache.fromColdCache('foo1', function (err, value) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(Cache.coldCache.cacheStore.cache.foo1);
                        Assert.equal('qaz1', value.bar);
                        next();
                    });
                });

                it('validate', function (next) {
                    Cache.fromColdCache('foo2', function (err, value) {
                        Assert.ok(!err, err && err.stack);
                        Assert.ok(Cache.coldCache.cacheStore.cache.foo2);
                        Assert.equal('qaz2', value.bar);
                        next();
                    });
                });

                describe(': corrupt cache', function () {
                    before(function corruptIt() {
                        var cacheFilePath = Path.resolve(cacheDir, 'global-header-ebay-test/cache');
                        var content = Fs.readFileSync(cacheFilePath);
                        // make json invalid
                        content = content.toString().replace(/foo1{"bar":"qaz1"}/, 'foo1{"bar"s:"qaz1"}');
                        Fs.writeFileSync(cacheFilePath, content);
                    });

                    after(function () {
                        Shelljs.rm('-rf', cacheDir);
                        Cache.reset();
                    });

                    it('should return error', function (next) {
                        // increase freeDelay
                        Cache.reset();
                        Cache.configure({
                            enable: true,
                            max: 2000,          //Max cache size
                            maxAge: 1800000,        //Max Age (30 mins)
                            cold: {
                                enable: true,
                                singleFile: false,
                                flushDelay: 24,
                                freeDelay: 2500,
                                refreshInterval: 50
                            }
                        });

                        Cache.fromColdCache('foo1', function (err, value) {
                            Assert.ok(err);
                            next();
                        });
                    });

                });
            });

        });


    });

    describe('set/get:', function () {
        before(function () {
            Shelljs.rm('-rf', cacheDir);
            Cache.reset();
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: true,
                    flushDelay: 1,
                    freeDelay: 2500,
                    refreshInterval: 100
                }
            });
        });

        it('should set value', function (next) {
            Cache.set('foo', {
                value: 'bar'
            });
            next();
        });

        it('delay', function (next) {
            setTimeout(next, 50);
        });

        it('should get value', function (next) {
            Cache.get('foo', function (err, value) {
                Assert.ok(!err);
                Assert.equal('bar', value.value);
                next();
            });
        });

        it('should get value from cold cache', function (next) {
            Assert.ok(Fs.existsSync(Path.resolve(cacheDir, 'global-header-ebay-test/cache')));
            Cache.fromColdCache('foo', function (err, value) {
                Assert.ok(!err, err && err.stack);
                Assert.ok(Cache.coldCache.cacheStore.cache.foo);
                Assert.equal('bar', value.value);
                next();
            });
        });

        it('should read without cold cache', function (next) {
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 400,
                cold: {
                    enable: false,
                    flushDelay: 1,
                    freeDelay: 2500,
                    refreshInterval: 100
                }
            });

            Cache.get('foo', Cache.TYPE.FALLBACK, function (err, value) {
                Assert.ok(!err);
                Assert.equal('bar', value.value);
                next();
            });
        });

        it('delay for 450', function (next) {
            setTimeout(next, 450);
        });

        it('should read from backup', function (next) {
            var value = Cache.get('foo', Cache.TYPE.BACKUP);
            Assert.equal('bar', value.value);
            next();
        });

        it('should not fallback to cold cache', function (next) {
            Cache.reset();
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: false,
                    flushDelay: 1,
                    freeDelay: 2500,
                    refreshInterval: 100
                }
            });

            Cache.get('foo', Cache.TYPE.FALLBACK, function (err, value) {
                Assert.ok(!err);
                Assert.ok(!value);
                next();
            });
        });

        it('should fallback to cold cache', function (next) {
            Cache.reset();
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: true,
                    flushDelay: 1,
                    freeDelay: 2500,
                    refreshInterval: 100
                }
            });

            Cache.get('foo', Cache.TYPE.FALLBACK, function (err, value) {
                Assert.ok(!err);
                Assert.equal('bar', value.value);
                next();
            });
        });

        it('should not use cold cache and get nothing', function (next) {
            Cache.reset();
            Cache.configure({
                enable: true,
                max: 2000,          //Max cache size
                maxAge: 1800000,        //Max Age (30 mins)
                cold: {
                    enable: true,
                    flushDelay: 1,
                    freeDelay: 2500,
                    refreshInterval: 100
                }
            });

            Cache.get('foo', Cache.TYPE.BACKUP, function (err, value) {
                Assert.ok(!err);
                Assert.ok(!value);
                next();
            });
        });

        describe('header validation', function () {
            var sampleHeader = require('global-header-resources-ebay/resources/header_type_FULL__siteid_23__var_mweb__secure_1.json');

            function prepare() {
                Cache.reset();
                Cache.configure({
                    enable: true,
                    max: 2000,          //Max cache size
                    maxAge: 1800000,        //Max Age (30 mins)
                    cold: {
                        enable: true,
                        flushDelay: 1,
                        freeDelay: 2500,
                        refreshInterval: 100
                    }
                });
            }

            it('should set header template', function (next) {
                prepare();

                Cache.set('GH_foo', sampleHeader);

                setTimeout(next, 40);
            });

            it('should validate header template ok', function (next) {
                prepare();

                // get from cold cache
                Cache.get('GH_foo', Cache.TYPE.FALLBACK, function (err, value) {
                    Assert.ok(!err, err && err.stack);
                    delete value.htmlTemplate;
                    Assert.deepEqual(sampleHeader, value);
                    next();
                });
            });

            it('should fail to find header template', function (next) {

                prepare();

                Cache.get('GH_fooX', Cache.TYPE.FALLBACK, function (err, value) {
                    Assert.ok(!err);
                    next();
                });
            });

            it('should fail to validate header template', function (next) {
                prepare();

                // now store a bad one
                Cache.set('GH_fooBad', {
                    foo: 'bar'
                });

                setTimeout(function delay() {
                    prepare();

                    Cache.get('GH_fooBad', Cache.TYPE.FALLBACK, function (err, value) {
                        // make validation outside callback
                        setImmediate(function () {
                            Assert.ok(err);
                            next();
                        });
                    });
                }, 50);

            });

        });


    });

    describe('multi-process cache write', function () {
        var apps = [];

        before(function before() {
            Shelljs.rm('-rf', cacheDir);
        });

        after(function after() {
            console.log('After');
            apps.forEach(function (app) {
                app.kill();
            });
        });

        it('should write to the same cache from different processes', function (done) {

            Async.series([
                function start(next) {
                    var startTasks = [];
                    for (var i = 0; i < 10; i++) {
                        startTasks.push(startProcess);
                    }
                    Async.parallel(startTasks, next);
                },
                function write(next) {
                    var writeTasks = apps.map(function map(app) {
                        return writeOperation.bind(null, app);
                    });
                    Async.parallel(writeTasks, next);
                },
                function read(next) {
                    var readTasks = apps.map(function map(app) {
                        return function readOp(next) {
                            app.send(JSON.stringify({
                                type: 'read'
                            }));
                            app.once('message', function (msg) {
                                Assert.equal('bar', msg);
                                next();
                            });
                        };
                    });
                    Async.parallel(readTasks, next);
                }
            ], function onComplete(err) {
                Assert.ok(!err);
                done();
            });

            function startProcess(next) {
                var app = Cp.fork(Path.resolve(__dirname,
                    'fixtures/cache/process.js'));
                apps.push(app);
                app.once('message', function masterHandle(msg) {
                    console.log(msg);
                    if (msg === 'online') {
                        next();
                    }
                });
            }

            function writeOperation(app, next) {
                app.once('message', function (msg) {
                    Assert.equal('ok', msg);
                    next();
                });
                app.send(JSON.stringify({
                    type: 'write',
                    name: 'foo',
                    value: 'bar'
                }));
            }
        });
    });

});
