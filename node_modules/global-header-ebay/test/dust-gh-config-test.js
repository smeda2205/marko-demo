'use strict';
require('request-local');

var chai = require('chai'),
    assert = chai.assert,
    dust;

describe('dust-gh-config-test\n', function () {

    before(function () {
        dust = require('dustjs-linkedin');
        require('../dust').registerHelpers(dust);
        process.env.NODE_ENV = 'test';
    });

    it('header: AMP with application page id', function (next) {
        
        var code = '{@gh-configure var="amp" footerLayout="MIN" slot="amp-slot" ampForm="true" applicationPageId="2376289" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
        dust.renderSource(code, {dependencies: []}, function (err, out) {
            if (err) {
                return next(err);
            }

            assert.ok(out);
            assert.include(out, 'https://m.qa.ebay.com');
            assert.include(out, '_trksid=p2376289.m4969.l4282');
            assert.include(out, 'value="p2376289.m4969.l1313"');
            next();
        });
    });

    it('header: FULL with searchKeyword and allCategoriesText', function (next) {

        var code = '{@gh-configure layout="FULL" searchKeywords="nike" allCategoriesText="My categories" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
        dust.renderSource(code, {dependencies: []}, function (err, out) {
            if (err) {
                return next(err);
            }

            assert.ok(out);
            assert.include(out, 'www.qa.ebay.com');
            assert.include(out, '<link');
            assert.include(out, 'nike');
            assert.include(out, '<script');
            assert.include(out, 'My categories');
            next();
        });
    });

    it('header: FULL with searchFormAction', function (next) {

        var code = '{@gh-configure layout="FULL" searchFormAction="/my-custom-search" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
        dust.renderSource(code, {dependencies: []}, function (err, out) {
            if (err) {
                return next(err);
            }

            assert.ok(out);
            assert.include(out, 'www.qa.ebay.com');
            assert.include(out, '<link');
            assert.include(out, 'my-custom-search');
            assert.include(out, '<script');
            next();
        });
    });

    it('header: FULL with L1 categories, refined categories, and allCategoriesText', function (next) {

        var code = '{@gh-configure layout="FULL" allCategoriesText="Every category" categories="L1 Cat1:100,L1 Cat2:200" refinedCategories="L4 Cat:300,L3 Cat:400,L2 Cat:500" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
        dust.renderSource(code, {dependencies: []}, function (err, out) {
            if (err) {
                return next(err);
            }

            assert.ok(out);
            assert.include(out, '<script');
            assert.include(out, 'Every category');
            assert.include(out, '<option value="100">L1 Cat1</option>');
            assert.include(out, '<option value="200">L1 Cat2</option>');
            assert.include(out, '<option value="300">L4 Cat</option>');
            assert.include(out, '<option value="400">&#x2514;L3 Cat</option>');
            assert.include(out, '<option value="500">&#x2514;L2 Cat</option>');
            next();
        });
    });

    it('header: FULL with categories containing commas', function (next) {

        var code = '{@gh-configure layout="FULL" searchKeywords="nike" categories="A&comma; B and C:100,testCat2:200" refinedCategories="D&comma; E and F:300,topCat2:900" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
        dust.renderSource(code, {dependencies: []}, function (err, out) {
            if (err) {
                return next(err);
            }

            assert.ok(out);
            assert.include(out, '<option value="100">A, B and C</option>');
            assert.include(out, '<option value="300">D, E and F</option>');
            next();
        });
    });


    it('header: FULL with selected L1 category', function (next) {

        var code = '{@gh-configure layout="FULL" categoryId="200" categories="L1 Cat1:100,L1 Cat2:200" refinedCategories="L4 Cat:300,L3 Cat:400,L2 Cat:500" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
        dust.renderSource(code, {dependencies: []}, function (err, out) {
            if (err) {
                return next(err);
            }

            assert.ok(out);
            assert.include(out, '<script');
            assert.include(out, 'All Categories');
            assert.include(out, '<option value="100">L1 Cat1</option>');
            assert.include(out, '<option value="200" selected="selected">L1 Cat2</option>');
            next();
        });
    });





});
