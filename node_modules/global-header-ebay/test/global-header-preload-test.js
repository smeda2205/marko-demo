'use strict';
var assert = require('assert'),
    cal = require('cal'),
    globalHeader = require('../'),
    PDSHelper = require('../lib/pds-helper'),
    EPHelper = require('../lib/experimentation-helper');

cal.setDefaultWriteStream('console');

describe('should not call loadHeaderData when preload is set to true', function () {
        var count = 0;
        var pdsCount = 0;
        var _getFactors = EPHelper.getFactors;
        var _pdsProcessor = PDSHelper.pdsProcessor;

        before(function () {
            EPHelper.getFactors = function () {
                count++;
                _getFactors.apply(EPHelper, arguments);
            };
            PDSHelper.pdsProcessor = function(){
                pdsCount++;
                _pdsProcessor.apply(PDSHelper,arguments);
            };


        });
        after(function () {
            EPHelper.getFactors = _getFactors;
            count = 0;
            PDSHelper.pdsProcessor = _pdsProcessor;
            pdsCount =0;
        });


        it('prealod true - EP should not be called, PDS should not be called', function (next) {
            globalHeader.loadHeader(null, {
                pool: 'rand01kk',
                preload: true
            }, function (err, header) {
                    assert.equal(0, count);
                    assert.equal(0, pdsCount);
                    next();
            },next);
        });

        it('prealod false- EP should not be called, PDS should be called', function (next) {
            globalHeader.loadHeader(null, {
                pool: 'rand01kk',
                preload: false
            }, function (err, header) {
                    assert.equal(0, count);
                    assert.equal(1, pdsCount);
                    next();
            },next);
        });

});