'use strict';

// require("time-require");

var assert = require('assert'),
    cal = require('cal'),
    async = require('async'),
    servicecore = require('servicecore'),
    cookiesEbay = require('cookies-ebay/middleware'),
    commons = require('commons-ebay/middleware'),
    locale = require('locale-ebay'),
    services = require('../lib/services'),
    globalHeader = require('../'),
    EventEmitter = require('events').EventEmitter;

var Cache = require('../lib/cache');

cal.setDefaultWriteStream('console');

var debugPerf = require('debug')('header:test');

function injectRequest() {
    var req = new EventEmitter();
    req.correlationId = 0xabcdef;
    req.headers = {
        'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.149 Safari/537.36'
    };
    req.url = '/';
    req.get = function () {};
    req.header = function () {};
    return req;
}

function injectResponse() {
    var res = new EventEmitter();
    res.req = {};
    res.header = function () {};
    return res;
}

function middlewares(req, res, cb) {
    commons()(req, res, function () {
        servicecore()(req, res, function () {
            cookiesEbay()(req, res, function () {
                locale()(req, res, function () {
                    cb();
                });
            });
        });
    });
}

describe('GlobalHeader', function () {

    it('Raw header response', function (next) {
        var req = injectRequest(),
            res = injectResponse();

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            services.loadHeader(null, function (error, response) {
                assert.ok(!error);
                assert.ok(response);
                assert.ok(response.html);
                assert.ok(response.html.indexOf('My eBay') !== -1);
                next();
            });
        });
    });

    it('should have header response when app = NODE ', function (next) {


        var req = injectRequest(),
            res = injectResponse();

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            services.loadHeader({app:'NODE',layout:"FULL"}, function (error, response) {
                assert.ok(!error);
                assert.ok(response);
                assert.ok(response.html);
                assert.ok(response.html.indexOf('My eBay') !== -1);
                next();
            });
        });
    });

    it('Raw footer response', function (next) {


        var req = injectRequest(),
            res = injectResponse();

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            services.loadFooter(null, function (error, response) {
                assert.ok(!error);
                assert.ok(response);
                next();
            });
        });
    });

});


describe('GlobalHeader - load', function () {
    before(function () {
        Cache.reset();
        Cache.configure({
            enable: true,
            max: 2000,          //Max cache size
            maxAge: 1800000,        //Max Age (30 mins)
            cold: {
                enable: false,
                freeDelay: 360000,  // 6 min before releasing memory
                refreshInterval: 1800000 // every 30 min
            }
        });
    });

    it('header service: load 1', function (next) {


        var req = injectRequest(),
            res = injectResponse();

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            services.loadHeader({layout: 'MIN'}, function (error, response) {
                assert.ok(!error);
                assert.ok(response);
                next();
            });
        });
    });


    it('header service: load parallel - 20', function (next) {


        var req = injectRequest(),
            res = injectResponse();

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            async.times(20, function (n, cb) {
                services.loadHeader({layout: 'FULL'}, function (error, response) {
                    assert.ok(!error);
                    assert.ok(response);
                    cb();
                });
            }, function (err) {
                next();
            });

        });
    });


    it('header service: load series - 20', function (next) {


        var req = injectRequest(),
            res = injectResponse();

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            async.timesSeries(20, function (n, cb) {
                services.loadHeader({lang: 'fr-FR'}, function (error, response) {
                    assert.ok(!error);
                    assert.ok(response);
                    cb();
                });
            }, function (err) {
                next();
            });

        });
    });

    it('should cache the header correctly', function (next) {


        async.series([
                function uncached(callback) {
                    var st = Date.now();

                    globalHeader.loadHeader(null, {
                            pool: 'rand01'
                        },
                        function (err) {
                            if (err) {
                                return callback(err);
                            }

                            debugPerf('Uncached header loaded in ' + (Date.now() - st) + 'ms');
                            callback();
                        });
                },
                function cached(callback) {
                    var st = Date.now();

                    globalHeader.loadHeader(null, {
                            pool: 'rand01'
                        },
                        function (err) {
                            if (err) {
                                return callback(err);
                            }
                            var totalTime = (Date.now() - st);
                            assert.ok(totalTime < 40, 'actual time: ' + totalTime);
                            debugPerf('Cached header loaded in ' + (Date.now() - st) + 'ms');
                            callback();
                        });
                }
            ],
            next);
    });

    it('should cache the header correctly with multiple requests in parallel', function (next) {

        async.series([
                function uncached(callback) {
                    async.times(10, function (n, cb) {
                        var st = Date.now();

                        globalHeader.loadHeader(null, {
                                pool: 'rand02'
                            },
                            function (err) {
                                if (err) {
                                    return cb(err);
                                }

                                debugPerf('Uncached header loaded in ' + (Date.now() - st) + 'ms');
                                cb();
                            });
                    }, callback);
                },
                function cached(callback) {
                    async.times(10, function (n, cb) {
                        var st = Date.now();

                        globalHeader.loadHeader(null, {
                                pool: 'rand02'
                            },
                            function (err) {
                                if (err) {
                                    return cb(err);
                                }

                                debugPerf('Cached header loaded in ' + (Date.now() - st) + 'ms');
                                assert.ok((Date.now() - st) < 40);
                                cb();
                            });
                    }, callback);
                }
            ],
            next);
    });


});
