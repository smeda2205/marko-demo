'use strict';
var Assert = require('assert'),
    cal = require('cal'),
    middleware = require('../middleware'),
    PDSHelper = require('../lib/pds-helper'),
    EPHelper = require('../lib/experimentation-helper');

cal.setDefaultWriteStream('console');

describe(__filename, function () {
        var count = 0;
        var pdsCount = 0;
        var _getFactors = EPHelper.getFactors;
        var _pdsProcessor = PDSHelper.pdsProcessor;

        before(function () {
            EPHelper.getFactors = function () {
                count++;
                _getFactors.apply(EPHelper, arguments);
            };
            PDSHelper.pdsProcessor = function(){
                pdsCount++;
                _pdsProcessor.apply(PDSHelper,arguments);
            };


        });
        after(function () {
            EPHelper.getFactors = _getFactors;
            count = 0;
            PDSHelper.pdsProcessor = _pdsProcessor;
            pdsCount =0;
        });

        it('middleware should trigger preload and ep should not be trigger', function (next) {
            count = 0;
            middleware()({
                route: {
                    config: {
                        'global-header': {
                            preload: true
                        }
                    }
                }
            }, {}, function () {
                //
                Assert.equal(0, count);
                next();
            });

        });


        it('middleware should not trigger preload and ep should not be trigger', function (next) {
            count = 0;
            middleware()({
                route: {
                    config: {
                        'global-header': {
                            preload: false
                        }
                    }
                }
            }, {}, function () {
                Assert.equal(0, count);
                next();
            });


        });

        it('middleware should trigger preload and pds should trigger', function (next) {
            pdsCount = 0;
            middleware()({
                route: {
                    config: {
                        'global-header': {
                            preload: true
                        }
                    }
                }
            }, {}, function () {
                //
                Assert.equal(1, pdsCount);
                next();
            });

        });


        it('middleware should not trigger preload and ep should not be trigger', function (next) {
            pdsCount = 0;
            middleware()({
                route: {
                    config: {
                        'global-header': {
                            preload: false
                        }
                    }
                }
            }, {}, function () {
                Assert.equal(0, pdsCount );
                next();
            });


        });


});
