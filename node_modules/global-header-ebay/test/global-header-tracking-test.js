'use strict';

// require("time-require");

var cal = require('cal'),
    assert = require('assert'),
    services = require('../lib/services'),
    servicecore = require('servicecore'),
    cookiesEbay = require('cookies-ebay/middleware'),
    ep = require('experimentation-ebay'),
    tracking = require('tracking-ebay'),
    commons = require('commons-ebay/middleware'),
    locale = require('locale-ebay'),
    globalHeader = require('../'),
    EventEmitter = require('events').EventEmitter;

require('chai').should();

cal.setDefaultWriteStream('console');

function injectRequest() {
    var req = new EventEmitter();
    req.correlationId = 0xabcdef;
    req.headers = {
        'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.149 Safari/537.36'
    };
    req.url = '/';
    req.get = function () {};
    req.header = function () {};
    return req;
}

function injectResponse() {
    var res = new EventEmitter();
    res.req = {};
    res.header = function () {};
    return res;
}

function middlewares(req, res, cb) {
    commons()(req, res, function () {
        servicecore()(req, res, function () {
            cookiesEbay()(req, res, function () {
                tracking.middleware()(req, res, function () {
                    locale()(req, res, function () {
                        ep()(req, res, function () {
                            cb();
                        });
                    });
                });
            });
        });
    });
}

describe(__filename, function () {

    var oldLoadHeader = services.loadHeader;

    after(function () {
        services.loadHeader = oldLoadHeader;
    });

    it('header service: load 1 ep should not been called', function (done) {


        var req = injectRequest(),
            res = injectResponse();

        var trackingEvents = {};
        services.loadHeader = function (options, callback) {
            try {
                //BENMA NOTE: EP IS non-deterministic
                assert.equal(trackingEvents.qt,undefined);
                assert.equal(trackingEvents.qc,undefined);
                assert.equal(options.factor,undefined);
                done();
            }
            catch (err) {
                done(err);
            }
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            // hijack tracking to capture tracking events for GH experimentation
            req.ebay.tracking.trackVectorTag = function (name, value) {
                trackingEvents[name] = value;
            };
            globalHeader.loadHeader(req, {}).done(function (error, response) {
            });
        });
    });

    it('should handle negative case when factors failed to load', function (done) {


        var req = injectRequest(),
            res = injectResponse();

        services.loadHeader = function (options, callback) {
            try {
                assert.ok(!options.factor);
                done();
            }
            catch (err) {
                done(err);
            }
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ebay.experimentation.getContext = function (cb) {
                cb(new Error('Test error'));
            };
            // hijack tracking to capture tracking events for GH experimentation
            globalHeader.loadHeader(req, {}).done(function (error, response) {
            });
        });
    });

});
