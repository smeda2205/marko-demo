'use strict';

var cal = require('cal'),
    chai = require('chai'),
    assert = chai.assert,
    events = require('events'),
    globalHeader = require('../lib'),
    DataHolder = require('raptor-async/DataHolder');

cal.setDefaultWriteStream('console');

describe(__filename, function () {
    var req;
    beforeEach(function(){
        req = new events.EventEmitter();
        req.ebay = {
            experimentation: {}
        };
        req.ebay.ghFactorsPending = new DataHolder();
        req.ebay.ghFactorsPending.resolve(['f1', 'f2']);
        req.ebay.getSiteId = function(){return 0;};
        req.ebay.isSecure = function(){return false;};
        req.ebay.getPageId = function(){return 0;};
        req.ebay.getUserAgent = function(){return null;};
        req.ebay.getJSPersistentUserId = function(){ return "test";};
        req.ebay.getUserFirstName = function(){ return "firstname";};
        req.locality = {
            "country": "GB",
            "countryId": 3,
            "isGeoCountry": false,
            "siteId": 3,
            "locale": "en-GB",
            "language": "en",
            "defaultLanguage": "en-GB",
            "supportedLanguages": [
              "en-GB"
            ],
            "directionality": "ltr",
            "isoCurrencyCode": "GBP",
            "siteDefaultIsoCurrencyCode": "GBP",
            "timeZone": "Europe/London",
            "timeZoneStd": "GMT",
            "timeZoneSummer": "BST",
            getGeoConfig :function(){
                return {
                    isGeoEnabled : function(){return false;}
                };

            }
        };
        req.ebay.cookies={"test":1,
                Cookies : {USER_LOCALE :0},
                getCookieValue :function(){return 0 ;}
        };
    });

    after(function () {

    });

    it('should have signin =1 , firstname and userId when signin', function (next) {
        this.timeout(10000);
        req.ebay.hasLevel1UserId = function(){return true;};
        req.ebay.hasLevel2UserId = function(){return true;};

        globalHeader.loadHeader(req, {
                pool: 'rand0101'
            },
            function (err, header) {
                assert.include(header._jsOptions, 'sin:1,fn:"firstname",id:"test"');

                next();
            }
        );

    });
    it('should have signin =2, when userId is not null and not signin', function (next) {
        this.timeout(10000);
        req.ebay.hasLevel1UserId = function(){return false;};
        req.ebay.hasLevel2UserId = function(){return false;};
        globalHeader.loadHeader(req, {
                pool: 'rand0101'
            },
            function (err, header) {
                assert.include(header._jsOptions, 'sin:2,fn:"firstname",id:"test"');

                next();
            }
        );

    });
    it('should have signin =0, when userId is null and not signin', function (next) {
        this.timeout(10000);
        req.ebay.hasLevel1UserId = function(){return false;};
        req.ebay.hasLevel2UserId = function(){return false;};
        req.ebay.getJSPersistentUserId= function(){return null;};
        req.ebay.getPresentationUserId= function(){return null;};

        globalHeader.loadHeader(req, {
                pool: 'rand0101'
            },
            function (err, header) {
                assert.include(header._jsOptions, 'sin:0,fn:"firstname",id:""');
                next();
            }
        );

    });

    it('should get amp header', function (next) {
        this.timeout(10000);
        req.ebay.hasLevel1UserId = function(){return true;};
        req.ebay.hasLevel2UserId = function(){return true;};

        globalHeader.loadHeader(req, {
            pool: 'rand0101',
            var: 'amp'
        }, function (err, header) {
            assert.ok(header.inlineCSS);
            assert.ok(header.html);
            next();
        });
    });
});
