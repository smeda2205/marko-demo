'use strict';

// require("time-require");
require('request-local');

var chai = require('chai'),
    assert = chai.assert,
    cal = require('cal'),
    locale = require('locale-ebay'),
    servicecore = require('servicecore'),
    cookiesEbay = require('cookies-ebay/middleware'),
    commons = require('commons-ebay/middleware'),
    globalHeaderMiddleware = require('../middleware'),
    requestLocal = require('request-local/middleware'),
    EventEmitter = require('events').EventEmitter;

var dust;

cal.setDefaultWriteStream('console');

function injectRequest() {
    var req = new EventEmitter();
    req.correlationId = 0xabcdef;
    req.headers = {
        'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.149 Safari/537.36'
    };
    req.url = '/';
    req.get = function () {};
    req.header = function () {};
    return req;
}

function injectResponse(req) {
    var res = new EventEmitter();
    res.req = req || {};
    res.header = function () {};
    return res;
}

function middlewares(req, res, cb) {
    requestLocal.create()(req, res, function () {
        commons()(req, res, function () {
            servicecore()(req, res, function () {
                cookiesEbay()(req, res, function () {
                    locale()(req, res, function () {
                        globalHeaderMiddleware()(req, res, function () {
                            cb();
                        });
                    });
                });
            });
        });
    });
}

describe(__filename, function () {

    before(function () {
        dust = require('dustjs-linkedin');
        require('../dust').registerHelpers(dust);
        process.env.NODE_ENV = 'test';
    });

    it('full header', function (next) {
        var req = injectRequest(),
            res = injectResponse(req);

        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-body-js/}</body></html>';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }

                assert.ok(out);
                assert.include(out, 'www.qa.ebay.com');
                assert.include(out, '<link');
                assert.include(out, '<script');
                assert.include(out, 'My eBay');
                next();
            });
        });
    });

    it('full footer', function (next) {

        var req = injectRequest(),
            res = injectResponse(req);

        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" /}{@gh-footer/}';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }

                assert.ok(out);
                assert.include(out, 'www.ebayinc.com');
                assert.include(out, 'pages.qa.ebay.com');
                next();
            });
        });
    });

    it('FULL header and footer response: _ul=RUru_RU', function (next) {


        var req = injectRequest(),
            res = injectResponse(req);

        req.ip = '127.0.0.1';
        req.query = {
            '_ul': 'RUru_RU'
        };

        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-footer/}{@gh-body-js/}</body></html>';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }

                assert.ok(out);
                assert.include(out, '.ebay.com');
                assert.include(out, '<link');
                assert.include(out, '<script');
                assert.include(out, 'Все права защищены');
                next();
            });
        });
    });

    it('FULL header and footer response: _ul=PK', function (next) {


        var req = injectRequest(),
            res = injectResponse(req);

        req.ip = '127.0.0.1';
        req.query = {
            '_ul': 'PK'
        };

        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-footer/}{@gh-body-js/}</body></html>';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }
                assert.ok(out);
                assert.include(out, '.ebay.com');
                next();
            });
        });
    });


    it('FULL header and MIN footer response: _ul=DEde_DE', function (next) {

        var req = injectRequest(),
            res = injectResponse(req);

        req.headers.host = 'www.ebay.de';

        req.ip = '127.0.0.1';
        req.query = {
            '_ul': 'DEde_DE'
        };

        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" footerLayout="MIN" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-footer/}{@gh-body-js/}</body></html>';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }

                assert.ok(out);
                assert.include(out, '.ebay.com');
                assert.include(out, '<link');
                assert.include(out, '<script');
                assert.include(out, 'Mein eBay');
                assert.include(out, 'Alle Rechte vorbehalten');
                next();
            });
        });
    });

    it('FULL header and MIN footer response: www.benl.ebay.be', function (next) {

        var req = injectRequest(),
            res = injectResponse(req);

        req.headers.host = 'www.benl.ebay.be';


        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" footerLayout="MIN" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-footer/}{@gh-body-js/}</body></html>';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }

                assert.ok(out);
                assert.include(out, '.ebay.com');
                assert.include(out, '<link');
                assert.include(out, '<script');
                assert.include(out, 'Mijn eBay');
                assert.include(out, 'Alle rechten voorbehouden');
                next();
            });
        });
    });


    it('FULL header and MIN footer response: www.befr.ebay.be', function (next) {

        var req = injectRequest(),
            res = injectResponse(req);

        req.headers.host = 'www.befr.ebay.be';


        middlewares(req, res, function () {
            var code = '{@gh-configure layout="FULL" footerLayout="MIN" /}<html><head>{@gh-head-css/}</head><body>{@gh-header/}{@gh-footer/}{@gh-body-js/}</body></html>';
            dust.renderSource(code, {dependencies: []}, function (err, out) {
                if (err) {
                    return next(err);
                }

                assert.ok(out);
                assert.include(out, '.ebay.com');
                assert.include(out, '<link');
                assert.include(out, '<script');
                assert.include(out, 'Mon eBay');
                assert.include(out, 'Tous droits réservés');
                next();
            });
        });
    });

});
