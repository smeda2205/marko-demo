'use strict';

var AsyncValue = require('raptor-async/AsyncValue'),
    logger = require('logging-inc').logger('header/ep'),
    util = require('util'),
    cal = require('cal');

function isExperiementAllowedForPage(whiteListPageIds, pageId) {
    if (whiteListPageIds) {
        whiteListPageIds = whiteListPageIds.trim();
    } else {
        return false;
    }

    if (whiteListPageIds.toLowerCase().indexOf("all") !== -1) {
        return true;
    }

    if (!pageId) {
        return false;
    }

    whiteListPageIds = whiteListPageIds.split(/\s*,\s*/);

    if (whiteListPageIds.indexOf(pageId) !== -1) {
        return true;
    }

    return false;
}

module.exports.getFactors = function getFactors(req, callback) {

    if (!req || !req.ebay || !req.ebay.experimentation) {
        return callback(new Error('Experimentation middleware not initialized'));
    }

    var ghFactorsPending = req.ebay.ghFactorsPending;
    if (ghFactorsPending) {
        return ghFactorsPending.done(callback);
    }

    ghFactorsPending = req.ebay.ghFactorsPending = new AsyncValue();
    ghFactorsPending.done(callback);

    var pageId = req.ebay.getPageId();
    if (pageId) {
        pageId = pageId.toString();
    }

    req.ebay.experimentation.getContext(function (err, epContext) {
        if (err) {
            return ghFactorsPending.reject(err);
        }

        var treatments = epContext.getTreatmentsWithFactor('GH_FACTORS');
        var finalFactors = [], epToLog="";

        if (treatments) {
            treatments.forEach(function (treatment) {
                var ghFactors;
                var whiteListPageIds;
                var factors = treatment.factors;
                for (var i = 0; i < factors.length; i++) {
                    var factor = factors[i];
                    epToLog += util.format('%s_%s=%s&',factor.name,factor.id, factor.value);

                    if (factor.name === 'GH_FACTORS') {
                        ghFactors = factor.value;
                    }
                    else if (factor.name === 'GH_FACTORS_PAGEID') {
                        whiteListPageIds = factor.value;
                    }
                    if (ghFactors && whiteListPageIds) {
                        break;
                    }
                }

                if (ghFactors && whiteListPageIds && isExperiementAllowedForPage(whiteListPageIds, pageId)) {
                    finalFactors = finalFactors.concat(ghFactors.split(/\s*,\s*/));
                    epToLog += util.format('TreatmentServed_%s=1&',treatment.treatmentId);
                    epContext.trackServedTreatment(treatment);
                } else {
                  epToLog += util.format('TreatmentServed_%s=0&',treatment.treatmentId);
                }

            });
        }
        logger.info('GH factors: ', finalFactors);
        var event = cal.createEvent('globalheader', 'GH_Exp', cal.Status.SUCCESS, epToLog);
        event.complete();
        ghFactorsPending.resolve(finalFactors);

    });
};
