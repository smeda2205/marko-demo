'use strict';

var utils = require('./utils'),
    Header = require('./Header'),
    Footer = require('./Footer'),
    services = require('./services'),
    tryRequire = require('try-require'),
    requestLocal = tryRequire('request-local'),
    AsyncValue = require('raptor-async/AsyncValue'),
    PDSHelper = require('./pds-helper'),
    logger = require('logging-inc').logger('header/index'),
    debug = require('debug')('header:index');


function jsDecoratorString(options) {
    var propsStr = '';

    var props = [];

    function addProp(name, value) {
        if (name && value) {
            props.push(name + ':' + value);
        }
    }
    addProp('sin', options.signedIn || '0');
    addProp('ct', options.cartCount);
    addProp('pageId', options.pageId);


    if (options.isGeoCountry && options.localeCookie) {
        addProp('geoul', "'" + options.localeCookie + "'");
        addProp('langs', '1');
    }
    if (options.categoryId) {
        addProp('selectedCatId', "'" + options.categoryId + "'");
    }
    addProp("fn",'"'+options.firstName+'"');
    addProp("id",'"'+options.userId+'"');
    if (props.length) {
        propsStr = props.join(',');
    }

    return propsStr;
}

function populateDefaultOptions(req, options, defaultSiteId) {
    var isSecure,
        pageId,
        userAgent,
        geoConfig,
        locality,
        ebay,
        cookies,
        userId,
        userFirstName;
    if (!req && requestLocal) {
        try {
            req = requestLocal.data.request;
        } catch (e) {
            console.error('global-header-ebay: requestLocal context issue');
        }
    }
    if (req) {
        locality = req.locality;
        ebay = req.ebay;
        cookies = ebay && ebay.cookies;
    }

    delete options.queryString;

    options.app = options.app || 'NODE';
    options.pool = options.pool || utils.getPoolName();
    if (ebay && locality && cookies) {

        geoConfig = locality.getGeoConfig();
        userId = getDisplayUserId(ebay);
        // check to see if user sigin in or not
        if((ebay.hasLevel1UserId() || ebay.hasLevel2UserId()) && (!cookies.getCookieValue('BUSINESS_ROLE_GUEST_SESSION'))  ){
            options.signedIn ='1';

        //user will become recognized state when userId is not empty and not sign in
        }else if(userId !== null){
            options.signedIn ='2';
        //ohter wise user is guest
        }else{
            options.signedIn='0';
        }
        options.userId = (!userId ? '' : userId);
        userFirstName = ebay.getUserFirstName();

        options.firstName = (!userFirstName ? '' : userFirstName);

        if (locality.isGeoCountry && !defaultSiteId) {
            options.siteId = locality.siteId || ebay.getSiteId() || 0;
        } else {
            options.siteId = ebay.getSiteId() || 0;
        }
        if (geoConfig.isGeoEnabled(locality.isGeoCountry)) {
            options.isGeoCountry = locality.isGeoCountry;
            options.siteId = geoConfig.getGroupedUserLocationSite('GBH_HEADER', options.siteId);
        }

        options.localeCookie = cookies.getCookieValue(cookies.Cookies.USER_LOCALE);
        options.language = options.language || locality.locale;
        isSecure = ebay.isSecure();
        if (isSecure) {
            options.secure = isSecure;
        }
        pageId = ebay.getPageId();
        if (pageId) {
            options.pageId = pageId;
        }
        userAgent = ebay.getUserAgent();
        if (userAgent && userAgent.indexOf('Android') !== -1 && userAgent.indexOf('Mobile') === -1) {
            options.theme = 'tablet';
        }
    }

    if (options.human === null || options.human === undefined) {
        options.human = false;
    }

}
/**
 * this method get userDisplayId
 * return null when signout or guest user
 */
function getDisplayUserId(ebay){


        var userId= null;
        if(ebay=== null || ebay === undefined){
            return null;

        }

        userId = ebay.getJSPersistentUserId();

        if(userId === null || userId === undefined){
            userId = ebay.getPresentationUserId();
        }
        //@@__@@__@@ will be set if user signout
        if(!userId || userId.indexOf("@@__@@__@@")!==-1){
            return null;
        }
        //if( return null;

        return userId;
}
/**
 * This method loads the global header service.
 */
function loadHeaderService(options, callback) {
    services.loadHeader(options, function (err, headerResponse) {
        if (err || !headerResponse) {
            return callback(err);
        }

        var jsOptions = jsDecoratorString(options);

        // Wrap the header response with an object that we can add
        // new methods to and also provide the templified version of the
        // HTML
        callback(null, new Header(headerResponse, jsOptions));
    });
}

function _loadHeader(req, options, callback) {
    var host = req && req.ebay && req.ebay.host;

    if (host) {
        options.host = host;
    }

    loadHeaderService(options, function (error, header) {
        if (header) {
            return callback(error, header);
        } else {
            debug('retrying header with default siteId');
            populateDefaultOptions(req, options, true);
            loadHeaderService(options, callback);
        }
    });
}

/**
 * Load the global header Data
 *
 * @param  {Object} req Req object
 * @param  {Object} options Various options that are supported by the global footer service
 * @param  {Function} callback A callback that will be invoked when the {global-header-ebay/lib/Footer} object is available
 * @return {raptor-async/AsyncValue} Returns an AsyncValue instance that eventually resolves to a {global-header-ebay/lib/Footer} object.
 */
function _loadHeaderData(req, options, callback){
    PDSHelper.pdsProcessor(req, function (err, attributes) {
        if (err) {
            logger.error('Failed to get pds attributes');
        }
        if (attributes) {
            options.cartCount = attributes.cart;
        }
        callback();
    });
}

/**
 * Load the global header Data
 */
exports.loadHeaderData = _loadHeaderData;

/**
 * Load the global header.
 *
 * @param  {Object} req Req object
 * @param  {Object} options Various options that are supported by the global footer service
 * @param  {Function} callback A callback that will be invoked when the {global-header-ebay/lib/Footer} object is available
 * @return {raptor-async/AsyncValue} Returns an AsyncValue instance that eventually resolves to a {global-header-ebay/lib/Footer} object.
 */
exports.loadHeader = function loadHeader(req, options, callback) {
    var pending;
    options = options || {};

    populateDefaultOptions(req, options, false);

    if (!callback) {
        pending = new AsyncValue();
    }

    function loadHeaderCallback(){
        _loadHeader(req, options, function (err, header) {
            if (callback) {
                callback(err, header);
            } else {
                if (err) {
                    return pending.reject(err);
                }
                pending.resolve(header);
            }
        });
    }

    if(options.preload){
        loadHeaderCallback();
    }else{
        _loadHeaderData(req, options, function (errors, results) {
            loadHeaderCallback();
        });
    }

    return pending;
};


/**
 * This method loads the global footer by *always* making a service call.
 */
function loadFooterService(options, callback) {
    services.loadFooter(options, function (err, footerResponse) {
        if (err || !footerResponse) {
            return callback(err);
        }

        // Wrap the footer response with an object that we can add
        // new methods to
        callback(null, new Footer(footerResponse));
    });
}

function _loadFooter(req, options, callback) {
    var host = req && req.ebay && req.ebay.host;

    if (host) {
        options.host = host;
    }

    loadFooterService(options, function (error, footer) {
        if (footer) {
            return callback(error, footer);
        } else {
            debug('retrying footer with default siteId');
            populateDefaultOptions(req, options, true);
            loadFooterService(options, callback);
        }
    });
}

/**
 * Load the global footer.
 *
 * @param  {Object} req Req object
 * @param  {Object} options Various options that are supported by the global footer service
 * @param  {Function} callback A callback that will be invoked when the {global-header-ebay/lib/Footer} object is available
 * @return {raptor-async/AsyncValue} Returns an AsyncValue instance that eventually resolves to a {global-header-ebay/lib/Footer} object.
 */
exports.loadFooter = function (req, options, callback) {
    var pending;
    options = options || {};
    populateDefaultOptions(req, options, false);

    if (!callback) {
        pending = new AsyncValue();
    }

    _loadFooter(req, options, function (err, footer) {
        if (callback) {
            callback(err, footer);
        } else {
            if (err) {
                return pending.reject(err);
            }
            pending.resolve(footer);
        }
    });
    return pending;
};
