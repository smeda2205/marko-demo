'use strict';

var extend = require('raptor-util/extend');

var dynamicOptionsToSkip = [
    'searchFormAction',
    'searchKeywords'
];

var knownCommonOptions = {
    app: function (value, paramsBuilder) {
        paramsBuilder.addParam('app', value);
    },
    human: function (value, paramsBuilder) {
        paramsBuilder.addParam('human', value === false || value === 0 || value === '0'  ? '0' : '1');
    },
    siteId: function (value, paramsBuilder) {
        paramsBuilder.addParam('siteid', !value ? 0 : value);
    },
    secure: function (value, paramsBuilder) {
        paramsBuilder.addParam('secure', value ? 1 : 0);
    },
    pageId: function (value, paramsBuilder) {
        paramsBuilder.addParam('pageid', value);
    },
    pool: function (value, paramsBuilder) {
        paramsBuilder.addParam('pool', value);
    },
    var: function (value, paramsBuilder) {
        paramsBuilder.addParam('var', value);
    },
    factors: function (value, paramsBuilder) {
        if (value) {
            if (Array.isArray(value)) {
                value = value.join(",");
            }
            paramsBuilder.addParam('factor', value);
        }
    },
    mainSiteId: function (value, paramsBuilder) {
        paramsBuilder.addParam('msiteid', value);
    },
    language: function (value, paramsBuilder) {
        paramsBuilder.addParam('lang', value);
    },
    theme: function (value, paramsBuilder) {
        paramsBuilder.addParam('theme', value);
    }
};

var knownHeaderOptions = extend({
    layout: function (value, paramsBuilder) {
        paramsBuilder.addParam('type', value || 'FULL');
    },
    categoryId: function (value, paramsBuilder) {
        paramsBuilder.addParam('categoryid', !value ? 0 : value);
    },
    dsVersion: function (value, paramsBuilder) {
        paramsBuilder.addParam('ds', value);
    }
}, knownCommonOptions);

var knownFooterOptions = extend({
    footerLayout: function (value, paramsBuilder) {
        paramsBuilder.addParam('type', value || 'NORMAL');
    }
},knownCommonOptions);

function createParamsBuilder() {
    var params = [];

    return {
        addParam: function (name, value) {
            params.push(name + '=' + value);
        },

        getQueryParams: function () {
            return params.join("&");
        }
    };
}

function buildQueryString(options, knownOptions, supportExtraParams) {
    var paramsBuilder = createParamsBuilder();

    for (var name in options) {
        if (options.hasOwnProperty(name)) {
            var value = options[name];

            var handler = knownOptions[name];

            if (handler) {
                handler(value, paramsBuilder);
            } else if (value !== null && value !== undefined && supportExtraParams) {
                if (dynamicOptionsToSkip.indexOf(name) === -1) {
                    paramsBuilder.addParam(name, value);
                }
            }
        }
    }

    return paramsBuilder.getQueryParams();
}

exports.header = function (options) {
    // Sample URL:
    // http://gh.ebaystatic.com/header/json?type=FULL&categoryid=0&human=0&siteid=0&secure=0&app=RAPTOR&pageid=2051840
    // better to no support dynamic options as it may break GH service and also increase cache on service as well as on app side
    return buildQueryString(options, knownHeaderOptions, false); //  << set to false, it still can handle js options
};

exports.footer = function (options) {
    return buildQueryString(options, knownFooterOptions, false);
};
