'use strict';

var Assert = require('assert');
var Hoek = require('hoek');
var Utils = require('./utils');

module.exports.hook = function hook(req) {
    var onFinish = Hoek.once(_onFinish);

    req.metrics = createMetrics();
    req.once('socket', onSocket);
    req.once('response', onReponse);
    req.once('error', onFinish);
    var _res, _socket;

    function _onFinish() {
        req.metrics.add('end');

        // cleanup
        req.removeListener('socket', onSocket);
        req.removeListener('response', onReponse);
        req.removeListener('error', onFinish);

        if (_res) {
            _res.removeListener('socket', onFinish);
            _res.removeListener('error', onFinish);
        }

        if (req.socket) {
            req.socket.removeListener('connect', onConnect);
            req.socket.removeListener('connect', onLookup);
        }
    }

    function onConnect() {
        req.metrics.add('connect');
    }

    function onReponse(res) {
        _res = res;
        req.metrics.add('response');
        res.once('end', onFinish);
        res.once('error', onFinish);
    }

    function onSocket(socket) {
        req.metrics.add('socket');
        socket.setNoDelay(true);
        socket.once('lookup', onLookup);
        socket.once('connect', onConnect);
    }

    function onLookup() {
        req.metrics.add('lookup');
    }
};


function RequestMetrics() {
    this.events = [];
    this.add('start');
}

var proto = RequestMetrics.prototype;

proto.add = function add(name) {
    var last = this.events[this.events.length - 1];
    var start = last ? last.end : Date.now();
    var end = Date.now();
    var duration = end - start;
    this.events.push({
        name: name,
        start: start,
        end: end,
        duration: duration
    });
};

proto.toMap = function toMap() {
    return this.events.reduce(function reduce(memo, evt) {
        memo[evt.name] = evt;
        return memo;
    }, {});
};

var createMetrics = module.exports.createMetrics = function createMetrics() {
    return new RequestMetrics();
};
