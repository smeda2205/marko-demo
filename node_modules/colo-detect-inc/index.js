'use strict';

/**
 * coloDetect - Uses heuristics to determine datacenter it is running in.
 *              Applications should never use this module. They need to
 *              be location-independent. It is for tasks like metrics
 *              collection where the ability to drill down by data center
 *              is important to resolving location-specific issues.
 *
 * @return last third component in the result of running hostname -f.
 *         Ideally, you should call this once and keep the result as
 *         calling a shell operation is not the most efficient thing.
 *         Note that there are heuristics here. For ebay, the general
 *         hostname -f form is host.xxx.ebay.com where xxx might be
 *         slc, chd, qa usually.
 *         eBay: Whatever is in the 3rd from the right part of the
 *               fully qualified hostname
 *
 */
var shell = require('shelljs');
var parts;

module.exports.coloDetect = function coloDetect(testHost) {
    var env = process.env.NODE_ENV,
    deploySite = process.env.DEPLOY_SITE;

    if (!env || env === 'development') {
        return 'development';
    }
    if (deploySite) {
      return deploySite.toLowerCase();
    }
    parts = getHostName(testHost);

    // Structure:
    // parts[0]=hostname, parts[1]=slc|phx|chd..., parts[2]=ebay, parts[3]=com
    if (parts[parts.length - 2] === 'ebay') {
        return  parts[parts.length - 3];
    }
    return '';
};

// Determine the MX host for the colo
// eBay is always atom
module.exports.coloMxDetect = function coloMxDetect(testHost) {
    var env = process.env.NODE_ENV;
    var mxhost = 'mx.vip.ebay.com';
    if (env === 'staging') {
        mxhost = 'mx.vip.qa.ebay.com';
    }
    return mxhost;

};

// Returns an array with the parts of the FQDN of the host
function getHostName (testHost) {
  var res;

  if (testHost) {
    res = testHost;
  } else {
    res = shell.exec('hostname -f', 'silent');
    console.log("hostname -f: ", res);

    if (res.code !== 0) {
      console.error('Cannot determine colo', err, 'Got ', res);
      return '';
    }
    res = res.output;
  }

  var parts = res.split('.');
  if (parts.length <= 3) {
    var err = new Error("Cannot determine colo from " + res + ". Expected host.colo.xxx.com format");
    console.error(err.message);
    return [];
  }
  return parts;
}
