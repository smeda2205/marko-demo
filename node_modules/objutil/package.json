{
  "name": "objutil",
  "version": "0.4.1",
  "description": "A collection of Object utilities",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "publishConfig": {
    "registry": "http://npm.corp.ebay.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.corp.ebay.com:nodejs/node-objutil.git"
  },
  "keywords": [
    "node",
    "javascript",
    "nodejs",
    "object",
    "utility",
    "utils"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "08b76538187715c4e714c5bd89f8e6926c45ed67",
  "devDependencies": {
    "mocha": "~1.8.2"
  },
  "dependencies": {
    "core-util-is": "~1.0.0"
  },
  "readme": "objutil [![Build Status](https://ebayci.qa.ebay.com/CI-Instance/buildStatus/icon?job=node-objutil)](https://ebayci.qa.ebay.com/CI-Instance/job/node-objutil) \n============\n\nA set of utilities for working with Objects in Node.js.\n\n#####Changes in v0.2.x\n- Change API from `copy` and `deepCopy` to `clone` and `deepClone`. (Old APIs are preserved for backward compatibility.)\n- Add `mixin` API\n\n\n### mixin(src..., dest)\nShallow copies properties from source objects to destination (in order.)\n```javascript\nvar mixin = objutil.mixin(src, {});\n// mixin now has properties from src\n```\n\n```javascript\nvar dest = { foo: 'foo' };\nobjutil.mixin(src, dest);\n// `dest` now has `src` properties, and if any had the same name they were overwritten on `dest`\n```\n\nMultiple Sources\n```javascript\nvar dest = { foo: 'foo' };\nobjutil.mixin(src, anotherSrc, yetAnotherSrc, dest);\n// Source objects are copied in order, meaning:\n// 1. src is mixed into dest\n// 2. anotherSrc is then mixed into dest\n// 3. yetAnotherSrc is then mixed into dest\n```\n\n\n### merge(src..., dest)\nShallow merges properties from source objects to destination (in order), only adding properties if they weren't previosuly defined.\n```javascript\nvar merged = objutil.merge(src, {});\n// merged now has all properties from src\n```\n\n```javascript\nvar dest = { foo: 'foo' };\nobjutil.merge(src, dest);\n// `dest` now has all `src` properties, save `foo` as it was already defined.\n```\n\nMultiple Sources\n```javascript\nvar dest = { foo: 'foo' };\nobjutil.merge(src, anotherSrc, yetAnotherSrc, dest);\n// Source objects are copied in order, meaning:\n// 1. src is merged into dest\n// 2. anotherSrc is then merged into dest\n// 3. yetAnotherSrc is then merged into dest\n```\n\n\n\n### extend(constructor, superConstructor, [prototype])\nSimilar to `util.inherits` but additionally configures the resulting object with the provided prototype.\n```javascript\nvar objutil = require('objutil');\n\nfunction BaseClass() {\n\n}\n\nfunction SubClass() {\n   SubClass.super_.apply(this, arguments);\n   this._name = 'foo';\n}\n\n// Without additional prototype\n// objutil.extend(SubClass, BaseClass);\n\n// With SubClass prototype definition\nobjutil.extend(SubClass, BaseClass, {\n\n  get name () {\n      return this._name;\n  },\n\n  set name (value) {\n      this._name = value;\n  },\n\n  asString: function () {\n      return 'My name is ' + this._name\n  }\n\n});\n\n\nvar instance = new SubClass();\nconsole.log(instance.name); // 'foo'\nconsole.log(instance.asString()); // 'My name is foo'\n```\n\n### clone(src)\nPerforms a shallow copy of the provided object.\n```javascript\nvar child = { foo: 'foo' };\nvar parent = { child: child };\n\n// Shallow copying merely copies references to non-primitve values, so the child property will continue to reference\n// the same object\nvar otherParent = objutil.clone(parent);\nassert(otherParent !== parent); // true\nassert.strictEqual(otherParent.child, parent.child); // true\nassert.strictEqual(otherParent.child, child); // true\nassert.strictEqual(parent.child, child); // true\n```\n\n### deepClone(src)\nPerforms a deep copy of the provided object.\n```javascript\nvar child = { foo: 'foo' };\nvar parent = { child: child };\n\nvar otherParent = objutil.deepClone(parent);\nassert(otherParent !== parent); // true\nassert(otherParent.child !== parent.child); // true\nassert(otherParent.child !== child); // true\nassert.strictEqual(parent.child, child); // true\n```\n",
  "_id": "objutil@0.4.1",
  "_shasum": "e618c4effbd5022877e5c0ff9d5381768da27dbb",
  "_resolved": "http://npm.corp.ebay.com/objutil/-/objutil-0.4.1.tgz",
  "_from": "objutil@>=0.4.0 <0.5.0"
}
