'use strict';

var requestLocal = require('request-local');

var logger = require('logging-inc').logger(
    'instrument-inc/service-wrappers/ep');
var asyncwrap = require('instrument-inc/wrappers').asyncwrap;

var RuntimeError = require('../errors').RuntimeError;

var utils = require('../../utils/index');
var hmv = require('header-multi-value-ebay');

module.exports = function _ep(transport) {

    return asyncwrap(transport, function before(options, next) {

        this.req = tryRequest();
        this.ebay = this.req ? this.req.ebay : undefined;
        var isEnabled = true;

        if (typeof options.ep === 'boolean') {
            isEnabled = options.ep;
        }
        if (!isEnabled) {
            return next(null, options);
        }

        var err;

        if (this.ebay && this.ebay.experimentation && this.ebay.experimentation.preflightRequestHeaders) {
            options.headers = options.headers || {};
            options.ep = options.ep || 'EPRESULT';
            this.ebay.experimentation.preflightRequestHeaders(this.ebay, options, next);
        } else {
            err = new RuntimeError(
                'Cannot add Experimetation Headers, the Experimetation context is not found, ' +
                'please make sure you use Experimetation middleware');
            logger.warn(err);
            next(null, options);
        }

    }, function after(err, response, next) {
        var args = Array.prototype.slice.call(arguments);
        next = args.pop();
        err = args.shift();
        response = args.shift();

        if (!err && response && this.ebay && this.ebay.experimentation) {
            // if (utils.isChunkedResponse(response) && utils.isEpResponse(response)) {
                // Acorrding to Rameshbabu from lexignton team, EP is not provided
                // for web flow, so we do not know the actual structure
                // Thus, I disable it till we know more
                
                // piggyback on existing header functionality
                // this.ebay.experimentation.handleResponseHeaders(this.ebay, {
                //     'X-EBAY-SVC-EP-COOKIELET': response.body.data // or maybe response.body.data.ql
                // });
                // return;
            // } else {
                if (response.headers && this.ebay.experimentation.handleResponseHeaders) {
                    this.ebay.experimentation.handleResponseHeaders(this.ebay, response.headers);
                }
            // }
        }

        next(err, response);

    });

};

function getHeaderMultiValue(input) {
    var hmvList = (input || "").split("=");
    var headerValue = {};
    var _key;

    if (hmvList) {
        hmvList.forEach(function iter(key, idx) {
            if (idx % 2 === 0) {
                _key = key;
            } else {
                headerValue[_key] = key;
            }

        });
        return headerValue;
    }
}

function tryRequest() {
    try {
        return requestLocal.data.request;
    } catch (e) {
        logger.warn('ep: request-local is not available');
    }
}
