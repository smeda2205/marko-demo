'use strict';

var requestLocal = require('request-local');
var logger = require('logging-inc').logger('instrument-ebay/service-wrappers/cookies');
var asyncwrap = require('instrument-inc/wrappers').asyncwrap;

var RuntimeError = require('../errors').RuntimeError;

module.exports = function cookies(transport) {

    return asyncwrap(transport, function before(options, next) {

        if (!options.cookies) {
            // skip it
            return next(null, options);
        }

        this.req = tryRequest();
        this.res = tryResponse();
        this.cookiesConfig = options.cookies;

        if (this.req) {
            options.headers = options.headers || {};
            // include cookies from request?
            if (this.cookiesConfig.request && this.req.headers.cookie) {
                options.headers.cookie = this.req.headers.cookie;
            }
        }
        else {
            logger.error(new RuntimeError('Failed to include cookies to service request due ot missing request in the context'));
        }

        next(null, options);

    }, function after(err, response, next) {

        var args = Array.prototype.slice.call(arguments);
        next = args.pop();
        err = args.shift();
        response = args.shift();

        if (this.res && this.cookiesConfig) {
            if (this.res.headersSent) {
                logger.warn('Cannot set cookies from the service as the headers were already sent');
                // TODO: implement js header set or simply set to response object using ebay coookies
            }
            else if (!err && response) {
                var cookies = response.headers['Set-Cookie'];
                if (cookies) {
                    this.res.set('Set-Cookie', cookies);
                }
            }
        }

        next(err, response);
    });

};

function tryRequest() {
    try {
        return requestLocal.data.request;
    } catch (e) {
        logger.warn('cookies: request-local is not available');
    }    
}

function tryResponse() {
    try {
        return requestLocal.data.response;
    } catch (e) {
        logger.warn('cookies: request-local is not available');
    }    
}