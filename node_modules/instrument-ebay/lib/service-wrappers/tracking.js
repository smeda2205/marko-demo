'use strict';

var requestLocal = require('request-local');

var logger = require('logging-inc').logger(
    'instrument-inc/service-wrappers/tracking');
var asyncwrap = require('instrument-inc/wrappers').asyncwrap;

var RuntimeError = require('../errors').RuntimeError;

var utils = require('../../utils/index');

module.exports = function _tracking(transport) {

    return asyncwrap(transport, function before(options, next) {
        this.req = tryRequest();
        this.ebay = this.req ? this.req.ebay : undefined;

        if (options.tracking === false) {
            return next(null, options);
        }

        if (this.ebay && this.ebay.tracking) {
            options.headers = options.headers || {};
            this.ebay.tracking.addTrackingHeadersForRequest(options.headers);
        } else {
            logger.warn(new RuntimeError(
                'Cannot add tracking, the tracking context is not found, ' +
                'please make sure you use tracking middleware'));
        }

        next(null, options);

    }, function after(err, response, next) {

        var args = Array.prototype.slice.call(arguments);
        next = args.pop();
        err = args.shift();
        response = args.shift();

        if (!err && this.ebay && this.ebay.tracking) {
            if (utils.isChunkedResponse(response) && utils.isTrackingResponse(response)) {
                this.ebay.tracking.handleResponseHeaders(response.body.data);
                return;
            } else {
                if (response && response.headers) {
                    this.ebay.tracking.handleResponseHeaders(response.headers);
                }
            }
        }
        next(err, response);
    });

};

function tryRequest() {
    try {
        return requestLocal.data.request;
    } catch (e) {
        logger.warn('tracking: request-local is not available');
    }
}