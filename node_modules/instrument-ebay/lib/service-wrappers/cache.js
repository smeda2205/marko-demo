'use strict';

var assert = require('assert');

var tryRequire = require('try-require');
var logger = require('logging-inc').logger('caching');
var wrappers = require('instrument-inc/wrappers');
var asyncwrap = wrappers.asyncwrap;
var cacheProviders = {};

module.exports = function cache(transport) {
    return asyncwrap(transport, function before(options, next) {
        this.enabled = options.cache && options['cache-key'];
        if (!this.enabled) {
            // skip
            return next(null, options);
        }

        if (!this.inited) {
            this.inited = true;
            this.options = options;

            var provider = options.cache['cache-provider'];
            assert.ok(provider, 'Cache provider is missing in service client configuration');

            this.cache = cacheProviders[provider] ||
                (cacheProviders[provider] = tryRequire(provider));

            assert.ok(this.cache, 'Cache provider is not found, name: "' +
                provider + '"');
        }

        this.cache.get(this.options.cacheKey, function(err, result) {
            if (result) {
                //force to drop the pipe line
                err = new Error('Skip everything');
                err.type = 'result';
                err.result = result;
                return next(err);
            } else {
                next(null, options);
            }
        });

    }, function after(err, response, next) {
        var args = [].slice.call(arguments);
        next = args.pop();
        err = args.shift();
        response = args.shift();

        if (!this.enabled) {
            // skip
            return next(err, response);
        }

        if (err && err.type === 'result') {
            //response with cached result
            next(null, err.result);
        } else if (!err && response) {
            this.cache.put(this.options.cacheKey, {
                body: response.body,
                statusCode: response.statusCode,
                cached: true,
                errorCount: 0
            }, function(err, result) {
                if (err) {
                    logger.error('Failed to save in cache', err);
                }
            });
            next(err, response);
        } else {
            next(err, response);
        }
    });

};

module.exports.reset = function reset() {
    cacheProviders = {};
};
