'use strict';

var requestLocal = require('request-local');
var logger = require('logging-inc').logger('instrument-ebay/service-wrappers/oauth');
var asyncwrap = require('instrument-inc/wrappers').asyncwrap;
var Objutil = require('objutil');

var errors = require('../errors');
var RuntimeError = errors.RuntimeError;

module.exports = function oauth(transport) {

    return asyncwrap(transport, function before(options, next) {

        var oauthConfig = options.oauth;
        if (!oauthConfig) {
            return next(null, options);
        }

        var ebay = getContext();
        // add commerce OS headers
        if (ebay) {

            if (!ebay.oauth) {
                return next(new RuntimeError('oauth context was not found, please make sure you use oauth middleware'));
            }

            options = Objutil.clone(options);
            options.headers = Objutil.clone(options.headers) || {};

            // find what method to use
            var tokenOrder = oauthConfig.token || ['user', 'recognized-user', 'app'];
            // get resolver
            var resolve = tokenOrder.reduce(function reduce(memo, type) {
                if (memo && !(memo instanceof Error)) {
                    return memo;
                }

                var resolver = resolvers[type];
                if (!resolver) {
                    throw new RuntimeError('Unknown token type: ' + type);
                }

                return resolver(ebay.oauth, oauthConfig, options);
            }, new RuntimeError('No resolvers provided'));

            // if we get error, return it
            var err = resolve;
            if (err instanceof Error) {
                if (options.tolerant) {
                    options.errors = options.errors || [];
                    options.errors.push('Failed to get token due to ' + err.message);
                    return next(null, options);
                }
                return next(err);
            }

            // or call
            resolve(function cb(err, token) {
                if (err) {
                    if (options.tolerant) {
                        logger.error('Failed to get token due to', err);
                        options.errors = options.errors || [];
                        options.errors.push('Failed to get token due to ' + err.message);
                    }
                    else {
                        return next(new RuntimeError({
                            message: 'Failed to get token',
                            error: err
                        }));
                    }
                }
                else {
                    options.headers.authorization = 'Bearer ' + token.value;
                }

                next(null, options);
            });

        }
        else {
            next(null, options);
        }
    });

};

var oldAuthModule;

var resolvers = {
    'user': function getUserToken(oauth, oauthConfig, options) {
        if (oauth.isSignIn()) {
            logger.info('Using getUserToken to get oauth token');
            return oauth[options.browser ? 'getPublicUserToken' :
                'getUserToken'].bind(oauth, oauthConfig['app-name'], oauthConfig.scope &&
                    (oauthConfig.scope.user || oauthConfig.scope));
        }
        return new RuntimeError({
            message: 'User is not signed in, operation: getUserToken',
            code: 'UserNotSignedIn'
        });
    },

    'recognized-user': function getRecognizedUserToken(oauth, oauthConfig, options) {
        if (oauth.isRecognizedUser()) {
            logger.info('Using getRecognizedUserToken to get oauth token');

            var scopes = oauthConfig.scope &&
                    (oauthConfig.scope.app || oauthConfig.scope) || undefined;

            if (oldAuthModule === undefined) {
                oldAuthModule = oauth.getRecognizedUserToken.toString()
                    .indexOf('function getRecognizedUserToken(callback)') !== -1;

                if (oldAuthModule) {
                    logger.error(new Error('Detected old oauth-ebay module version, please upgrade'));
                }
            }
            // check if oauth-ebay was upgraded
            if (options.browser) {
                return oldAuthModule ?
                    oauth.getPublicRecognizedUserToken.bind(oauth, oauthConfig['app-name']) :
                    oauth.getPublicRecognizedUserToken.bind(oauth, oauthConfig['app-name'], scopes);
            }
            return oldAuthModule ?
                oauth.getRecognizedUserToken.bind(oauth) :
                oauth.getRecognizedUserToken.bind(oauth, scopes);
        }

        return new RuntimeError({
            message: 'User is not recognized, operation: getUserToken',
            code: 'UserNotRecognized'
        });
    },

    'app': function getAppToken(oauth, oauthConfig, options) {
        logger.info('Using getAppToken to get oauth token');
        return oauth[options.browser ? 'getPublicAppToken': 'getAppToken'].bind(oauth, oauthConfig['app-name'], oauthConfig.scope &&
                (oauthConfig.scope.app || oauthConfig.scope));
    }
};

function getContext() {
    try {
        var req = requestLocal.data.request;
        return req.ebay;
    } catch (e) {
        logger.warn('oauth: request-local is not available');
    }
}
