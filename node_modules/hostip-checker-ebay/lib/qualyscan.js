'use strict';

var ClientProvider = require('service-client-ebay');
var moduleConfig = require('module-config-inc');
var RaptorCache = require('raptor-cache');

var DEFAULT_REFRESH_TIMEOUT = 1000 * 60 * 60 * 24;

var logger = require('logging-inc').logger('hostip-checker-ebay/qualyscan');

var coldCache = createDiskCache();
var lastRefresh = 0;
var qualysIPs;
var config;

function loadIPs(callback) {
    var svc = ClientProvider.getClient('qualyIpSvc');
    svc.get().end(function handleResponse(err, res) {
        if (err) {
            return callback(err);
        }

        var ips;
        if (res.body && Array.isArray(res.body.qualysIPs)) {
            ips =  res.body.qualysIPs.reduce(function reduce(memo, ip) {
                memo[ip] = true;
                return memo;
            }, {});
        }
        else {
            err = new Error('Cannot recognize structure for qualyscan IP list ' +
                (Buffer.isBuffer(res.body) ? res.body.toString() : res.body));
        }

        callback(err, ips);
    });
}

function isEnabled() {
    return config && config.get('qualyscan:enabled');
}

function refreshCheck(callback) {
    callback = callback || function noop() {};

    if (coldCache && !qualysIPs) {
        // prevent other requests from loading cache, only one is allowed
        qualysIPs = {};
        // reload from the disk
        coldCache.get('qualysIPs', function onCacheEntry(err, data) {
            if (data) {
                qualysIPs = data;
            }
        });
    }

    moduleConfig(module, function handleConfig(err, _config) {
        if (err) {
            return callback(err);
        }

        config = _config;

        var refreshTimeout = _config.get('qualyscan:refreshTimeout') || DEFAULT_REFRESH_TIMEOUT;
        if (!lastRefresh || (Date.now() - lastRefresh) >  refreshTimeout) {
            // prevent other triggering refresh

            lastRefresh = Date.now();
            setImmediate(function doRefresh() {
                loadIPs(function (err, ips) {
                    if (err) {
                        // let's retry soon
                        return callback(err);
                    }
                    coldCache.put('qualysIPs', ips);
                    qualysIPs =  ips;
                    callback(null, ips);
                });
            });
            return;
        }
        callback();
    });
}

function isQualyscanIP(ip) {
    // initiate update if any needed
    refreshCheck();
    // check ip
    if (isEnabled() && ip && qualysIPs) {
        return !!qualysIPs[ip];
    }
    return false;
}

function deserialize(reader, callback) {
    var json = '';

    reader()
        .on('data', function(data) {
            json += data;
        })
        .on('end', function() {
            try {
                callback(null, JSON.parse(json));
            }
            catch (err) {
                callback(err);
            }
        })
        .on('error', function(err) {
            callback(err);
        });
}

function createDiskCache() {
    var nodeEnv = (process.env.NODE_ENV || 'development').toLowerCase();
    return RaptorCache.createDiskCache({
        dir: '.cache/hostip-checker-ebay-' + nodeEnv,
        serialize: JSON.stringify,
        deserialize: deserialize
    });
}

function reset() {
    qualysIPs = undefined;
    coldCache = createDiskCache();
    lastRefresh = 0;
    config = undefined;
}

exports.refreshCheck = refreshCheck;
exports.loadIPs = loadIPs;
exports.isQualyscanIP = isQualyscanIP;
exports.reset = reset;
Object.defineProperty(exports, 'config', {
    get: function getConfig() {
        return config;
    }
});
