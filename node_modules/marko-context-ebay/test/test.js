'use strict';

const PORT = 9876;

let express = require('express');
let assert = require('assert');
let http = require('http');
let { getRequest, getResponse, getEbay } = require('../index');
let template = require('marko').load(require.resolve('./template.marko'));

describe('marko-request-context', () => {
    it('render with res.marko', () => makeRequest((req, res) => {
        let out = res.marko(template, {});
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');
    }));

    it('render to response', () => makeRequest((req, res) => {
        let out = template.render({}, res);
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');
    }));

    it('get multiple times', () => makeRequest((req, res) => {
        let out = template.render({}, res);

        // first time...
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');

        // and again...
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');
    }));

    it('render with global req/res', () => makeRequest((req, res) => {
        let out = template.render({ $global:{ req, res } });
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');
    }));

    it('render with global req only', () => makeRequest((req, res) => {
        let out = template.render({ $global:{ req } });
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');
    }));

    it('render with global res only', () => makeRequest((req, res) => {
        let out = template.render({ $global:{ res } });
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
        assert(getEbay(out) === req.ebay, 'incorrect ebay');
    }));

    it('render with request-local', () => makeRequest(
        (req, res) => {
            let out = template.render({});
            assert(getRequest(out) === req, 'incorrect request');
            assert(getResponse(out) === res, 'incorrect response');
            assert(getEbay(out) === req.ebay, 'incorrect ebay');
        },
        require('request-local/middleware').create()
    ));

    it('render with no request context', () => {
        let out = template.render({});
        assert(getRequest(out) === undefined, 'incorrect request');
        assert(getResponse(out) === undefined, 'incorrect response');
        assert(getEbay(out) === undefined, 'incorrect ebay');
    });

    it('render with mock response', () => {
        let req = {};
        let res = { write:()=>{}, end:()=>{}, req };
        let out = template.render({}, res);
        assert(getRequest(out) === req, 'incorrect request');
        assert(getResponse(out) === res, 'incorrect response');
    });
});

async function makeRequest(handler, middleware) {
    let app = express();
    let server = http.createServer(app);

    app.use(require('marko/express')());
    if (middleware) app.use(middleware);

    await new Promise(async (resolve, reject) => {
        app.get('/', async (req, res) => {
            req.ebay = {};
            try {
                await handler(req, res);
                resolve();
            } catch(e) {
                reject(e);
            } finally {
                res.end();
                await new Promise(r => server.close(r));
            }
        });

        // start server
        await new Promise(r => server.listen(PORT, r));

        // make request, wait for response
        await new Promise(resolve => http.get(`http://localhost:${PORT}`, resolve));

        // close server
        await new Promise(r => server.close(r));
    });
}