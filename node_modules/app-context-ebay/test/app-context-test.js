'use strict';

var path = require('path');
var assert = require('assert');

var root = path.join(process.cwd(), 'test', 'fixtures');
process.chdir(root);

var appContext = require('../');

var _env = process.env.NODE_ENV;

describe(__filename, function () {

    describe('with poolname env not set', function () {
        before(function () {
            delete process.env.POOL_NAME;
        });
        defineSuite('nodedemo1', 'r1');
    });

    describe('with poolname env set:', function () {
        before(function () {
            process.env.POOL_NAME = 'nodedemo1x';
        });
        after(function () {
            delete process.env.POOL_NAME;
        });
        defineSuite('nodedemo1x');
    });

    describe('teamDL Test', function(){
        beforeEach(function(){
            // reload module
            delete require.cache[require.resolve('../')];
        });

        it('should return valid Owner List from package.json', function () {

            var _cwd = process.cwd;
            process.cwd = function() {
                return path.resolve(__dirname, './fixtures');
            };
            var appContext = require('../');
            assert.equal('owner@ebay.com,team@ebay.com', appContext.teamDL.join());
            process.cwd = _cwd;
        });

        it('should return empty list when package.json Unavailable', function () {
            var _cwd = process.cwd;
            process.cwd = function() {
                return path.resolve(__dirname, './');
            };
            var appContext = require('../');
            assert.equal('', appContext.teamDL.join());
            process.cwd = _cwd;
        });

        it('should return empty list when Owner Details Unavailable in package.json', function () {
            var _cwd = process.cwd;
            process.cwd = function() {
                return path.resolve(__dirname, './negative-test');
            };
            var appContext = require('../');
            assert.equal('', appContext.teamDL.join());
            process.cwd = _cwd;
        });
    });
});

function defineSuite(poolName, arch) {
    arch = arch || '';
    describe('appContext: ' + arch + poolName, function () {
        beforeEach(function before() {
            // reload module
            delete require.cache[require.resolve('../')];
            appContext = require('../');
        });

        it('default' + " for " + poolName, function () {
            assert.ok(appContext);
            assert.equal('nodedemo1', appContext.appName);
            assert.equal(arch + poolName, appContext.poolName);
            assert.ok(appContext.machineName);
            assert.ok(appContext.nuggetName);
            assert.ok(appContext.poolType);
            assert.ok(appContext.poolName);
            assert.equal(process.cwd(), appContext.baseDir);
            assert.equal('test-exp-svc', appContext.experienceService);
            assert.equal('urn:ebay-marketplace-consumerid:597ce0a9-bdd8-4983-b45b-3c27c99ae267', appContext.consumerId);
            assert.ok(appContext.teamDL);
            assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());
        });

        describe('production', function () {

            setEnv('production');

            it('should not have suffix in pool name for production' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.equal(arch + poolName, appContext.poolName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName, appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());
            });
        });

        describe('staging', function () {

            setEnv('staging');

            it('should not have suffix in pool name for staging' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.equal(arch + poolName, appContext.poolName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName, appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());            });
        });

        describe('pre-production', function () {

            setEnv('pre-production');

            it('should have "pre-production" suffix in pool name' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName + '-pre-production', appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());            });
        });

        describe('Pre-Production, case insensitive', function () {

            setEnv('Pre-Production');

            it('should have "pre-production" suffix in pool name' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName + '-pre-production', appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());
            });
        });

        describe('lnp', function () {

            setEnv('lnp');

            it('should have "lnp" suffix in pool name' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName + '-lnp', appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());
            });
        });


        describe('xstage', function () {

            setEnv('xstage');

            it('should not have suffix in pool name for xstage' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName + '-xstage', appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());
            });
        });

        describe('sandbox', function () {

            setEnv('sandbox');

            it('should not have suffix in pool name for sandbox' + " for " + poolName, function () {
                assert.ok(appContext);
                assert.equal('nodedemo1', appContext.appName);
                assert.ok(appContext.machineName);
                assert.ok(appContext.nuggetName);
                assert.ok(appContext.poolType);
                assert.ok(appContext.poolName);
                assert.equal(arch + poolName + '-sandbox', appContext.poolName);
                assert.equal(process.cwd(), appContext.baseDir);
                assert.equal('test-exp-svc', appContext.experienceService);
                assert.ok(appContext.teamDL);
                assert.equal('owner@ebay.com,team@ebay.com',appContext.teamDL.join());
            });
        });

    });
}

function setEnv(name) {

    before(function () {
        process.env.NODE_ENV = name;
        delete require.cache[require.resolve('../')];
        appContext = require('../');
    });

    after(function () {
        if (_env) {
            return process.env.NODE_ENV = _env;
        }
        delete process.env.NODE_ENV;
    });
}
