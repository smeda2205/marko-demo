'use strict';

var os = require('os'),
    path = require('path'),
    tryRequire = require('try-require'),
    pkg = tryRequire(path.resolve(process.cwd(), 'package.json'));

//Return contextual data about the application
var appContext = {
    appName: pkg && pkg.name || 'nodeapp',
    experienceService: pkg && pkg.gpaas && pkg.gpaas['experience-service'],
    machineName: process.env.MACHINE_NAME || os.hostname(),
    consumerId: pkg && pkg.gpaas && pkg.gpaas['consumer-id'],
    teamDL: getOwnerAndTeamDL()
};

// separate pre-production and lnp environment from the rest
var suffix = /pre-production|lnp|sandbox|xstage/i.test(process.env.NODE_ENV) ?
    ('-' + process.env.NODE_ENV.toLowerCase()) : '';

appContext.nuggetName = process.env.NUGGET_NAME || appContext.appName;
appContext.poolType = process.env.POOL_ARCHITECTURE || 'r1';
appContext.poolName = (process.env.POOL_NAME || appContext.poolType + appContext.nuggetName) + suffix;
appContext.baseDir = process.env.BASE_DIR || process.cwd();

if (appContext.experienceService) {
    appContext.defaultExpSvc = Array.isArray(appContext.experienceService) ? appContext.experienceService[0] : appContext.experienceService;
}

function getOwnerAndTeamDL() {
    var ownerAndTeamDL = [];
    if (pkg) {
        var ebayProps = pkg.gpaas || pkg.ebay;
        if (ebayProps) {
            ebayProps.owner && ownerAndTeamDL.push(ebayProps.owner);
            ebayProps["team-dl"] && ownerAndTeamDL.push(ebayProps["team-dl"]);
        }
    }
    return ownerAndTeamDL;
}

module.exports = appContext;
