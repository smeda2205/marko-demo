/**
 *
 * Middleware for generating meta information for any app.
 */
'use strict';

var debug = require('debuglog')('meta'),
    hostipChecker = require('hostip-checker-ebay'),
    model = {};

// This only runs as middleware in PayPal. In MarketPlaces environment
// it is handled by /admin/v3console/meta request so this is not wired up.
// No need for any eBay vs PayPal tests in this function.
module.exports = function meta() {

    var metaModel = require('./metaModel');

    return function meta(req, res, next) {

        var reqUrl = req.originalUrl || req.url;

        reqUrl = reqUrl.replace(/\/\//g, '/');
        if (reqUrl.charAt(reqUrl.length - 1) === '/') {
            reqUrl = reqUrl.substr(0, reqUrl.length - 1);
        }

        reqUrl = reqUrl.split('/');

        var checkUrl = reqUrl[reqUrl.length - 1],
            isECV = (checkUrl === 'ecv'),
            isMeta = (checkUrl === 'meta');

        // Fast exit if meta is not germane. ecv needs to work on
        // seemingly external urls as internal requests do not get the
        // load balancer header created so test it regardless
        if (isECV) {
            sendECV(req, res, next);
            return;
        }
        // Not /meta so let the next middleware take over
        if (!isMeta) {
            return next();
        }

        // If not internal request but /meta, let next middleware try it
        if (!isInternal(req)) {
            return next();
        }

        // Generate model and render as response.
        metaModel.getModel(req, res, model, function (err, model) {
            res.setHeader('Cache-Control', 'no-cache');
            res.json(model);
        });

    };

};

function isInternal(req) {
  var ip = getRemoteAddr(req);
  var chk = hostipChecker.checkIpSync(ip);
  if (chk && chk.isInternal) {
    return true;
  }
  return false;
}

function getRemoteAddr(req) {
    var clientIP = req.headers['x-ebay-client-ip'];
    clientIP = clientIP && clientIP.trim();
    var xff = !clientIP && req.headers['x-forwarded-for'] && req.headers['x-forwarded-for'].split(',');
    var ip = clientIP || xff && xff.pop().trim() || req.ip;
    return ip && ip.trim();
}

function sendECV(req, res) {
    debug('%s: ecv-monitor status check...', Date(Date.now()));
    var data =
    '<html><head><title>ECV Control: In</title></head><body><p>Request: To be in rotation</p></body></html>';
    res.setHeader('Cache-Control', 'no-cache');
    res.writeHeader(200, {"Content-Type": "text/html"});
    res.end(data);
}
