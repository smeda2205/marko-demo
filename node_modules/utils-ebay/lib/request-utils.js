'use strict';
var net = require('net');

function getRemoteAddr(req) {
    //Akamai headers check
    var clientIP = getIPFromHeader(req, 'x-ebay-akamai-9');
    if(!clientIP) {
        //X-eBay-Client-IP IP
        clientIP = getIPFromHeader(req, 'x-ebay-client-ip');
    }
    if(!clientIP) {
        //Read x-forwarded-for as Akamai & ebay-client-ip doesn't exists
        clientIP = getIPFromHeader(req, 'x-forwarded-for');
    }

    var ip = clientIP || req.ip;

    // handling IPv4-mapped IPv6 addresses - http://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
    if (/^::ffff:(\d{1,3}\.){3,3}\d{1,3}$/.test(ip)) {
      ip = ip.replace(/^::ffff:/, '');
    }
    return ip && ip.trim();
}

function getClientIP(req) {
    var clientIP = getIPFromHeader(req, 'x-forwarded-for');
    var ip = clientIP || req.ip;

    // handling IPv4-mapped IPv6 addresses - http://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
    if (/^::ffff:(\d{1,3}\.){3,3}\d{1,3}$/.test(ip)) {
      ip = ip.replace(/^::ffff:/, '');
    }
    return ip && ip.trim();
}

function isIPFromAkamaiHeader(req) {
    var clientIP = getIPFromHeader(req, 'x-ebay-akamai-9');

    if(clientIP) {
        return true;
    }

    return false;
}

function getIPFromHeader(req, headerName) {
    var headerValue = req.headers[headerName] && req.headers[headerName].split(',');
    headerValue = headerValue && headerValue[0] && headerValue[0].trim();
    return headerValue;
}

function getServerName(req) {
    var host = req.headers.host || 'ebay.com';
    var portStart = host.indexOf(':');
    if (portStart !== -1) {
        host = host.substring(0, portStart);
    }

    return host;
}

module.exports = {
    getRemoteAddr: getRemoteAddr,
    getClientIP: getClientIP,
    getServerName: getServerName,
    isIPFromAkamaiHeader: isIPFromAkamaiHeader
};
