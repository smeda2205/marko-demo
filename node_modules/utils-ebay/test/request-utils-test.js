'use strict';

var Assert = require('assert');
var requestUtils = require('../index');

describe(__filename, function () {

    it('should read Client IP from request when x-ebay-client-ip & x-forwarded-for are missing', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {},
            ip: '10.1.2.3'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from request when x-ebay-akamai-9 is null & x-ebay-client-ip & x-forwarded-for are missing', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-akamai-9': undefined
            },
            ip: '10.1.2.3'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-ebay-client-ip headers with space', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-client-ip': '10.1.2.3 '
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-ebay-client-ip (2 IP) address headers', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-client-ip': '10.1.2.3 , 127.0.0.1'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-ebay-akamai-9 headers with space', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-akamai-9': '10.1.2.3 '
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-ebay-akamai-9 (2 IP) address headers', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-akamai-9': '10.1.2.3 , 127.0.0.1'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-ebay-akamai-9 (2 IP) address headers along with x-ebay-client-ip & x-ebay-forwarded-for', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-akamai-9': '10.1.2.3 , 127.0.0.1',
                'x-ebay-client-ip': '10.4.5.6',
                'x-ebay-forwarded-for': '10.7.8.9'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IPv6 from x-ebay-akamai-9 (2 IP) address headers along with x-ebay-client-ip & x-ebay-forwarded-for', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-akamai-9': '::ffff:10.1.2.3 , ::ffff:127.0.0.1',
                'x-ebay-client-ip': '::ffff:10.4.5.6',
                'x-ebay-forwarded-for': '::ffff:10.7.8.9'
            },
            ip: '::ffff:10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-forwarded-for headers with space', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-forwarded-for': '10.1.2.3 '
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-forwarded-for (2 IP) address headers', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-forwarded-for': '10.1.2.3 , 127.0.0.1'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should read Client IP from x-ebay-client-ip not from x-forwarded-for when both exists', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-client-ip': '10.1.2.3 , 127.0.0.1',
                'x-forwarded-for': '10.1.2.4 , 127.0.0.2',
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.3', ip);
    });

    it('should convert x-ebay-client-ip IPv6 to IPv4 format and use first IP', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-ebay-client-ip': '::ffff:192.0.2.128 , ::ffff:192.0.2.7'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('192.0.2.128', ip);
    });

    it('should convert x-forwarded-for IPv6 to IPv4 format and use first IP', function () {
        var ip = requestUtils.getRemoteAddr({
            headers: {
                'x-forwarded-for': '::ffff:192.0.2.128 , ::ffff:192.0.2.7'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('192.0.2.128', ip);
    });

    it('should return Server IP without port', function () {
        var ip = requestUtils.getServerName({
            headers: {
                'host': '127.0.0.1'
            }
        });

        Assert.equal('127.0.0.1', ip);
    });

    it('should return ServerName without port', function () {
        var ip = requestUtils.getServerName({
            headers: {
                'host': 'some.ebay.com'
            }
        });

        Assert.equal('some.ebay.com', ip);
    });

    it('should return ServerName with port', function () {
        var ip = requestUtils.getServerName({
            headers: {
                'host': '127.0.0.1:8080'
            }
        });

        Assert.equal('127.0.0.1', ip);
    });

    it('should return default ebay.com as ServerName for empty host headers', function () {
        var ip = requestUtils.getServerName({
            headers: {
            }
        });

        Assert.equal('ebay.com', ip);
    });

    it('should validate Invalid IP for isIPFromAkamaiHeader from x-ebay-akamai-9 headers', function () {
        var hacked = requestUtils.isIPFromAkamaiHeader({
            headers: {
                'x-ebay-akamai-9': 'a.b.c.d'
            },
            ip: '10.1.2.5'
        });

        Assert.equal(true, hacked);
    });

    it('should validate Private IP(10.*.*.*) for isIPFromAkamaiHeader from x-ebay-akamai-9 headers', function () {
        var hacked = requestUtils.isIPFromAkamaiHeader({
            headers: {
                'x-ebay-akamai-9': '10.254.184.3'
            },
            ip: '10.1.2.5'
        });

        Assert.equal(true, hacked);
    });    

    it('should validate without x-ebay-akamai-9 for isIPFromAkamaiHeader', function () {
        var hacked = requestUtils.isIPFromAkamaiHeader({
            headers: {
                'x-forwarded-for': '216.113.189.169'
            },
            ip: '10.1.2.5'
        });

        Assert.equal(false, hacked);
    });

    it('should validate without headers for isIPFromAkamaiHeader', function () {
        var hacked = requestUtils.isIPFromAkamaiHeader({
            headers: {},
            ip: '10.1.2.5'
        });

        Assert.equal(false, hacked);
    });

    it('should validate with x-ebay-client-ip && without x-ebay-akamai-9 for isIPFromAkamaiHeader', function () {
        var hacked = requestUtils.isIPFromAkamaiHeader({
            headers: {
                'x-ebay-client-ip': '216.113.189.169'
            },
            ip: '10.1.2.5'
        });

        Assert.equal(false, hacked);
    });

    it('should validate with both x-ebay-client-ip && without x-ebay-akamai-9 for isIPFromAkamaiHeader', function () {
        var hacked = requestUtils.isIPFromAkamaiHeader({
            headers: {
                'x-ebay-client-ip': '216.113.189.169',
                'x-ebay-akamai-9': '216.113.189.169'
            },
            ip: '10.1.2.5'
        });

        Assert.equal(true, hacked);
    });

    it('should test getClientIP, read Client IP from x-forwarded-for (3 IP) address headers', function () {
        var ip = requestUtils.getClientIP({
            headers: {
                'x-forwarded-for': '213.3.10.79, 10.1.2.3 , 127.0.0.1'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('213.3.10.79', ip);
    });

    it('should test getClientIP, read Client IP from x-forwarded-for (1 IP) address headers', function () {
        var ip = requestUtils.getClientIP({
            headers: {
                'x-forwarded-for': '213.3.10.76'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('213.3.10.76', ip);
    });

    it('should test getClientIP for IPV6, read Client IP from x-forwarded-for (1 IP) address headers', function () {
        var ip = requestUtils.getClientIP({
            headers: {
                'x-forwarded-for': '::ffff:213.3.10.76'
            },
            ip: '10.1.2.5'
        });

        Assert.equal('213.3.10.76', ip);
    });

    it('should test getClientIP, read Client IP from default IP address', function () {
        var ip = requestUtils.getClientIP({
            headers: {                
            },
            ip: '10.1.2.5'
        });

        Assert.equal('10.1.2.5', ip);
    });


});
