'use strict';

const Url = require('url');
const Httpunch = require('httpunch');
const Hoek = require('hoek');
const Utils = require('utils-ebay');

module.exports.create = function create(config) {
    return function proxy(req, res) {
        const headers = config.headers;
        const parsedUrl = Url.parse(req.url);
        const requestOptions = Object.assign({}, config, {
            path: (config.path ? config.path : '') + parsedUrl.pathname,
            method: req.method
        });

        // merge request headers with proxy headers
        requestOptions.headers = Object.assign({}, req.headers, headers, {
            'X-eBay-Client-IP': Utils.getRemoteAddr(req) || '127.0.0.1',
            host: req.headers.host
        });

        if (req.query) {
            requestOptions.qs = parsedUrl.query;
        }

        if (req.body && Object.keys(req.body).length) {
            requestOptions.body = JSON.stringify(req.body);
        }

        var proxyRequest = Httpunch.request(requestOptions);
        proxyRequest.once('response', function (proxyResponse) {
            res.writeHead(proxyResponse.statusCode, proxyResponse.headers);
            proxyResponse.pipe(res);
            proxyRequest.on('abort', () => {
                proxyResponse.unpipe();
                proxyResponse.destroy();
            });
        });

        const handleErr = Hoek.once(err => {
            if (err.code === 'ETIMEDOUT' || err.code === 'ECONNRESET') {
                res.writeHead(504, `Gateway timeout`);
                res.write(`Host info ${JSON.stringify(requestOptions, null, '  ')}`);
            }
            else {
                res.writeHead(500, 'Unknown error');
                res.write(err.stack);
            }
            res.end();

        });

        proxyRequest.on('error', handleErr);

        req.pipe(proxyRequest);
        req.on('end', () => proxyRequest.end());

        return proxyRequest;
    };
};
