'use strict';

var os = require('os'),
    path = require('path'),
    _ = require('underscore'),
    moment = require('moment'),
    utils = require('./utils'),
    fs = require('graceful-fs'),
    heartbeat = require('./heartbeat'),
    renderers = require('./renderers'),
    tryRequire = require('try-require'),
    ViUtils = require('./utils'),
    componentStatus = require('./component-status.js'),
    connectionTester = require('connection-tester'),
    async = require('async'),
    environment = require('environment-ebay');

var manifest = tryRequire(path.join(process.cwd(), 'manifest.json')),
    earStartTime = moment(Date.now() - process.uptime()).format('ddd MMMM DD HH:mm:ss Z YYYY'),
    debugInfo = utils.buidDebugInfo();

var metadata = process.env.CRONUSAPP_HOME &&
    tryRequire(path.join(process.env.CRONUSAPP_HOME, '.metadata.json'));   

let dependencyFileName = environment.isProd() ? 'consumer-all.json' : 'consumer-all-staging.json';
let serviceDependencies = tryRequire(path.join(process.cwd(), dependencyFileName));     

// Generates Initialization Information Component Status
// TODO Can we get this info from the install process?
module.exports = {

    initSiteValidatorComponents: function initSiteValidatorComponents() {

        componentStatus.register('Initialization Information',
            function () {
                return getInitializationInformation();
            });
        componentStatus.register('Host Information',
            function () {
                return getHostInformation();
            });
        componentStatus.register('Application Build Information',
            function () {
                return getAppBuildInformation(manifest);
            });
        componentStatus.register('Server Status',
            function () {
                return getServerStatus();
            });
        componentStatus.register('ThreadsResourceConsumption',
            function () {
                return getThreadsResourceInformation();
            },
            renderers.threadResourceRender);
        componentStatus.register('Services Status Information',
            getServicesStatusInformation, null, true);            


    }
};

// Generate Application Build Information Component Status
function getAppBuildInformation(manifest) {
    // Double entries for Java metrics with an associated node one in case
    // unknown system monitoring tools are looking for the magic Java strings.
    var buildInfo = {},
        cronus = loadCronusProp();

    if (manifest && manifest.version) {
        buildInfo.BUILD_ID = manifest.name;
        buildInfo.BUILD_TAG = manifest.version.buildTimestamp;
        buildInfo.APP_VERSION = manifest.version.appVersion;
    }
    if(cronus) {
      buildInfo.BUILD_ID = buildInfo.BUILD_ID + '-' + cronus.version;
    }
    if (debugInfo && debugInfo.scm) {
        buildInfo.GIT_BRANCH = debugInfo.scm.gitBranch;
        buildInfo.GIT_REMOTE_REPOSITORY = debugInfo.scm.gitUrl;
        buildInfo.GIT_REVISION = debugInfo.scm.gitCommit;
    }

    var appBuildComponentStatus = {
        'name': 'Application Build Information',
        'alias': 'Application Build Information',
        'status': 'created',
        'properties': _.map(buildInfo, function (val, key) {
            return {
                'name': key,
                'value': val
            };
        })
    };
    return appBuildComponentStatus;
}

function getServerStatus() {
    return {
        'name': 'Server Status',
        'alias': 'serverstatus',
        'status': 'ok',
        'properties': [
            {
                'name': 'Status',
                'value': 'Ready'
            }
        ]
    };
}

function loadCronusProp() {
  try{
    return JSON.parse(fs.readFileSync(path.join(process.cwd(), '../cronus.prop'), "utf8"));
  }catch(err) {
    return null;
  }
}

// Generates Host Information Component Status
function getHostInformation() {

    var memoryUsage = process.memoryUsage();
    var availMemory = memoryUsage.heapTotal - memoryUsage.heapUsed;
    var metrics = heartbeat.getMetrics();
    // Double entries for Java metrics with an associated node one in case
    // unknown system monitoring tools are looking for the magic Java strings.
    var hostInformation = {
        'Container': 'node.js-' + process.version,
        'CPU Usage': ViUtils.round(metrics.cpu, 2),
        'EAR start Time': earStartTime,
        'EAR Re-start Time at': earStartTime,
        //TODO Should be Fri May 16 HH:MM:SS GMT-07:00 2014
        'Host System Time': moment(Date.now()).format('ddd MMMM DD HH:mm:ss Z YYYY'),
        'Host': os.hostname(),
        'Environment': process.env.NODE_ENV,
        'Initialization Status': 'Successful',
        'Java Process Memory Used': memoryUsage.heapUsed,
        'Node.js Memory Used': memoryUsage.heapUsed,
        'JVM Memory Available': availMemory,
        'Node.js Memory Available': availMemory,
        'Node.js Memory Limits Available': 1.5e9 - memoryUsage.heapUsed,
        'JVM Memory Total': memoryUsage.heapTotal,
        'Node.js Memory Total': memoryUsage.heapTotal,
        'Node.js Memory Limits Total': 1.5e9,
        'OS': os.platform() + '-' + os.release(),
        'Physical Memory Available': os.freemem(),
        'Physical Memory Total': os.totalmem(),
        'Workers': ViUtils.getWorkersNumber(),
        'Worker': ViUtils.getWorkerId(),
        'Pid': process.pid,
        'PaaSRealm': metadata && metadata.paasRealm || '',
        'VPC': metadata && metadata.vpc || ''
    };

    var hostComponentStatus = {
        'name': 'Host Information',
        'alias': 'Host Information',
        'status': 'created',
        'properties': _.map(hostInformation, function (val, key) {
            return {
                'name': key,
                'value': val
            };
        })
    };
    return hostComponentStatus;
}

function getInitializationInformation() {
    var initInformation = {
        'deploymentTotalTime': '00:00:00.0',
        'errorMessage': '',
        'initSuccess': 'true',
        'initTotalTime': '00:00:00.0',
        'startTime': earStartTime
    };

    var initComponentStatus = {
        'name': 'Initialization Information',
        'alias': 'Initialization Information',
        'status': 'created',
        'properties': _.map(initInformation, function (val, key) {
            return {
                'name': key,
                'value': val
            };
        })
    };
    return initComponentStatus;
}

//http://slc4b01c-0038.stratus.slc.ebay.com:8080/admin/v3console/ValidateInternals?component=ThreadsResourceConsumption&threadListingCount=-1&filter=KERNEL_Timer#
function getThreadsResourceInformation() {
    var threadInfo = {
    };

    var threadResourceComponentStatus = {
        'name': 'Thread Resource Information',
        'alias': 'Thread Resource Information',
        'status': 'created',
        'properties': _.map(threadInfo, function (val, key) {
            return {
                'name': key,
                'value': val
            };
        })
    };
    return {};
}

function getServicesStatusInformation(callback) {
    let connTesterList = [];
    if(serviceDependencies) {
        connTesterList = serviceDependencies.dependencies.map((service) => {
            return (cb) => {
                connectionTester.test(service.hostname, service.port, 1000, (err, result) => {
                    let serviceConfig = `${service.hostname}:${service.port} (${service.modulename}) (${service.servicename})`;
                    let configName = `nodejs.config.${service.modulename}.${service.servicename}`;
                    cb(null, {'configname': configName,'serviceconfig':serviceConfig, 'status': (result.success && 'âˆš Success') || ('X Error: ' + result.error), 'color': (result.success ? 4 : 1)});
                });
            };
        });
    }

    async.parallel(connTesterList, (err, connTestResults) => {
        var servicesComponentStatus = {
            'name': 'Services Status Information',
            'alias': 'Services Status Information',
            'status': 'created',
            'properties': _.map(connTestResults, function (val, key) {
                return {
                    'name': val.serviceconfig,
                    'value': val.status,
                    'href': val.configname,
                    'color': val.color
                };
            })
        };
        callback(servicesComponentStatus);
    });    
}
