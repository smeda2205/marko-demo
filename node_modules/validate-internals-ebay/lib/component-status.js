'use strict';

var configBean = require('config-bean-ebay'),
    components = {};

// Returns list of registered component ids
var getComponents = exports.getComponents = function getComponents() {
    return Object.keys(components);
};

var getStatus = exports.getStatus = function getStatus(name, callback) {
    var status;
    if(components[name] && components[name].handler) {
        status = components[name].handler(callback);
    }
    return status;
};

var isStatusAsync = exports.isStatusAsync = function isStatusAsync(name) {
    return components[name] && components[name].isAsync;
};

var getRenderer = exports.getRenderer = function getRenderer(name) {
    return components[name] && components[name].renderer;
};

// Register a component. Note: components are mostly here for the
// built-in components. Java has them but with node we have multiple
// child workers who cannot exchange info on registered components
// except via disk which then makes components mostly like config beans.
// renderer is optional. A default properties render will be used if it
// omitted.
var register = exports.register = function register(component, handler, renderer, isAsync) {
    components[component] = {
        handler: handler,
        renderer: renderer,
        isAsync: isAsync
    };
};

function enableComponentStatus() {

    var trafficEnabler = {
        'configbean': true,
        'id': 'ebay.kernel.ServeTraffic',
        'alias': 'ebay.kernel.ecv',
        'group': 'ebay.kernel',
        'desc': 'Serve Traffic to this server.',
        'attributes': [{
            'name': 'Value',
            'value': 'TrafficEnabled',
            'desc': 'Serve Traffic to this server.',
            'type': 'com.ebay.kernel.presentation.config.ServeTrafficStatus',
            'readable': 'true',
            'writable': 'true'
        }]
    };
    var trafficBean = configBean.define(trafficEnabler);
    var bean = configBean.getBeanById('ebay.kernel.ServeTraffic');
    if(bean){
        var trafficBeanVal = bean.get('Value');
        //Reset Bean Value back to TrafficEnabled on startup
        if(trafficBeanVal === 'ServeTrafficSoftMarkdown') {
            bean.set('Value', 'TrafficEnabled');
            //configBean.syncDiskBeans();
        }
    }

    // trafficBean.on('changed', function () {console.log("CAUGHT CHANGED EVENT");});
}

exports.enableComponentStatus = enableComponentStatus;
