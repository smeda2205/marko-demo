<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Hystrix Dashboard</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

	<!-- Setup base for everything -->
	<link rel="stylesheet" type="text/css" href="../global.css" />

	<!-- Our custom CSS -->
	<link rel="stylesheet" type="text/css" href="../monitor/monitor.css" />

	<!-- d3 -->
	<script type="text/javascript" src="../js/d3.v2.min.js"></script>

	<!-- Javascript to monitor and display -->
	<script src="../js/jquery.min.js" type="text/javascript"></script>
	<script type="text/javascript" src="../js/jquery.tinysort.min.js"></script>
	<script type="text/javascript" src="../js/tmpl.js"></script>

	<!-- HystrixCommand -->
	<script type="text/javascript" src="../components/hystrixCommand/hystrixCommand.js"></script>
	<link rel="stylesheet" type="text/css" href="../components/hystrixCommand/hystrixCommand.css" />

	<!-- HystrixThreadPool -->
	<script type="text/javascript" src="../components/hystrixThreadPool/hystrixThreadPool.js"></script>
	<link rel="stylesheet" type="text/css" href="../components/hystrixThreadPool/hystrixThreadPool.css" />

</head>
<body>
	<div id="header">
		<h2><span id="title_name">Hystrix Dashboard</span></h2>
	</div>

	<div class="container">
		<% for(var index = 0; index < workers.length; index++) {
			var worker = workers[index];
		%>
		<div class="row">
			<div class="menubar">
				<div class="title">
				Circuit for worker <%=worker.name%>
				</div>
				<div class="menu_actions">
					Sort:
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByErrorThenVolume();">Error then Volume</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortAlphabetically();">Alphabetical</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByVolume();">Volume</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByError();">Error</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByLatencyMean();">Mean</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByLatencyMedian();">Median</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByLatency90();">90</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByLatency99();">99</a> |
					<a href="javascript://" onclick="hystrixMonitor_<%=worker.name%>.sortByLatency995();">99.5</a>
				</div>
				<div class="menu_legend">
					<span class="success">Success</span> | <span class="shortCircuited">Short-Circuited</span> | <span class="timeout">Timeout</span> | <span class="rejected">Rejected</span> | <span class="failure">Failure</span> | <span class="errorPercentage">Error %</span>
				</div>
			</div>
		</div>
		<div id="dependencies_<%=(worker.name)%>" class="row dependencies"><span class="loading">No data available yet</span></div>

		<div class="spacer"></div>
		<div class="spacer"></div>

		<script>
				/**
				 * Queue up the monitor to start once the page has finished loading.
				 *
				 * This is an inline script and expects to execute once on page load.
				 */

				 // commands
				var hystrixMonitor_<%=worker.name%> = new HystrixCommandMonitor(<%=worker.name%>, 'dependencies_<%=worker.name%>', {includeDetailIcon:false});

				var commandStream_<%=worker.name%> = "../hystrix.stream?worker=<%=worker.name%>";
				// var poolStream = "../hystrix.stream";

				$(window).load(function() { // within load with a setTimeout to prevent the infinite spinner
					setTimeout(function() {
							if ( $.browser.msie ) {
								alert("IE browser is not supported. Please use Chrome browser.");
								$("#dependencies .loading").html("IE browser is not supported. Please use Chrome browser.");
								$("#dependencies .loading").addClass("failed");
							}
							// sort by error+volume by default
							hystrixMonitor_<%=worker.name%>.sortByErrorThenVolume();

							// start the EventSource which will open a streaming connection to the server
							var source = new EventSource(commandStream_<%=worker.name%>);

							// add the listener that will process incoming events
							source.addEventListener('message', hystrixMonitor_<%=worker.name%>.eventSourceMessageListener, false);

							source.addEventListener('open', function(e) {
								console.log(">>> opened connection, phase: " + e.eventPhase);
								// Connection was opened.
							}, false);

							source.addEventListener('error', function(e) {
							  if (e.eventPhase == EventSource.CLOSED) {
							    // Connection was closed.
								  console.log("Connection was closed on error: " + e);
							  } else {
								  console.log("Error occurred while streaming: " + e);
							  }
							}, false);
					},0);
				});

			</script>
		<% } %>

	</div>


</body>
</html>
