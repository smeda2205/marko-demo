$(document).ready(function() {
  if (typeof initPage == 'function') { initPage();}	 
 
  var $infoTable = $("#infoTableId");
  var oInfoTable = undefined;
  if (!$infoTable) {
   alert("No Information table!");
  } else {
   oInfoTable = $infoTable.dataTable({
    "bJQueryUI": true,
    "bProcessing" : true,
    "bPaginate": false, 
    "bScrollCollapse": true, 
    "bServerSide": false, 
    "bAutoWidth": true,
    "bInfo": false
   });
   $d = $("#infoTableId_filter");   
   if ($d && $("#infoTableId_title")) {
   	$d.before($("#infoTableId_title"));
   }
  }
  
  $(function() {
	$("#btnAddNewRow").button();
	$("#btnDeleteRow").button();
	$("#submitBtnId").button();
	$("#resetBtnId").button();
  });
    
  var $table = $("#propTableId"); 
  var oTable = undefined;
  var fnToggleChanged = function (changed) {
   $("#submitBtnId").button("option", "disabled", !changed);
   $("#resetBtnId").button("option", "disabled", !changed);
   if (!changed) $("#btnDeleteRow").button("option", "disabled", true);
  };
  if (!$table) {
   alert("No Properties table!");
  } else {
   oTable = $table.dataTable({
    "bJQueryUI": true,
    "bProcessing" : true,
    "bPaginate": false,
    "bScrollCollapse": true, 
    "bAutoWidth": true, 
    "bServerSide" : false,
    "bInfo": false
   });

   $d = $("#propTableId_filter");   
   if ($d && $("#propTableId_title")) {
   	$d.before($("#propTableId_title"));
   }
   
   $d = $("#propTableId_wrapper");   
   if ($d) {
   	$d = $d.children(".ui-corner-br");
   	if ($d && $("#updateControls")) {
   		$d.append($("#updateControls"));
   		$d.css("padding", "0px");
   	}
   }
   
   var oOrigData = {};
   var fnDisplayAddError = function (message) {
    var $lblAddError = $("#lblAddError");
    if ($lblAddError) {
     var errMsg = message ? message : "Unknown Error";
     $lblAddError.html(errMsg);
     $lblAddError.show();
    } else {
     jAlert("No error console!", "Add failed");
    }
   };
   var iChangedValuesCount = 0;
   var fnMarkChangedCell = function ($td, bFirstChanged, bRestored, styleClassName) {
	    if (bFirstChanged) {
	     $td.addClass(styleClassName);
	     if (iChangedValuesCount === 0) {
	      fnToggleChanged(true);
	     }
	     iChangedValuesCount++;
	    } else if (bRestored) { 
	     $td.removeClass(styleClassName);
	     if (iChangedValuesCount > 0) iChangedValuesCount--;
	     if (iChangedValuesCount === 0) {
	      fnToggleChanged(false);
	     }
	    }
   };   
   var fnMarkChangedValue = function ($td, bFirstChanged, bRestored) {
	   fnMarkChangedCell($td, bFirstChanged, bRestored, "updated-cell");
   }
   var fnMarkName4ChangedValue = function ($td, bFirstChanged, bRestored) {
	   fnMarkChangedCell($td, bFirstChanged, bRestored, "updated-row-head");
   };
   var fnAddToForm = function (sName, sOldValue, sNewValue) {
    var bFirstChanged = false;
    var bRestored = false;
    var sOrigValue = undefined;
    
    if (sNewValue !== undefined && sOldValue !== sNewValue) { // old value different than new value
     sOrigValue = oOrigData[sName];
     if (sOrigValue !== undefined) { // there was a previous change
      if (sOrigValue === sNewValue) { // restoring
       bRestored = true;
      } else if (sOrigValue === sOldValue) { // new change
       bFirstChanged = true;
      } //else {  // nothing - there already was a change  //}
     } else {
      oOrigData[sName] = sOldValue;
      bFirstChanged = true;
     }
     // find the name of the property
     //var propId = $("td:eq(0)", $("#" + sName)).html();
     var propId = sName;
     if (sName.indexOf(".") == -1) {
    	 // adding a property with "." in its name; existing names are having "_" instead
    	 propId = $("td:eq(0)", $("#" + sName)).html();
     }
     $form = $("#submitFormId");
     var $input = undefined;
     if ($form) {
      if (bFirstChanged) {
       $form.append("<input type='hidden' name='" + propId + "' value='" + sNewValue + "'/>");
      } else if (bRestored) {
       $input = $("input[name='" + propId + "']", $form);
       $input.remove();
      } else {
       // yet another change - no CSS change
       $input = $("input[name='" + propId + "']", $form);
       $input.attr("value", sNewValue);
      }
      return {bFirstChanged: bFirstChanged, bRestored: bRestored, sError: null};
     } else {
      return {
       bFirstChanged: bFirstChanged, 
       bRestored: bRestored, 
       sError: "No submit form with id = 'submitFormId' on page"};
     }
    } else {
     return null;
    }
   };

   var fnUpdateCellValue = function(sValue, settings) {
      return fnUpdateTdValue(sValue, settings, this);
   } 
	 
   var fnUpdateTdValue = function(sValue, settings, theCell) {
      var aPos = oTable.fnGetPosition(theCell);
      var aData = oTable.fnGetData(aPos[0]);
      var trId = theCell.parentNode.id;
      var oRet = fnAddToForm.call(theCell, trId, $.trim(aData[aPos[1]]), $.trim(sValue));
      if (oRet && oRet.sError) {
       jAlert(oRet.sError, "Update failed");
       return oRet.sError;
      } else if (oRet) {
	      oTable.fnUpdate(sValue, aPos[0], aPos[1]);
    	  fnMarkName4ChangedValue($("td:eq(0)", $(theCell).parent()), oRet.bFirstChanged, oRet.bRestored);
      }
      
      return sValue;
     }
   
//   var fnDisableDeleteButton = function() {
//    	 if ($("#btnDeleteRow")) $("#btnDeleteRow").button("option", "disabled", true);
//   }
//   
//   var fnEnableDeleteButton = function() {
//    	 if ($("#btnDeleteRow")) $("#btnDeleteRow").button("option", "disabled", false);
//   }

   oTable.makeEditable({
     sDeleteURL: function (data) {
   			var sName = data.id;
   			var sOrigValue = oOrigData[sName];
   			var $tr = $("#" + sName);
   			var nTR = $tr["0"];
   			var sValue = oTable.fnGetData(nTR)[1];
     	var oRet = fnAddToForm(sName, sValue, sOrigValue);
     	var iUpd = undefined;
     	if (oRet) {
     		if (oRet.bFirstChanged) {
     			throw "Cannot be first-changed when it's being restored!";
     		} 
     		if (oRet.bRestored) {
      		if (sOrigValue === null) { // was a new row that is to be deleted from the table
       		fnMarkName4ChangedValue($("td:eq(0)", $tr), oRet.bFirstChanged, oRet.bRestored);
      			return "ok";
      		} else { // was a pre-existing row that was restored
       		fnMarkName4ChangedValue($("td:eq(0)", $tr), oRet.bFirstChanged, oRet.bRestored);
       		iUpd = oTable.fnUpdate(sOrigValue, nTR, 1, false, false);
       		if (iUpd > 0 && window.console) {
       			console.warn("FUBAAR: Update failed with status: " + iUpd);
       		}
       		return "Successfully restored " + sName + " = " + sOrigValue;
       	}
     		}
     	}
   			
   			return "Row has not been changed; nothing to reset.";
   		}, 
     sAddURL: function () {
      var sName = $("#nameAddId", this).val();
      var sValue = $("#valueAddId", this).val();
      return sName;
     },
     sUpdateURL: fnUpdateCellValue, 
     fnShowError: function (message, action) {
      switch (action) {
       case "update":
        jAlert(message, "Updating");
        break;
       case "delete":
        jAlert(message, "Resetting");
        break;
       case "add": 
        fnDisplayAddError(message);
        break;
      }
     }, 
     fnStartProcessingMode: function () {
      $("#processing_message").dialog();
     },
     fnEndProcessingMode: function () {
      $("#processing_message").dialog("close");
     }, 
     fnOnEditing: function(input) {  
      var sValue = input.val();
      $.trim(sValue);
      return true;
     },
     fnOnAdding: function () {
      var sName = $.trim($("#nameAddId").val());
      
      var aaData = oTable.fnGetData();
      for (var i = 0; i < aaData.length; i++) {
       if ($.trim(aaData[i][0]) === sName) {
        fnDisplayAddError("Property '" + sName + "' already exists!");
        return false;
       }
      }
      
      return true;
     }, 
     fnOnAdded: function (status, oTRAdded) {
     	var aPos = undefined;
     	var aData = undefined;
     	var oRet = undefined;
      if (status == "success") {
       aPos = oTable.fnGetPosition(oTRAdded);
       aData = oTable.fnGetData(aPos);
       oRet = fnAddToForm.call(oTRAdded, $.trim(aData[0]), null, $.trim(aData[1]));
       if (oRet && oRet.sError) {
        jAlert(oRet.sError, "Update failed");
        return oRet.sError;
       } else if (oRet) {
	     $("td:eq(1)", $(oTRAdded)).editable(function(value, settings) {
	       fnUpdateTdValue(value, settings, this);
	       return(value);
	     },{});   
         fnMarkName4ChangedValue($("td:eq(0)", $(oTRAdded)), oRet.bFirstChanged, oRet.bRestored);
       }
      } else {
      	if (window.console) console.log("Add failed");
      }
     }, 
     fnOnDeleting: function (tr, id, fnDeleteRow) {
  	   var sName = id;
  	   var sOrigValue = oOrigData[sName];
  	   var bChanged = false;
  	   if (sOrigValue !== undefined) {
//			* NOTE: this should work, but it doesn't as the given TR object doesn't match the one
//			 * Datatables.editable plug-in holds internally, even though they look identical to me. 
//			var sValue = oTable.fnGetData(tr)[1];
//			*
         var $tr = $("#" + sName);
         var sValue = oTable.fnGetData($tr["0"])[1];
         if (sOrigValue !== sValue) {
        	 bChanged = true;
         }
       }
  	   if (!bChanged) {
  	     jAlert("Row has not changed; nothing to reset.", "Nothing to reset");
  	     return false;
       }
  	   jConfirm('Please confirm that you want to reset property ' + id, 'Confirm Reset', function (r) {
         if (true == r) {
           fnDeleteRow(id);
         }
       });
      // only get here if user pressed cancel; proceed NOT with deletion, then.
      return false;
     }, 
      fnOnDeleted: function (status) {  
       if (window.console) console.log("Delete/reset action finished. Status - " + status);
     }, 
     "aoColumns": [
          null, null]
   });

   $(window).bind('resize', function () {
    oInfoTable.fnAdjustColumnSizing();
    oTable.fnAdjustColumnSizing();
    moreTopMenu();
    return true;
   });
  }
  
  $("#resetBtnId").click(function () {
   var aaData = oTable.fnGetData(/* get all data */);
   var i = undefined;
   var aRow = undefined;
   var sName = undefined;
   var sValue = undefined;
   var sOrigValue = undefined;
   var oRet = undefined;
   var iDelCnt = 0;
   if (aaData) {
    for (i = 0; i < aaData.length; i++) {
    	aRow = aaData[i];
    	sName = $.trim(aRow[0]);
    	sValue = $.trim(aRow[1]);
    	sOrigValue = oOrigData[sName];
    	var nTRNode = undefined;
    	var iUpd = undefined;
    	oRet = fnAddToForm(sName, sValue, sOrigValue);
    	if (oRet) {
    		if (oRet.bFirstChanged) {
    			throw "Cannot be first-changed when it's being restored!";
    		} 
    		if (oRet.bRestored) {
     		nTRNode = oTable.fnGetNodes(i - iDelCnt);
     		fnMarkName4ChangedValue($("td:eq(0)", $(nTRNode)), oRet.bFirstChanged, oRet.bRestored);
     		if (sOrigValue === null) {
      		oTable.fnDeleteRow(i - iDelCnt);
      		iDelCnt++;
     		} else { // but has not been yet restored
      		iUpd = oTable.fnUpdate(sOrigValue, i - iDelCnt, 1, false, false);
      		if (iUpd > 0 && window.console) {
      			console.warn("Update failed with status: " + iUpd);
      		}
      	}
    		}
    	}
    }
    fnToggleChanged(false);
   }
  });

  if ($('#popup_errors')) {
	  $('#popup_errors').dialog({
               autoOpen: false,
               minWidth: 400,
               modal: true,
               resizable: true,
               closeOnEscape: true,
               buttons: {
                  "Close": function() {
                      $(this).dialog("close");
                  }
              }, 
              open: function(event, ui) {
            	  var titleDiv = $(this).parent().find('.ui-dialog-title');
            	  if (titleDiv) {
            	      titleDiv.before('<div class="warnings_icon"></div>');
            	  }
            	  titleDiv = $(this).parent().find('.ui-dialog-titlebar');
            	  if (titleDiv) {
            	      titleDiv.attr('id', "popup_errors_titlebar");
            	  }
              }
          }
        );
        $('#popup_errors').dialog('open');
  }
  
  if (typeof postInitPage == 'function') { postInitPage(fnUpdateTdValue);}
  initTopMenu();
 });
