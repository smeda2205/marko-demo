'use strict';

function HeaderMultiValue(value, caseInsensitive, tolerant) {
    this.value = {};
    if (value && typeof value === 'object') {
        var self = this;
        Object.keys(value).forEach(function (key) {
            self.set(caseInsensitive ? key.toLowerCase() : key, value[key]);
        });
    }
    else if (value && typeof value === 'string') {
        var values = value.split(/ +, +| ?, +| +, ?| ?, ?/);

        this.value = values.reduce(function (memo, item) {
                var kvp = item.split('=');
                if (kvp.length < 2) {
                    if (tolerant) {
                        return memo;
                    }
                    throw new Error('Header has invalid format, missing \'=\'');
                }
                memo[caseInsensitive ? kvp[0].toLowerCase() : kvp[0]] = decodeURIComponent(kvp[1]);
                return memo;
            }, {});
    }
}

HeaderMultiValue.prototype = {
    get: function (name) {
        return this.value[name];
    },

    set: function (name, value) {
        if (value !== undefined && value !== null) {
            this.value[name] = value;
        }
        return this;
    },

    names: function () {
        return Object.keys(this.value);
    },

    toString: function () {
        var self = this;
        return this.names().reduce(function (memo, key) {
            memo.push(key + '=' + encodeURIComponent(self.get(key)));
            return memo;
        }, []).join(',');
    }
};

module.exports.parse = function (headerValue, caseInsensitive, tolerant) {
    return new HeaderMultiValue(headerValue, caseInsensitive, tolerant);
};

module.exports.create = function (kvps, caseInsensitive) {
    return new HeaderMultiValue(kvps, caseInsensitive);
};
